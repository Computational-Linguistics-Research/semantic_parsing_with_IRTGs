interpretation tree: de.up.ling.irtg.algebra.TagTreeAlgebra 
interpretation ud: de.up.ling.irtg.algebra.graph.GraphAlgebra 
interpretation fourlang: de.up.ling.irtg.algebra.graph.GraphAlgebra 

//rules 
//Unary 
//Start sentence 

S! -> _adjmod(ADJP) 
[tree] ADJP(?1) 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_DT(DT)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_JJR(JJR)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_JJ(JJ)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_VBN(VBN)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_RB(RB)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_NN(NN)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_RBR(RBR)
[tree] ?1 
[ud] ?1 
[fourlang] ?1 

ADJP -> dep_JJR_VBN(JJR, VBN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RBS_VBN(RBS, VBN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJ_VBN(JJ, VBN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RB_RB(RB, RB)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJ_JJS(JJ, JJS)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RB_JJ(RB, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_DOLLAR_CD(DOLLAR, CD)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:compound (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_DOLLAR_JJ(DOLLAR, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_NN_NN(NN, NN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RB_DT(RB, DT)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJ_RB(JJ, RB)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_IN_NN(IN, NN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_CD_NN(CD, NN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:compound (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_CD_NNS(CD, NNS)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:compound (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_NNP_NNP(NNP, NNP)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:amod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJ_JJR(JJ, JJR)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RBR_JJ(RBR, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RB_VBN(RB, VBN)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_CD_JJ(CD, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:compound (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJR_JJ(JJR, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RBS_JJ(RBS, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_VB_JJR(VB, JJR)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RB_VBG(RB, VBG)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJS_JJ(JJS, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:dep (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_NNP_JJ(NNP, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:amod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_RB_JJR(RB, JJR)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:advmod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJ_JJ(JJ, JJ)
[tree] ADJP2(?2, ?1) 
[ud] f_dep(merge_root_dep(merge("(r<root>:amod (d<dep>))", ?1), ?2))
[fourlang] f_dep(merge_root_dep(merge("(r<root> :0 (d<dep>))", ?1), ?2)) 

ADJP -> dep_JJ_CC_RB(JJ, CC, RB)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):advmod(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_VBG_CC_VBG(VBG, CC, VBG)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_NNS_CC_NNS(NNS, CC, NNS)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_JJR_CC_JJR(JJR, CC, JJR)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_DOLLAR_CD_JJ(DOLLAR, CD, JJ)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:compound(d1<dep1>):dep(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_NN_CC_NN(NN, CC, NN)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_CD_CD_NN(CD, CD, NN)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:compound(d1<dep1>):compound(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_JJ_CD_NN(JJ, CD, NN)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:dep(d1<dep1>):compound(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_RB_RBR_JJ(RB, RBR, JJ)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:advmod(d1<dep1>):advmod(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_PUNCT_RB_PUNCT(PUNCT, RB, PUNCT)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:JJR(d1<dep1>):advmod(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_JJ_CC_JJ(JJ, CC, JJ)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_JJ_CC_NNP(JJ, CC, NNP)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_RB_JJR_IN(RB, JJR, IN)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:neg(d1<dep1>):dep(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_VBN_CC_JJ(VBN, CC, JJ)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_JJ_CC_VBG(JJ, CC, VBG)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:cc(d1<dep1>):conj(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

ADJP -> dep_RBS_RB_JJ(RBS, RB, JJ)
[tree] ADJP3(?3, ?2, ?1) 
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root>:advmod(d1<dep1>):advmod(d2<dep2>)))"), r_dep1(?2)), r_dep2(?3))))
[fourlang] f_dep2(f_dep1(merge(merge(merge(?1,"(d2<dep2> :0 (r<root>) :0 (d1<dep1>))"), r_dep1(?2)), r_dep2(?3)))) 

RB -> sure_RB
[tree] RB(sure)
[ud] "(sure<root> / sure)"
[fourlang] "(sure<root> / sure)"

RBR -> more_RBR
[tree] RBR(more)
[ud] "(more<root> / more)"
[fourlang] "(more<root> / more)"

NN -> development_NN
[tree] NN(development)
[ud] "(development<root> / development)"
[fourlang] "(development<root> / development)"

RB -> too_RB
[tree] RB(too)
[ud] "(too<root> / too)"
[fourlang] "(too<root> / too)"

JJ -> slow_JJ
[tree] JJ(slow)
[ud] "(slow<root> / slow)"
[fourlang] "(slow<root> / slow)"

NNP -> Nobel_NNP
[tree] NNP(Nobel)
[ud] "(Nobel<root> / Nobel)"
[fourlang] "(Nobel<root> / Nobel)"

NNS -> English_NNS
[tree] NNS(English)
[ud] "(English<root> / English)"
[fourlang] "(English<root> / English)"

PUNCT -> HYPHENHYPHEN_PUNCT
[tree] PUNCT(HYPHENHYPHEN)
[ud] "(HYPHENHYPHEN<root> / HYPHENHYPHEN)"
[fourlang] "(HYPHENHYPHEN<root> / HYPHENHYPHEN)"

NNP -> Upjohn_NNP
[tree] NNP(Upjohn)
[ud] "(Upjohn<root> / Upjohn)"
[fourlang] "(Upjohn<root> / Upjohn)"

JJ -> mere_JJ
[tree] JJ(mere)
[ud] "(mere<root> / mere)"
[fourlang] "(mere<root> / mere)"

VBN -> diagnosed_VBN
[tree] VBN(diagnosed)
[ud] "(diagnosed<root> / diagnosed)"
[fourlang] "(diagnosed<root> / diagnosed)"

IN -> than_IN
[tree] IN(than)
[ud] "(than<root> / than)"
[fourlang] "(than<root> / than)"

JJ -> rapid_JJ
[tree] JJ(rapid)
[ud] "(rapid<root> / rapid)"
[fourlang] "(rapid<root> / rapid)"

JJ -> cohesive_JJ
[tree] JJ(cohesive)
[ud] "(cohesive<root> / cohesive)"
[fourlang] "(cohesive<root> / cohesive)"

RB -> only_RB
[tree] RB(only)
[ud] "(only<root> / only)"
[fourlang] "(only<root> / only)"

IN -> despite_IN
[tree] IN(despite)
[ud] "(despite<root> / despite)"
[fourlang] "(despite<root> / despite)"

JJ -> similar_JJ
[tree] JJ(similar)
[ud] "(similar<root> / similar)"
[fourlang] "(similar<root> / similar)"

RB -> substantially_RB
[tree] RB(substantially)
[ud] "(substantially<root> / substantially)"
[fourlang] "(substantially<root> / substantially)"

VBN -> made_VBN
[tree] VBN(made)
[ud] "(made<root> / made)"
[fourlang] "(made<root> / made)"

JJ -> ConnPERIODbased_JJ
[tree] JJ(ConnPERIODbased)
[ud] "(ConnPERIODbased<root> / ConnPERIODbased)"
[fourlang] "(ConnPERIODbased<root> / ConnPERIODbased)"

NNP -> Caribbean_NNP
[tree] NNP(Caribbean)
[ud] "(Caribbean<root> / Caribbean)"
[fourlang] "(Caribbean<root> / Caribbean)"

IN -> of_IN
[tree] IN(of)
[ud] "(of<root> / of)"
[fourlang] "(of<root> / of)"

RB -> much_RB
[tree] RB(much)
[ud] "(much<root> / much)"
[fourlang] "(much<root> / much)"

RB -> radically_RB
[tree] RB(radically)
[ud] "(radically<root> / radically)"
[fourlang] "(radically<root> / radically)"

JJ -> compelling_JJ
[tree] JJ(compelling)
[ud] "(compelling<root> / compelling)"
[fourlang] "(compelling<root> / compelling)"

JJ -> equal_JJ
[tree] JJ(equal)
[ud] "(equal<root> / equal)"
[fourlang] "(equal<root> / equal)"

NN -> state_NN
[tree] NN(state)
[ud] "(state<root> / state)"
[fourlang] "(state<root> / state)"

CC -> yet_CC
[tree] CC(yet)
[ud] "(yet<root> / yet)"
[fourlang] "(yet<root> / yet)"

NN -> utility_NN
[tree] NN(utility)
[ud] "(utility<root> / utility)"
[fourlang] "(utility<root> / utility)"

NNS -> employees_NNS
[tree] NNS(employees)
[ud] "(employees<root> / employees)"
[fourlang] "(employees<root> / employees)"

NNP -> Jones_NNP
[tree] NNP(Jones)
[ud] "(Jones<root> / Jones)"
[fourlang] "(Jones<root> / Jones)"

DT -> the_DT
[tree] DT(the)
[ud] "(the<root> / the)"
[fourlang] "(the<root> / the)"

NNP -> Senate_NNP
[tree] NNP(Senate)
[ud] "(Senate<root> / Senate)"
[fourlang] "(Senate<root> / Senate)"

JJ -> JerseyHYPHENbased_JJ
[tree] JJ(JerseyHYPHENbased)
[ud] "(JerseyHYPHENbased<root> / JerseyHYPHENbased)"
[fourlang] "(JerseyHYPHENbased<root> / JerseyHYPHENbased)"

JJS -> most_JJS
[tree] JJS(most)
[ud] "(most<root> / most)"
[fourlang] "(most<root> / most)"

RB -> widely_RB
[tree] RB(widely)
[ud] "(widely<root> / widely)"
[fourlang] "(widely<root> / widely)"

NN -> purchase_NN
[tree] NN(purchase)
[ud] "(purchase<root> / purchase)"
[fourlang] "(purchase<root> / purchase)"

JJ -> last_JJ
[tree] JJ(last)
[ud] "(last<root> / last)"
[fourlang] "(last<root> / last)"

NNS -> emissions_NNS
[tree] NNS(emissions)
[ud] "(emissions<root> / emissions)"
[fourlang] "(emissions<root> / emissions)"

JJR -> worse_JJR
[tree] JJR(worse)
[ud] "(worse<root> / worse)"
[fourlang] "(worse<root> / worse)"

JJ -> DIGITDIGITHYPHENyear_JJ
[tree] JJ(DIGITDIGITHYPHENyear)
[ud] "(DIGITDIGITHYPHENyear<root> / DIGITDIGITHYPHENyear)"
[fourlang] "(DIGITDIGITHYPHENyear<root> / DIGITDIGITHYPHENyear)"

NN -> majority_NN
[tree] NN(majority)
[ud] "(majority<root> / majority)"
[fourlang] "(majority<root> / majority)"

JJ -> East_JJ
[tree] JJ(East)
[ud] "(East<root> / East)"
[fourlang] "(East<root> / East)"

CD -> million_CD
[tree] CD(million)
[ud] "(million<root> / million)"
[fourlang] "(million<root> / million)"

JJ -> favored_JJ
[tree] JJ(favored)
[ud] "(favored<root> / favored)"
[fourlang] "(favored<root> / favored)"

JJ -> third_JJ
[tree] JJ(third)
[ud] "(third<root> / third)"
[fourlang] "(third<root> / third)"

JJ -> popular_JJ
[tree] JJ(popular)
[ud] "(popular<root> / popular)"
[fourlang] "(popular<root> / popular)"

JJ -> meaningful_JJ
[tree] JJ(meaningful)
[ud] "(meaningful<root> / meaningful)"
[fourlang] "(meaningful<root> / meaningful)"

CD -> DIGITBSLPERDIGIT_CD
[tree] CD(DIGITBSLPERDIGIT)
[ud] "(DIGITBSLPERDIGIT<root> / DIGITBSLPERDIGIT)"
[fourlang] "(DIGITBSLPERDIGIT<root> / DIGITBSLPERDIGIT)"

POS -> SQ_POS
[tree] POS(SQ)
[ud] "(SQ<root> / SQ)"
[fourlang] "(SQ<root> / SQ)"

NNS -> standards_NNS
[tree] NNS(standards)
[ud] "(standards<root> / standards)"
[fourlang] "(standards<root> / standards)"

NNP -> Stamford_NNP
[tree] NNP(Stamford)
[ud] "(Stamford<root> / Stamford)"
[fourlang] "(Stamford<root> / Stamford)"

RB -> badly_RB
[tree] RB(badly)
[ud] "(badly<root> / badly)"
[fourlang] "(badly<root> / badly)"

JJ -> such_JJ
[tree] JJ(such)
[ud] "(such<root> / such)"
[fourlang] "(such<root> / such)"

JJ -> crucial_JJ
[tree] JJ(crucial)
[ud] "(crucial<root> / crucial)"
[fourlang] "(crucial<root> / crucial)"

JJ -> tasty_JJ
[tree] JJ(tasty)
[ud] "(tasty<root> / tasty)"
[fourlang] "(tasty<root> / tasty)"

JJ -> successful_JJ
[tree] JJ(successful)
[ud] "(successful<root> / successful)"
[fourlang] "(successful<root> / successful)"

VBN -> operated_VBN
[tree] VBN(operated)
[ud] "(operated<root> / operated)"
[fourlang] "(operated<root> / operated)"

NNP -> South_NNP
[tree] NNP(South)
[ud] "(South<root> / South)"
[fourlang] "(South<root> / South)"

JJ -> legal_JJ
[tree] JJ(legal)
[ud] "(legal<root> / legal)"
[fourlang] "(legal<root> / legal)"

VBG -> increasing_VBG
[tree] VBG(increasing)
[ud] "(increasing<root> / increasing)"
[fourlang] "(increasing<root> / increasing)"

NN -> nomination_NN
[tree] NN(nomination)
[ud] "(nomination<root> / nomination)"
[fourlang] "(nomination<root> / nomination)"

NN -> bill_NN
[tree] NN(bill)
[ud] "(bill<root> / bill)"
[fourlang] "(bill<root> / bill)"

NNP -> ExpressHYPHENBuick_NNP
[tree] NNP(ExpressHYPHENBuick)
[ud] "(ExpressHYPHENBuick<root> / ExpressHYPHENBuick)"
[fourlang] "(ExpressHYPHENBuick<root> / ExpressHYPHENBuick)"

NN -> collegeHYPHENbowl_NN
[tree] NN(collegeHYPHENbowl)
[ud] "(collegeHYPHENbowl<root> / collegeHYPHENbowl)"
[fourlang] "(collegeHYPHENbowl<root> / collegeHYPHENbowl)"

WDT -> which_WDT
[tree] WDT(which)
[ud] "(which<root> / which)"
[fourlang] "(which<root> / which)"

JJ -> satisfactory_JJ
[tree] JJ(satisfactory)
[ud] "(satisfactory<root> / satisfactory)"
[fourlang] "(satisfactory<root> / satisfactory)"

JJS -> least_JJS
[tree] JJS(least)
[ud] "(least<root> / least)"
[fourlang] "(least<root> / least)"

JJR -> better_JJR
[tree] JJR(better)
[ud] "(better<root> / better)"
[fourlang] "(better<root> / better)"

JJ -> particular_JJ
[tree] JJ(particular)
[ud] "(particular<root> / particular)"
[fourlang] "(particular<root> / particular)"

NNS -> consequences_NNS
[tree] NNS(consequences)
[ud] "(consequences<root> / consequences)"
[fourlang] "(consequences<root> / consequences)"

NNP -> American_NNP
[tree] NNP(American)
[ud] "(American<root> / American)"
[fourlang] "(American<root> / American)"

NN -> investment_NN
[tree] NN(investment)
[ud] "(investment<root> / investment)"
[fourlang] "(investment<root> / investment)"

NN -> increase_NN
[tree] NN(increase)
[ud] "(increase<root> / increase)"
[fourlang] "(increase<root> / increase)"

VBN -> regarded_VBN
[tree] VBN(regarded)
[ud] "(regarded<root> / regarded)"
[fourlang] "(regarded<root> / regarded)"

VBN -> reported_VBN
[tree] VBN(reported)
[ud] "(reported<root> / reported)"
[fourlang] "(reported<root> / reported)"

JJR -> younger_JJR
[tree] JJR(younger)
[ud] "(younger<root> / younger)"
[fourlang] "(younger<root> / younger)"

CD -> DIGITDIGITDIGITPERIODDIGITDIGIT_CD
[tree] CD(DIGITDIGITDIGITPERIODDIGITDIGIT)
[ud] "(DIGITDIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITDIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITDIGITPERIODDIGITDIGIT)"

VBN -> dressed_VBN
[tree] VBN(dressed)
[ud] "(dressed<root> / dressed)"
[fourlang] "(dressed<root> / dressed)"

RB -> low_RB
[tree] RB(low)
[ud] "(low<root> / low)"
[fourlang] "(low<root> / low)"

RB -> now_RB
[tree] RB(now)
[ud] "(now<root> / now)"
[fourlang] "(now<root> / now)"

JJS -> largest_JJS
[tree] JJS(largest)
[ud] "(largest<root> / largest)"
[fourlang] "(largest<root> / largest)"

NNP -> Article_NNP
[tree] NNP(Article)
[ud] "(Article<root> / Article)"
[fourlang] "(Article<root> / Article)"

NN -> fairness_NN
[tree] NN(fairness)
[ud] "(fairness<root> / fairness)"
[fourlang] "(fairness<root> / fairness)"

JJ -> difficult_JJ
[tree] JJ(difficult)
[ud] "(difficult<root> / difficult)"
[fourlang] "(difficult<root> / difficult)"

JJ -> sexy_JJ
[tree] JJ(sexy)
[ud] "(sexy<root> / sexy)"
[fourlang] "(sexy<root> / sexy)"

NNP -> World_NNP
[tree] NNP(World)
[ud] "(World<root> / World)"
[fourlang] "(World<root> / World)"

NN -> sector_NN
[tree] NN(sector)
[ud] "(sector<root> / sector)"
[fourlang] "(sector<root> / sector)"

NNP -> Irvine_NNP
[tree] NNP(Irvine)
[ud] "(Irvine<root> / Irvine)"
[fourlang] "(Irvine<root> / Irvine)"

VBN -> planned_VBN
[tree] VBN(planned)
[ud] "(planned<root> / planned)"
[fourlang] "(planned<root> / planned)"

JJ -> wary_JJ
[tree] JJ(wary)
[ud] "(wary<root> / wary)"
[fourlang] "(wary<root> / wary)"

RB -> tight_RB
[tree] RB(tight)
[ud] "(tight<root> / tight)"
[fourlang] "(tight<root> / tight)"

NNP -> Kansas_NNP
[tree] NNP(Kansas)
[ud] "(Kansas<root> / Kansas)"
[fourlang] "(Kansas<root> / Kansas)"

VBN -> specified_VBN
[tree] VBN(specified)
[ud] "(specified<root> / specified)"
[fourlang] "(specified<root> / specified)"

JJ -> solvent_JJ
[tree] JJ(solvent)
[ud] "(solvent<root> / solvent)"
[fourlang] "(solvent<root> / solvent)"

NN -> retailing_NN
[tree] NN(retailing)
[ud] "(retailing<root> / retailing)"
[fourlang] "(retailing<root> / retailing)"

JJ -> other_JJ
[tree] JJ(other)
[ud] "(other<root> / other)"
[fourlang] "(other<root> / other)"

NN -> week_NN
[tree] NN(week)
[ud] "(week<root> / week)"
[fourlang] "(week<root> / week)"

JJR -> cheaper_JJR
[tree] JJR(cheaper)
[ud] "(cheaper<root> / cheaper)"
[fourlang] "(cheaper<root> / cheaper)"

RB -> sometimes_RB
[tree] RB(sometimes)
[ud] "(sometimes<root> / sometimes)"
[fourlang] "(sometimes<root> / sometimes)"

NN -> worth_NN
[tree] NN(worth)
[ud] "(worth<root> / worth)"
[fourlang] "(worth<root> / worth)"

RB -> poorly_RB
[tree] RB(poorly)
[ud] "(poorly<root> / poorly)"
[fourlang] "(poorly<root> / poorly)"

JJ -> hierarchical_JJ
[tree] JJ(hierarchical)
[ud] "(hierarchical<root> / hierarchical)"
[fourlang] "(hierarchical<root> / hierarchical)"

NNP -> Prize_NNP
[tree] NNP(Prize)
[ud] "(Prize<root> / Prize)"
[fourlang] "(Prize<root> / Prize)"

JJ -> fragile_JJ
[tree] JJ(fragile)
[ud] "(fragile<root> / fragile)"
[fourlang] "(fragile<root> / fragile)"

CD -> one_CD
[tree] CD(one)
[ud] "(one<root> / one)"
[fourlang] "(one<root> / one)"

JJ -> available_JJ
[tree] JJ(available)
[ud] "(available<root> / available)"
[fourlang] "(available<root> / available)"

CC -> and_CC
[tree] CC(and)
[ud] "(and<root> / and)"
[fourlang] "(and<root> / and)"

NNP -> German_NNP
[tree] NNP(German)
[ud] "(German<root> / German)"
[fourlang] "(German<root> / German)"

JJ -> enviable_JJ
[tree] JJ(enviable)
[ud] "(enviable<root> / enviable)"
[fourlang] "(enviable<root> / enviable)"

JJ -> mediumHYPHENsized_JJ
[tree] JJ(mediumHYPHENsized)
[ud] "(mediumHYPHENsized<root> / mediumHYPHENsized)"
[fourlang] "(mediumHYPHENsized<root> / mediumHYPHENsized)"

JJ -> lendHYPHENlease_JJ
[tree] JJ(lendHYPHENlease)
[ud] "(lendHYPHENlease<root> / lendHYPHENlease)"
[fourlang] "(lendHYPHENlease<root> / lendHYPHENlease)"

VBN -> Estimated_VBN
[tree] VBN(Estimated)
[ud] "(Estimated<root> / Estimated)"
[fourlang] "(Estimated<root> / Estimated)"

JJ -> outstanding_JJ
[tree] JJ(outstanding)
[ud] "(outstanding<root> / outstanding)"
[fourlang] "(outstanding<root> / outstanding)"

JJ -> empty_JJ
[tree] JJ(empty)
[ud] "(empty<root> / empty)"
[fourlang] "(empty<root> / empty)"

JJ -> common_JJ
[tree] JJ(common)
[ud] "(common<root> / common)"
[fourlang] "(common<root> / common)"

JJ -> uncomfortable_JJ
[tree] JJ(uncomfortable)
[ud] "(uncomfortable<root> / uncomfortable)"
[fourlang] "(uncomfortable<root> / uncomfortable)"

RB -> unusually_RB
[tree] RB(unusually)
[ud] "(unusually<root> / unusually)"
[fourlang] "(unusually<root> / unusually)"

JJ -> fat_JJ
[tree] JJ(fat)
[ud] "(fat<root> / fat)"
[fourlang] "(fat<root> / fat)"

NNP -> Dow_NNP
[tree] NNP(Dow)
[ud] "(Dow<root> / Dow)"
[fourlang] "(Dow<root> / Dow)"

NNS -> skills_NNS
[tree] NNS(skills)
[ud] "(skills<root> / skills)"
[fourlang] "(skills<root> / skills)"

RB -> almost_RB
[tree] RB(almost)
[ud] "(almost<root> / almost)"
[fourlang] "(almost<root> / almost)"

VBN -> placed_VBN
[tree] VBN(placed)
[ud] "(placed<root> / placed)"
[fourlang] "(placed<root> / placed)"

NNP -> Arabian_NNP
[tree] NNP(Arabian)
[ud] "(Arabian<root> / Arabian)"
[fourlang] "(Arabian<root> / Arabian)"

JJ -> sophisticated_JJ
[tree] JJ(sophisticated)
[ud] "(sophisticated<root> / sophisticated)"
[fourlang] "(sophisticated<root> / sophisticated)"

JJ -> Western_JJ
[tree] JJ(Western)
[ud] "(Western<root> / Western)"
[fourlang] "(Western<root> / Western)"

IN -> off_IN
[tree] IN(off)
[ud] "(off<root> / off)"
[fourlang] "(off<root> / off)"

JJ -> peculiar_JJ
[tree] JJ(peculiar)
[ud] "(peculiar<root> / peculiar)"
[fourlang] "(peculiar<root> / peculiar)"

JJ -> unhappy_JJ
[tree] JJ(unhappy)
[ud] "(unhappy<root> / unhappy)"
[fourlang] "(unhappy<root> / unhappy)"

JJ -> improbable_JJ
[tree] JJ(improbable)
[ud] "(improbable<root> / improbable)"
[fourlang] "(improbable<root> / improbable)"

NN -> concern_NN
[tree] NN(concern)
[ud] "(concern<root> / concern)"
[fourlang] "(concern<root> / concern)"

JJ -> DIGITDIGITDIGITHYPHENaHYPHENshare_JJ
[tree] JJ(DIGITDIGITDIGITHYPHENaHYPHENshare)
[ud] "(DIGITDIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITDIGITHYPHENaHYPHENshare)"
[fourlang] "(DIGITDIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITDIGITHYPHENaHYPHENshare)"

NNP -> New_NNP
[tree] NNP(New)
[ud] "(New<root> / New)"
[fourlang] "(New<root> / New)"

NN -> pay_NN
[tree] NN(pay)
[ud] "(pay<root> / pay)"
[fourlang] "(pay<root> / pay)"

JJ -> moneyHYPHENcenter_JJ
[tree] JJ(moneyHYPHENcenter)
[ud] "(moneyHYPHENcenter<root> / moneyHYPHENcenter)"
[fourlang] "(moneyHYPHENcenter<root> / moneyHYPHENcenter)"

NNS -> proponents_NNS
[tree] NNS(proponents)
[ud] "(proponents<root> / proponents)"
[fourlang] "(proponents<root> / proponents)"

NN -> drain_NN
[tree] NN(drain)
[ud] "(drain<root> / drain)"
[fourlang] "(drain<root> / drain)"

CC -> or_CC
[tree] CC(or)
[ud] "(or<root> / or)"
[fourlang] "(or<root> / or)"

RB -> somewhat_RB
[tree] RB(somewhat)
[ud] "(somewhat<root> / somewhat)"
[fourlang] "(somewhat<root> / somewhat)"

IN -> for_IN
[tree] IN(for)
[ud] "(for<root> / for)"
[fourlang] "(for<root> / for)"

DT -> both_DT
[tree] DT(both)
[ud] "(both<root> / both)"
[fourlang] "(both<root> / both)"

CD -> DIGITDIGITDIGITDIGIT_CD
[tree] CD(DIGITDIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"

NN -> administration_NN
[tree] NN(administration)
[ud] "(administration<root> / administration)"
[fourlang] "(administration<root> / administration)"

JJ -> unchanged_JJ
[tree] JJ(unchanged)
[ud] "(unchanged<root> / unchanged)"
[fourlang] "(unchanged<root> / unchanged)"

JJ -> DIGITDIGITHYPHENaHYPHENshare_JJ
[tree] JJ(DIGITDIGITHYPHENaHYPHENshare)
[ud] "(DIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITHYPHENaHYPHENshare)"
[fourlang] "(DIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITHYPHENaHYPHENshare)"

NNS -> qualities_NNS
[tree] NNS(qualities)
[ud] "(qualities<root> / qualities)"
[fourlang] "(qualities<root> / qualities)"

RB -> marvelously_RB
[tree] RB(marvelously)
[ud] "(marvelously<root> / marvelously)"
[fourlang] "(marvelously<root> / marvelously)"

NN -> profit_NN
[tree] NN(profit)
[ud] "(profit<root> / profit)"
[fourlang] "(profit<root> / profit)"

VBN -> overdone_VBN
[tree] VBN(overdone)
[ud] "(overdone<root> / overdone)"
[fourlang] "(overdone<root> / overdone)"

JJ -> punishable_JJ
[tree] JJ(punishable)
[ud] "(punishable<root> / punishable)"
[fourlang] "(punishable<root> / punishable)"

JJ -> global_JJ
[tree] JJ(global)
[ud] "(global<root> / global)"
[fourlang] "(global<root> / global)"

VBN -> been_VBN
[tree] VBN(been)
[ud] "(been<root> / been)"
[fourlang] "(been<root> / been)"

NN -> muster_NN
[tree] NN(muster)
[ud] "(muster<root> / muster)"
[fourlang] "(muster<root> / muster)"

VBG -> falling_VBG
[tree] VBG(falling)
[ud] "(falling<root> / falling)"
[fourlang] "(falling<root> / falling)"

JJ -> blueHYPHENcollar_JJ
[tree] JJ(blueHYPHENcollar)
[ud] "(blueHYPHENcollar<root> / blueHYPHENcollar)"
[fourlang] "(blueHYPHENcollar<root> / blueHYPHENcollar)"

NN -> debate_NN
[tree] NN(debate)
[ud] "(debate<root> / debate)"
[fourlang] "(debate<root> / debate)"

JJ -> strong_JJ
[tree] JJ(strong)
[ud] "(strong<root> / strong)"
[fourlang] "(strong<root> / strong)"

IN -> up_IN
[tree] IN(up)
[ud] "(up<root> / up)"
[fourlang] "(up<root> / up)"

JJ -> complex_JJ
[tree] JJ(complex)
[ud] "(complex<root> / complex)"
[fourlang] "(complex<root> / complex)"

JJ -> mushy_JJ
[tree] JJ(mushy)
[ud] "(mushy<root> / mushy)"
[fourlang] "(mushy<root> / mushy)"

VB -> pass_VB
[tree] VB(pass)
[ud] "(pass<root> / pass)"
[fourlang] "(pass<root> / pass)"

JJ -> presidential_JJ
[tree] JJ(presidential)
[ud] "(presidential<root> / presidential)"
[fourlang] "(presidential<root> / presidential)"

RB -> highly_RB
[tree] RB(highly)
[ud] "(highly<root> / highly)"
[fourlang] "(highly<root> / highly)"

JJ -> fast_JJ
[tree] JJ(fast)
[ud] "(fast<root> / fast)"
[fourlang] "(fast<root> / fast)"

NN -> something_NN
[tree] NN(something)
[ud] "(something<root> / something)"
[fourlang] "(something<root> / something)"

JJ -> Crude_JJ
[tree] JJ(Crude)
[ud] "(Crude<root> / Crude)"
[fourlang] "(Crude<root> / Crude)"

JJ -> modest_JJ
[tree] JJ(modest)
[ud] "(modest<root> / modest)"
[fourlang] "(modest<root> / modest)"

JJR -> steeper_JJR
[tree] JJR(steeper)
[ud] "(steeper<root> / steeper)"
[fourlang] "(steeper<root> / steeper)"

JJ -> important_JJ
[tree] JJ(important)
[ud] "(important<root> / important)"
[fourlang] "(important<root> / important)"

VBZ -> considers_VBZ
[tree] VBZ(considers)
[ud] "(considers<root> / considers)"
[fourlang] "(considers<root> / considers)"

JJ -> nonHYPHENreligious_JJ
[tree] JJ(nonHYPHENreligious)
[ud] "(nonHYPHENreligious<root> / nonHYPHENreligious)"
[fourlang] "(nonHYPHENreligious<root> / nonHYPHENreligious)"

JJ -> visible_JJ
[tree] JJ(visible)
[ud] "(visible<root> / visible)"
[fourlang] "(visible<root> / visible)"

JJ -> whimsical_JJ
[tree] JJ(whimsical)
[ud] "(whimsical<root> / whimsical)"
[fourlang] "(whimsical<root> / whimsical)"

RB -> still_RB
[tree] RB(still)
[ud] "(still<root> / still)"
[fourlang] "(still<root> / still)"

NNS -> months_NNS
[tree] NNS(months)
[ud] "(months<root> / months)"
[fourlang] "(months<root> / months)"

JJ -> centsHYPHENaHYPHENunit_JJ
[tree] JJ(centsHYPHENaHYPHENunit)
[ud] "(centsHYPHENaHYPHENunit<root> / centsHYPHENaHYPHENunit)"
[fourlang] "(centsHYPHENaHYPHENunit<root> / centsHYPHENaHYPHENunit)"

JJ -> short_JJ
[tree] JJ(short)
[ud] "(short<root> / short)"
[fourlang] "(short<root> / short)"

VBD -> did_VBD
[tree] VBD(did)
[ud] "(did<root> / did)"
[fourlang] "(did<root> / did)"

VBN -> parched_VBN
[tree] VBN(parched)
[ud] "(parched<root> / parched)"
[fourlang] "(parched<root> / parched)"

NNS -> markets_NNS
[tree] NNS(markets)
[ud] "(markets<root> / markets)"
[fourlang] "(markets<root> / markets)"

JJ -> widespread_JJ
[tree] JJ(widespread)
[ud] "(widespread<root> / widespread)"
[fourlang] "(widespread<root> / widespread)"

PUNCT -> SQSQ_PUNCT
[tree] PUNCT(SQSQ)
[ud] "(SQSQ<root> / SQSQ)"
[fourlang] "(SQSQ<root> / SQSQ)"

MD -> will_MD
[tree] MD(will)
[ud] "(will<root> / will)"
[fourlang] "(will<root> / will)"

JJ -> necessary_JJ
[tree] JJ(necessary)
[ud] "(necessary<root> / necessary)"
[fourlang] "(necessary<root> / necessary)"

IN -> from_IN
[tree] IN(from)
[ud] "(from<root> / from)"
[fourlang] "(from<root> / from)"

JJ -> Asian_JJ
[tree] JJ(Asian)
[ud] "(Asian<root> / Asian)"
[fourlang] "(Asian<root> / Asian)"

RBR -> less_RBR
[tree] RBR(less)
[ud] "(less<root> / less)"
[fourlang] "(less<root> / less)"

NNS -> services_NNS
[tree] NNS(services)
[ud] "(services<root> / services)"
[fourlang] "(services<root> / services)"

VB -> attend_VB
[tree] VB(attend)
[ud] "(attend<root> / attend)"
[fourlang] "(attend<root> / attend)"

JJ -> low_JJ
[tree] JJ(low)
[ud] "(low<root> / low)"
[fourlang] "(low<root> / low)"

NNP -> Pacific_NNP
[tree] NNP(Pacific)
[ud] "(Pacific<root> / Pacific)"
[fourlang] "(Pacific<root> / Pacific)"

JJ -> marketHYPHENoriented_JJ
[tree] JJ(marketHYPHENoriented)
[ud] "(marketHYPHENoriented<root> / marketHYPHENoriented)"
[fourlang] "(marketHYPHENoriented<root> / marketHYPHENoriented)"

NN -> heavyHYPHENtruck_NN
[tree] NN(heavyHYPHENtruck)
[ud] "(heavyHYPHENtruck<root> / heavyHYPHENtruck)"
[fourlang] "(heavyHYPHENtruck<root> / heavyHYPHENtruck)"

RB -> perfectly_RB
[tree] RB(perfectly)
[ud] "(perfectly<root> / perfectly)"
[fourlang] "(perfectly<root> / perfectly)"

JJR -> savvier_JJR
[tree] JJR(savvier)
[ud] "(savvier<root> / savvier)"
[fourlang] "(savvier<root> / savvier)"

RB -> well_RB
[tree] RB(well)
[ud] "(well<root> / well)"
[fourlang] "(well<root> / well)"

JJ -> exercisable_JJ
[tree] JJ(exercisable)
[ud] "(exercisable<root> / exercisable)"
[fourlang] "(exercisable<root> / exercisable)"

JJ -> public_JJ
[tree] JJ(public)
[ud] "(public<root> / public)"
[fourlang] "(public<root> / public)"

NN -> passengerHYPHENcar_NN
[tree] NN(passengerHYPHENcar)
[ud] "(passengerHYPHENcar<root> / passengerHYPHENcar)"
[fourlang] "(passengerHYPHENcar<root> / passengerHYPHENcar)"

JJ -> recent_JJ
[tree] JJ(recent)
[ud] "(recent<root> / recent)"
[fourlang] "(recent<root> / recent)"

JJ -> German_JJ
[tree] JJ(German)
[ud] "(German<root> / German)"
[fourlang] "(German<root> / German)"

VBP -> lead_VBP
[tree] VBP(lead)
[ud] "(lead<root> / lead)"
[fourlang] "(lead<root> / lead)"

JJ -> local_JJ
[tree] JJ(local)
[ud] "(local<root> / local)"
[fourlang] "(local<root> / local)"

JJ -> massive_JJ
[tree] JJ(massive)
[ud] "(massive<root> / massive)"
[fourlang] "(massive<root> / massive)"

NNP -> UPERIODSPERIOD_NNP
[tree] NNP(UPERIODSPERIOD)
[ud] "(UPERIODSPERIOD<root> / UPERIODSPERIOD)"
[fourlang] "(UPERIODSPERIOD<root> / UPERIODSPERIOD)"

JJ -> sportsHYPHENoriented_JJ
[tree] JJ(sportsHYPHENoriented)
[ud] "(sportsHYPHENoriented<root> / sportsHYPHENoriented)"
[fourlang] "(sportsHYPHENoriented<root> / sportsHYPHENoriented)"

JJ -> actual_JJ
[tree] JJ(actual)
[ud] "(actual<root> / actual)"
[fourlang] "(actual<root> / actual)"

NN -> president_NN
[tree] NN(president)
[ud] "(president<root> / president)"
[fourlang] "(president<root> / president)"

JJ -> ethical_JJ
[tree] JJ(ethical)
[ud] "(ethical<root> / ethical)"
[fourlang] "(ethical<root> / ethical)"

JJ -> progressive_JJ
[tree] JJ(progressive)
[ud] "(progressive<root> / progressive)"
[fourlang] "(progressive<root> / progressive)"

JJ -> millionHYPHENaHYPHENyear_JJ
[tree] JJ(millionHYPHENaHYPHENyear)
[ud] "(millionHYPHENaHYPHENyear<root> / millionHYPHENaHYPHENyear)"
[fourlang] "(millionHYPHENaHYPHENyear<root> / millionHYPHENaHYPHENyear)"

JJ -> prestigious_JJ
[tree] JJ(prestigious)
[ud] "(prestigious<root> / prestigious)"
[fourlang] "(prestigious<root> / prestigious)"

JJ -> late_JJ
[tree] JJ(late)
[ud] "(late<root> / late)"
[fourlang] "(late<root> / late)"

NN -> offer_NN
[tree] NN(offer)
[ud] "(offer<root> / offer)"
[fourlang] "(offer<root> / offer)"

NNP -> Hamilton_NNP
[tree] NNP(Hamilton)
[ud] "(Hamilton<root> / Hamilton)"
[fourlang] "(Hamilton<root> / Hamilton)"

JJ -> LondonHYPHENbased_JJ
[tree] JJ(LondonHYPHENbased)
[ud] "(LondonHYPHENbased<root> / LondonHYPHENbased)"
[fourlang] "(LondonHYPHENbased<root> / LondonHYPHENbased)"

JJ -> DIGITDIGITDIGITHYPHENseat_JJ
[tree] JJ(DIGITDIGITDIGITHYPHENseat)
[ud] "(DIGITDIGITDIGITHYPHENseat<root> / DIGITDIGITDIGITHYPHENseat)"
[fourlang] "(DIGITDIGITDIGITHYPHENseat<root> / DIGITDIGITDIGITHYPHENseat)"

JJ -> sharp_JJ
[tree] JJ(sharp)
[ud] "(sharp<root> / sharp)"
[fourlang] "(sharp<root> / sharp)"

IN -> into_IN
[tree] IN(into)
[ud] "(into<root> / into)"
[fourlang] "(into<root> / into)"

JJ -> hot_JJ
[tree] JJ(hot)
[ud] "(hot<root> / hot)"
[fourlang] "(hot<root> / hot)"

JJ -> few_JJ
[tree] JJ(few)
[ud] "(few<root> / few)"
[fourlang] "(few<root> / few)"

NN -> plan_NN
[tree] NN(plan)
[ud] "(plan<root> / plan)"
[fourlang] "(plan<root> / plan)"

VBG -> starting_VBG
[tree] VBG(starting)
[ud] "(starting<root> / starting)"
[fourlang] "(starting<root> / starting)"

JJ -> influential_JJ
[tree] JJ(influential)
[ud] "(influential<root> / influential)"
[fourlang] "(influential<root> / influential)"

NN -> yield_NN
[tree] NN(yield)
[ud] "(yield<root> / yield)"
[fourlang] "(yield<root> / yield)"

DT -> a_DT
[tree] DT(a)
[ud] "(a<root> / a)"
[fourlang] "(a<root> / a)"

JJ -> ambitious_JJ
[tree] JJ(ambitious)
[ud] "(ambitious<root> / ambitious)"
[fourlang] "(ambitious<root> / ambitious)"

CD -> DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT_CD
[tree] CD(DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT)"

VBN -> traded_VBN
[tree] VBN(traded)
[ud] "(traded<root> / traded)"
[fourlang] "(traded<root> / traded)"

NN -> trading_NN
[tree] NN(trading)
[ud] "(trading<root> / trading)"
[fourlang] "(trading<root> / trading)"

NN -> case_NN
[tree] NN(case)
[ud] "(case<root> / case)"
[fourlang] "(case<root> / case)"

JJR -> less_JJR
[tree] JJR(less)
[ud] "(less<root> / less)"
[fourlang] "(less<root> / less)"

NNS -> entrants_NNS
[tree] NNS(entrants)
[ud] "(entrants<root> / entrants)"
[fourlang] "(entrants<root> / entrants)"

JJ -> financial_JJ
[tree] JJ(financial)
[ud] "(financial<root> / financial)"
[fourlang] "(financial<root> / financial)"

VB -> vote_VB
[tree] VB(vote)
[ud] "(vote<root> / vote)"
[fourlang] "(vote<root> / vote)"

NNP -> Fujitsu_NNP
[tree] NNP(Fujitsu)
[ud] "(Fujitsu<root> / Fujitsu)"
[fourlang] "(Fujitsu<root> / Fujitsu)"

NN -> rain_NN
[tree] NN(rain)
[ud] "(rain<root> / rain)"
[fourlang] "(rain<root> / rain)"

NNS -> issues_NNS
[tree] NNS(issues)
[ud] "(issues<root> / issues)"
[fourlang] "(issues<root> / issues)"

JJ -> individual_JJ
[tree] JJ(individual)
[ud] "(individual<root> / individual)"
[fourlang] "(individual<root> / individual)"

RB -> particularly_RB
[tree] RB(particularly)
[ud] "(particularly<root> / particularly)"
[fourlang] "(particularly<root> / particularly)"

RBS -> most_RBS
[tree] RBS(most)
[ud] "(most<root> / most)"
[fourlang] "(most<root> / most)"

NN -> link_NN
[tree] NN(link)
[ud] "(link<root> / link)"
[fourlang] "(link<root> / link)"

JJ -> suspect_JJ
[tree] JJ(suspect)
[ud] "(suspect<root> / suspect)"
[fourlang] "(suspect<root> / suspect)"

NNS -> votes_NNS
[tree] NNS(votes)
[ud] "(votes<root> / votes)"
[fourlang] "(votes<root> / votes)"

NN -> plight_NN
[tree] NN(plight)
[ud] "(plight<root> / plight)"
[fourlang] "(plight<root> / plight)"

IN -> in_IN
[tree] IN(in)
[ud] "(in<root> / in)"
[fourlang] "(in<root> / in)"

NN -> murder_NN
[tree] NN(murder)
[ud] "(murder<root> / murder)"
[fourlang] "(murder<root> / murder)"

NNS -> sales_NNS
[tree] NNS(sales)
[ud] "(sales<root> / sales)"
[fourlang] "(sales<root> / sales)"

RB -> no_RB
[tree] RB(no)
[ud] "(no<root> / no)"
[fourlang] "(no<root> / no)"

RB -> spectacularly_RB
[tree] RB(spectacularly)
[ud] "(spectacularly<root> / spectacularly)"
[fourlang] "(spectacularly<root> / spectacularly)"

NNP -> Saudi_NNP
[tree] NNP(Saudi)
[ud] "(Saudi<root> / Saudi)"
[fourlang] "(Saudi<root> / Saudi)"

JJ -> highHYPHENflying_JJ
[tree] JJ(highHYPHENflying)
[ud] "(highHYPHENflying<root> / highHYPHENflying)"
[fourlang] "(highHYPHENflying<root> / highHYPHENflying)"

NNS -> industrials_NNS
[tree] NNS(industrials)
[ud] "(industrials<root> / industrials)"
[fourlang] "(industrials<root> / industrials)"

NNS -> duties_NNS
[tree] NNS(duties)
[ud] "(duties<root> / duties)"
[fourlang] "(duties<root> / duties)"

VBN -> focused_VBN
[tree] VBN(focused)
[ud] "(focused<root> / focused)"
[fourlang] "(focused<root> / focused)"

RP -> up_RP
[tree] RP(up)
[ud] "(up<root> / up)"
[fourlang] "(up<root> / up)"

JJ -> pressured_JJ
[tree] JJ(pressured)
[ud] "(pressured<root> / pressured)"
[fourlang] "(pressured<root> / pressured)"

JJ -> stunned_JJ
[tree] JJ(stunned)
[ud] "(stunned<root> / stunned)"
[fourlang] "(stunned<root> / stunned)"

IN -> around_IN
[tree] IN(around)
[ud] "(around<root> / around)"
[fourlang] "(around<root> / around)"

WP -> who_WP
[tree] WP(who)
[ud] "(who<root> / who)"
[fourlang] "(who<root> / who)"

NN -> job_NN
[tree] NN(job)
[ud] "(job<root> / job)"
[fourlang] "(job<root> / job)"

VBD -> understood_VBD
[tree] VBD(understood)
[ud] "(understood<root> / understood)"
[fourlang] "(understood<root> / understood)"

JJ -> split_JJ
[tree] JJ(split)
[ud] "(split<root> / split)"
[fourlang] "(split<root> / split)"

RB -> once_RB
[tree] RB(once)
[ud] "(once<root> / once)"
[fourlang] "(once<root> / once)"

NNP -> Constitution_NNP
[tree] NNP(Constitution)
[ud] "(Constitution<root> / Constitution)"
[fourlang] "(Constitution<root> / Constitution)"

JJ -> ill_JJ
[tree] JJ(ill)
[ud] "(ill<root> / ill)"
[fourlang] "(ill<root> / ill)"

JJ -> foreign_JJ
[tree] JJ(foreign)
[ud] "(foreign<root> / foreign)"
[fourlang] "(foreign<root> / foreign)"

VB -> bring_VB
[tree] VB(bring)
[ud] "(bring<root> / bring)"
[fourlang] "(bring<root> / bring)"

NNS -> areas_NNS
[tree] NNS(areas)
[ud] "(areas<root> / areas)"
[fourlang] "(areas<root> / areas)"

JJ -> confrontational_JJ
[tree] JJ(confrontational)
[ud] "(confrontational<root> / confrontational)"
[fourlang] "(confrontational<root> / confrontational)"

RB -> about_RB
[tree] RB(about)
[ud] "(about<root> / about)"
[fourlang] "(about<root> / about)"

RB -> hydraulically_RB
[tree] RB(hydraulically)
[ud] "(hydraulically<root> / hydraulically)"
[fourlang] "(hydraulically<root> / hydraulically)"

VBN -> funded_VBN
[tree] VBN(funded)
[ud] "(funded<root> / funded)"
[fourlang] "(funded<root> / funded)"

JJ -> solid_JJ
[tree] JJ(solid)
[ud] "(solid<root> / solid)"
[fourlang] "(solid<root> / solid)"

VBG -> growing_VBG
[tree] VBG(growing)
[ud] "(growing<root> / growing)"
[fourlang] "(growing<root> / growing)"

JJ -> quick_JJ
[tree] JJ(quick)
[ud] "(quick<root> / quick)"
[fourlang] "(quick<root> / quick)"

IN -> by_IN
[tree] IN(by)
[ud] "(by<root> / by)"
[fourlang] "(by<root> / by)"

JJ -> operational_JJ
[tree] JJ(operational)
[ud] "(operational<root> / operational)"
[fourlang] "(operational<root> / operational)"

JJ -> sure_JJ
[tree] JJ(sure)
[ud] "(sure<root> / sure)"
[fourlang] "(sure<root> / sure)"

NNP -> Cray_NNP
[tree] NNP(Cray)
[ud] "(Cray<root> / Cray)"
[fourlang] "(Cray<root> / Cray)"

NN -> policy_NN
[tree] NN(policy)
[ud] "(policy<root> / policy)"
[fourlang] "(policy<root> / policy)"

NN -> refund_NN
[tree] NN(refund)
[ud] "(refund<root> / refund)"
[fourlang] "(refund<root> / refund)"

VB -> execute_VB
[tree] VB(execute)
[ud] "(execute<root> / execute)"
[fourlang] "(execute<root> / execute)"

TO -> to_TO
[tree] TO(to)
[ud] "(to<root> / to)"
[fourlang] "(to<root> / to)"

JJ -> supercilious_JJ
[tree] JJ(supercilious)
[ud] "(supercilious<root> / supercilious)"
[fourlang] "(supercilious<root> / supercilious)"

JJ -> kind_JJ
[tree] JJ(kind)
[ud] "(kind<root> / kind)"
[fourlang] "(kind<root> / kind)"

JJ -> used_JJ
[tree] JJ(used)
[ud] "(used<root> / used)"
[fourlang] "(used<root> / used)"

RB -> financially_RB
[tree] RB(financially)
[ud] "(financially<root> / financially)"
[fourlang] "(financially<root> / financially)"

JJ -> able_JJ
[tree] JJ(able)
[ud] "(able<root> / able)"
[fourlang] "(able<root> / able)"

JJ -> cocky_JJ
[tree] JJ(cocky)
[ud] "(cocky<root> / cocky)"
[fourlang] "(cocky<root> / cocky)"

JJ -> BermudaHYPHENbased_JJ
[tree] JJ(BermudaHYPHENbased)
[ud] "(BermudaHYPHENbased<root> / BermudaHYPHENbased)"
[fourlang] "(BermudaHYPHENbased<root> / BermudaHYPHENbased)"

NNS -> earnings_NNS
[tree] NNS(earnings)
[ud] "(earnings<root> / earnings)"
[fourlang] "(earnings<root> / earnings)"

NNS -> units_NNS
[tree] NNS(units)
[ud] "(units<root> / units)"
[fourlang] "(units<root> / units)"

NN -> nature_NN
[tree] NN(nature)
[ud] "(nature<root> / nature)"
[fourlang] "(nature<root> / nature)"

JJ -> interested_JJ
[tree] JJ(interested)
[ud] "(interested<root> / interested)"
[fourlang] "(interested<root> / interested)"

NN -> reading_NN
[tree] NN(reading)
[ud] "(reading<root> / reading)"
[fourlang] "(reading<root> / reading)"

VBN -> documented_VBN
[tree] VBN(documented)
[ud] "(documented<root> / documented)"
[fourlang] "(documented<root> / documented)"

JJ -> devastating_JJ
[tree] JJ(devastating)
[ud] "(devastating<root> / devastating)"
[fourlang] "(devastating<root> / devastating)"

RB -> equally_RB
[tree] RB(equally)
[ud] "(equally<root> / equally)"
[fourlang] "(equally<root> / equally)"

JJ -> governmentHYPHENfunded_JJ
[tree] JJ(governmentHYPHENfunded)
[ud] "(governmentHYPHENfunded<root> / governmentHYPHENfunded)"
[fourlang] "(governmentHYPHENfunded<root> / governmentHYPHENfunded)"

NNS -> counterparts_NNS
[tree] NNS(counterparts)
[ud] "(counterparts<root> / counterparts)"
[fourlang] "(counterparts<root> / counterparts)"

JJ -> full_JJ
[tree] JJ(full)
[ud] "(full<root> / full)"
[fourlang] "(full<root> / full)"

VB -> even_VB
[tree] VB(even)
[ud] "(even<root> / even)"
[fourlang] "(even<root> / even)"

NNP -> Frankfurt_NNP
[tree] NNP(Frankfurt)
[ud] "(Frankfurt<root> / Frankfurt)"
[fourlang] "(Frankfurt<root> / Frankfurt)"

RB -> increasingly_RB
[tree] RB(increasingly)
[ud] "(increasingly<root> / increasingly)"
[fourlang] "(increasingly<root> / increasingly)"

JJ -> GermanyHYPHENbased_JJ
[tree] JJ(GermanyHYPHENbased)
[ud] "(GermanyHYPHENbased<root> / GermanyHYPHENbased)"
[fourlang] "(GermanyHYPHENbased<root> / GermanyHYPHENbased)"

VB -> pay_VB
[tree] VB(pay)
[ud] "(pay<root> / pay)"
[fourlang] "(pay<root> / pay)"

NN -> agenda_NN
[tree] NN(agenda)
[ud] "(agenda<root> / agenda)"
[fourlang] "(agenda<root> / agenda)"

PRP -> they_PRP
[tree] PRP(they)
[ud] "(they<root> / they)"
[fourlang] "(they<root> / they)"

RB -> closely_RB
[tree] RB(closely)
[ud] "(closely<root> / closely)"
[fourlang] "(closely<root> / closely)"

NN -> return_NN
[tree] NN(return)
[ud] "(return<root> / return)"
[fourlang] "(return<root> / return)"

NNP -> Islamabad_NNP
[tree] NNP(Islamabad)
[ud] "(Islamabad<root> / Islamabad)"
[fourlang] "(Islamabad<root> / Islamabad)"

VB -> permit_VB
[tree] VB(permit)
[ud] "(permit<root> / permit)"
[fourlang] "(permit<root> / permit)"

RB -> inherently_RB
[tree] RB(inherently)
[ud] "(inherently<root> / inherently)"
[fourlang] "(inherently<root> / inherently)"

JJ -> ample_JJ
[tree] JJ(ample)
[ud] "(ample<root> / ample)"
[fourlang] "(ample<root> / ample)"


JJ -> fair_JJ
[tree] JJ(fair)
[ud] "(fair<root> / fair)"
[fourlang] "(fair<root> / fair)"

NNP -> House_NNP
[tree] NNP(House)
[ud] "(House<root> / House)"
[fourlang] "(House<root> / House)"

JJ -> willing_JJ
[tree] JJ(willing)
[ud] "(willing<root> / willing)"
[fourlang] "(willing<root> / willing)"

NN -> survival_NN
[tree] NN(survival)
[ud] "(survival<root> / survival)"
[fourlang] "(survival<root> / survival)"

JJ -> current_JJ
[tree] JJ(current)
[ud] "(current<root> / current)"
[fourlang] "(current<root> / current)"

RB -> newly_RB
[tree] RB(newly)
[ud] "(newly<root> / newly)"
[fourlang] "(newly<root> / newly)"

JJ -> domestic_JJ
[tree] JJ(domestic)
[ud] "(domestic<root> / domestic)"
[fourlang] "(domestic<root> / domestic)"

JJ -> inverted_JJ
[tree] JJ(inverted)
[ud] "(inverted<root> / inverted)"
[fourlang] "(inverted<root> / inverted)"

JJ -> small_JJ
[tree] JJ(small)
[ud] "(small<root> / small)"
[fourlang] "(small<root> / small)"

JJ -> Anglian_JJ
[tree] JJ(Anglian)
[ud] "(Anglian<root> / Anglian)"
[fourlang] "(Anglian<root> / Anglian)"

RB -> otherwise_RB
[tree] RB(otherwise)
[ud] "(otherwise<root> / otherwise)"
[fourlang] "(otherwise<root> / otherwise)"

JJ -> energetic_JJ
[tree] JJ(energetic)
[ud] "(energetic<root> / energetic)"
[fourlang] "(energetic<root> / energetic)"

JJ -> maleHYPHENdominated_JJ
[tree] JJ(maleHYPHENdominated)
[ud] "(maleHYPHENdominated<root> / maleHYPHENdominated)"
[fourlang] "(maleHYPHENdominated<root> / maleHYPHENdominated)"

NNS -> years_NNS
[tree] NNS(years)
[ud] "(years<root> / years)"
[fourlang] "(years<root> / years)"

NNS -> allies_NNS
[tree] NNS(allies)
[ud] "(allies<root> / allies)"
[fourlang] "(allies<root> / allies)"

NN -> assembly_NN
[tree] NN(assembly)
[ud] "(assembly<root> / assembly)"
[fourlang] "(assembly<root> / assembly)"

RB -> roughly_RB
[tree] RB(roughly)
[ud] "(roughly<root> / roughly)"
[fourlang] "(roughly<root> / roughly)"

NNP -> Austin_NNP
[tree] NNP(Austin)
[ud] "(Austin<root> / Austin)"
[fourlang] "(Austin<root> / Austin)"

NNS -> critics_NNS
[tree] NNS(critics)
[ud] "(critics<root> / critics)"
[fourlang] "(critics<root> / critics)"

RB -> previously_RB
[tree] RB(previously)
[ud] "(previously<root> / previously)"
[fourlang] "(previously<root> / previously)"

NN -> value_NN
[tree] NN(value)
[ud] "(value<root> / value)"
[fourlang] "(value<root> / value)"

JJ -> familiar_JJ
[tree] JJ(familiar)
[ud] "(familiar<root> / familiar)"
[fourlang] "(familiar<root> / familiar)"

JJ -> intriguing_JJ
[tree] JJ(intriguing)
[ud] "(intriguing<root> / intriguing)"
[fourlang] "(intriguing<root> / intriguing)"

RB -> virtually_RB
[tree] RB(virtually)
[ud] "(virtually<root> / virtually)"
[fourlang] "(virtually<root> / virtually)"

JJ -> unfathomable_JJ
[tree] JJ(unfathomable)
[ud] "(unfathomable<root> / unfathomable)"
[fourlang] "(unfathomable<root> / unfathomable)"

JJR -> higher_JJR
[tree] JJR(higher)
[ud] "(higher<root> / higher)"
[fourlang] "(higher<root> / higher)"

NN -> trade_NN
[tree] NN(trade)
[ud] "(trade<root> / trade)"
[fourlang] "(trade<root> / trade)"

VBN -> oriented_VBN
[tree] VBN(oriented)
[ud] "(oriented<root> / oriented)"
[fourlang] "(oriented<root> / oriented)"

CD -> DIGITCOMMADIGITDIGITDIGIT_CD
[tree] CD(DIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITCOMMADIGITDIGITDIGIT<root> / DIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITCOMMADIGITDIGITDIGIT<root> / DIGITCOMMADIGITDIGITDIGIT)"

NNS -> outsiders_NNS
[tree] NNS(outsiders)
[ud] "(outsiders<root> / outsiders)"
[fourlang] "(outsiders<root> / outsiders)"

JJ -> healthy_JJ
[tree] JJ(healthy)
[ud] "(healthy<root> / healthy)"
[fourlang] "(healthy<root> / healthy)"

NNP -> Fairlawn_NNP
[tree] NNP(Fairlawn)
[ud] "(Fairlawn<root> / Fairlawn)"
[fourlang] "(Fairlawn<root> / Fairlawn)"

CD -> DIGITPERIODDIGIT_CD
[tree] CD(DIGITPERIODDIGIT)
[ud] "(DIGITPERIODDIGIT<root> / DIGITPERIODDIGIT)"
[fourlang] "(DIGITPERIODDIGIT<root> / DIGITPERIODDIGIT)"

RB -> long_RB
[tree] RB(long)
[ud] "(long<root> / long)"
[fourlang] "(long<root> / long)"

CD -> four_CD
[tree] CD(four)
[ud] "(four<root> / four)"
[fourlang] "(four<root> / four)"

JJ -> childish_JJ
[tree] JJ(childish)
[ud] "(childish<root> / childish)"
[fourlang] "(childish<root> / childish)"

NNS -> visits_NNS
[tree] NNS(visits)
[ud] "(visits<root> / visits)"
[fourlang] "(visits<root> / visits)"

CD -> billion_CD
[tree] CD(billion)
[ud] "(billion<root> / billion)"
[fourlang] "(billion<root> / billion)"

RB -> so_RB
[tree] RB(so)
[ud] "(so<root> / so)"
[fourlang] "(so<root> / so)"

RB -> exceptionally_RB
[tree] RB(exceptionally)
[ud] "(exceptionally<root> / exceptionally)"
[fourlang] "(exceptionally<root> / exceptionally)"

JJ -> vague_JJ
[tree] JJ(vague)
[ud] "(vague<root> / vague)"
[fourlang] "(vague<root> / vague)"

JJ -> mouthHYPHENup_JJ
[tree] JJ(mouthHYPHENup)
[ud] "(mouthHYPHENup<root> / mouthHYPHENup)"
[fourlang] "(mouthHYPHENup<root> / mouthHYPHENup)"

JJ -> yielding_JJ
[tree] JJ(yielding)
[ud] "(yielding<root> / yielding)"
[fourlang] "(yielding<root> / yielding)"

CC -> but_CC
[tree] CC(but)
[ud] "(but<root> / but)"
[fourlang] "(but<root> / but)"

NN -> program_NN
[tree] NN(program)
[ud] "(program<root> / program)"
[fourlang] "(program<root> / program)"

VBN -> strapped_VBN
[tree] VBN(strapped)
[ud] "(strapped<root> / strapped)"
[fourlang] "(strapped<root> / strapped)"

VBN -> issued_VBN
[tree] VBN(issued)
[ud] "(issued<root> / issued)"
[fourlang] "(issued<root> / issued)"

JJ -> substantial_JJ
[tree] JJ(substantial)
[ud] "(substantial<root> / substantial)"
[fourlang] "(substantial<root> / substantial)"

NN -> problem_NN
[tree] NN(problem)
[ud] "(problem<root> / problem)"
[fourlang] "(problem<root> / problem)"

NNP -> East_NNP
[tree] NNP(East)
[ud] "(East<root> / East)"
[fourlang] "(East<root> / East)"

NNP -> NovPERIOD_NNP
[tree] NNP(NovPERIOD)
[ud] "(NovPERIOD<root> / NovPERIOD)"
[fourlang] "(NovPERIOD<root> / NovPERIOD)"

RB -> damn_RB
[tree] RB(damn)
[ud] "(damn<root> / damn)"
[fourlang] "(damn<root> / damn)"

JJ -> intelligent_JJ
[tree] JJ(intelligent)
[ud] "(intelligent<root> / intelligent)"
[fourlang] "(intelligent<root> / intelligent)"

JJ -> many_JJ
[tree] JJ(many)
[ud] "(many<root> / many)"
[fourlang] "(many<root> / many)"

NN -> surgery_NN
[tree] NN(surgery)
[ud] "(surgery<root> / surgery)"
[fourlang] "(surgery<root> / surgery)"

JJ -> regulatory_JJ
[tree] JJ(regulatory)
[ud] "(regulatory<root> / regulatory)"
[fourlang] "(regulatory<root> / regulatory)"

JJ -> certain_JJ
[tree] JJ(certain)
[ud] "(certain<root> / certain)"
[fourlang] "(certain<root> / certain)"

JJ -> basic_JJ
[tree] JJ(basic)
[ud] "(basic<root> / basic)"
[fourlang] "(basic<root> / basic)"

NNP -> War_NNP
[tree] NNP(War)
[ud] "(War<root> / War)"
[fourlang] "(War<root> / War)"

JJ -> MoPERIODHYPHENbased_JJ
[tree] JJ(MoPERIODHYPHENbased)
[ud] "(MoPERIODHYPHENbased<root> / MoPERIODHYPHENbased)"
[fourlang] "(MoPERIODHYPHENbased<root> / MoPERIODHYPHENbased)"

CD -> DIGITDIGITPERIODDIGITDIGIT_CD
[tree] CD(DIGITDIGITPERIODDIGITDIGIT)
[ud] "(DIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITPERIODDIGITDIGIT)"

VBN -> adjusted_VBN
[tree] VBN(adjusted)
[ud] "(adjusted<root> / adjusted)"
[fourlang] "(adjusted<root> / adjusted)"

RB -> evenly_RB
[tree] RB(evenly)
[ud] "(evenly<root> / evenly)"
[fourlang] "(evenly<root> / evenly)"

JJ -> scientific_JJ
[tree] JJ(scientific)
[ud] "(scientific<root> / scientific)"
[fourlang] "(scientific<root> / scientific)"

NN -> capital_NN
[tree] NN(capital)
[ud] "(capital<root> / capital)"
[fourlang] "(capital<root> / capital)"

RB -> far_RB
[tree] RB(far)
[ud] "(far<root> / far)"
[fourlang] "(far<root> / far)"

JJ -> substanceHYPHENabusing_JJ
[tree] JJ(substanceHYPHENabusing)
[ud] "(substanceHYPHENabusing<root> / substanceHYPHENabusing)"
[fourlang] "(substanceHYPHENabusing<root> / substanceHYPHENabusing)"

JJ -> cumbersome_JJ
[tree] JJ(cumbersome)
[ud] "(cumbersome<root> / cumbersome)"
[fourlang] "(cumbersome<root> / cumbersome)"

NN -> prison_NN
[tree] NN(prison)
[ud] "(prison<root> / prison)"
[fourlang] "(prison<root> / prison)"

VBG -> upsetting_VBG
[tree] VBG(upsetting)
[ud] "(upsetting<root> / upsetting)"
[fourlang] "(upsetting<root> / upsetting)"

JJR -> Higher_JJR
[tree] JJR(Higher)
[ud] "(Higher<root> / Higher)"
[fourlang] "(Higher<root> / Higher)"

DT -> another_DT
[tree] DT(another)
[ud] "(another<root> / another)"
[fourlang] "(another<root> / another)"

RB -> continuingly_RB
[tree] RB(continuingly)
[ud] "(continuingly<root> / continuingly)"
[fourlang] "(continuingly<root> / continuingly)"

DT -> all_DT
[tree] DT(all)
[ud] "(all<root> / all)"
[fourlang] "(all<root> / all)"

JJ -> adverse_JJ
[tree] JJ(adverse)
[ud] "(adverse<root> / adverse)"
[fourlang] "(adverse<root> / adverse)"

RB -> often_RB
[tree] RB(often)
[ud] "(often<root> / often)"
[fourlang] "(often<root> / often)"

NN -> stock_NN
[tree] NN(stock)
[ud] "(stock<root> / stock)"
[fourlang] "(stock<root> / stock)"

RB -> Even_RB
[tree] RB(Even)
[ud] "(Even<root> / Even)"
[fourlang] "(Even<root> / Even)"

RB -> fully_RB
[tree] RB(fully)
[ud] "(fully<root> / fully)"
[fourlang] "(fully<root> / fully)"

CD -> DIGITDIGIT_CD
[tree] CD(DIGITDIGIT)
[ud] "(DIGITDIGIT<root> / DIGITDIGIT)"
[fourlang] "(DIGITDIGIT<root> / DIGITDIGIT)"

IN -> about_IN
[tree] IN(about)
[ud] "(about<root> / about)"
[fourlang] "(about<root> / about)"

NN -> industry_NN
[tree] NN(industry)
[ud] "(industry<root> / industry)"
[fourlang] "(industry<root> / industry)"

NNP -> London_NNP
[tree] NNP(London)
[ud] "(London<root> / London)"
[fourlang] "(London<root> / London)"

RB -> slightly_RB
[tree] RB(slightly)
[ud] "(slightly<root> / slightly)"
[fourlang] "(slightly<root> / slightly)"

JJ -> good_JJ
[tree] JJ(good)
[ud] "(good<root> / good)"
[fourlang] "(good<root> / good)"

JJ -> active_JJ
[tree] JJ(active)
[ud] "(active<root> / active)"
[fourlang] "(active<root> / active)"

JJ -> stateHYPHENowned_JJ
[tree] JJ(stateHYPHENowned)
[ud] "(stateHYPHENowned<root> / stateHYPHENowned)"
[fourlang] "(stateHYPHENowned<root> / stateHYPHENowned)"

IN -> as_IN
[tree] IN(as)
[ud] "(as<root> / as)"
[fourlang] "(as<root> / as)"

NN -> cataract_NN
[tree] NN(cataract)
[ud] "(cataract<root> / cataract)"
[fourlang] "(cataract<root> / cataract)"

JJ -> noble_JJ
[tree] JJ(noble)
[ud] "(noble<root> / noble)"
[fourlang] "(noble<root> / noble)"

RB -> traditionally_RB
[tree] RB(traditionally)
[ud] "(traditionally<root> / traditionally)"
[fourlang] "(traditionally<root> / traditionally)"

JJR -> More_JJR
[tree] JJR(More)
[ud] "(More<root> / More)"
[fourlang] "(More<root> / More)"

JJ -> severable_JJ
[tree] JJ(severable)
[ud] "(severable<root> / severable)"
[fourlang] "(severable<root> / severable)"

CD -> DIGIT_CD
[tree] CD(DIGIT)
[ud] "(DIGIT<root> / DIGIT)"
[fourlang] "(DIGIT<root> / DIGIT)"

JJ -> NPERIODJPERIODHYPHENbased_JJ
[tree] JJ(NPERIODJPERIODHYPHENbased)
[ud] "(NPERIODJPERIODHYPHENbased<root> / NPERIODJPERIODHYPHENbased)"
[fourlang] "(NPERIODJPERIODHYPHENbased<root> / NPERIODJPERIODHYPHENbased)"

NNP -> Research_NNP
[tree] NNP(Research)
[ud] "(Research<root> / Research)"
[fourlang] "(Research<root> / Research)"

JJ -> narrow_JJ
[tree] JJ(narrow)
[ud] "(narrow<root> / narrow)"
[fourlang] "(narrow<root> / narrow)"

NN -> supercomputer_NN
[tree] NN(supercomputer)
[ud] "(supercomputer<root> / supercomputer)"
[fourlang] "(supercomputer<root> / supercomputer)"

VBD -> became_VBD
[tree] VBD(became)
[ud] "(became<root> / became)"
[fourlang] "(became<root> / became)"

NN -> force_NN
[tree] NN(force)
[ud] "(force<root> / force)"
[fourlang] "(force<root> / force)"

NNS -> prerogatives_NNS
[tree] NNS(prerogatives)
[ud] "(prerogatives<root> / prerogatives)"
[fourlang] "(prerogatives<root> / prerogatives)"

NN -> average_NN
[tree] NN(average)
[ud] "(average<root> / average)"
[fourlang] "(average<root> / average)"

JJ -> unfocused_JJ
[tree] JJ(unfocused)
[ud] "(unfocused<root> / unfocused)"
[fourlang] "(unfocused<root> / unfocused)"

NNP -> Toledo_NNP
[tree] NNP(Toledo)
[ud] "(Toledo<root> / Toledo)"
[fourlang] "(Toledo<root> / Toledo)"

JJR -> stronger_JJR
[tree] JJR(stronger)
[ud] "(stronger<root> / stronger)"
[fourlang] "(stronger<root> / stronger)"

RB -> originally_RB
[tree] RB(originally)
[ud] "(originally<root> / originally)"
[fourlang] "(originally<root> / originally)"

RB -> recently_RB
[tree] RB(recently)
[ud] "(recently<root> / recently)"
[fourlang] "(recently<root> / recently)"

NN -> record_NN
[tree] NN(record)
[ud] "(record<root> / record)"
[fourlang] "(record<root> / record)"

NNP -> Younkers_NNP
[tree] NNP(Younkers)
[ud] "(Younkers<root> / Younkers)"
[fourlang] "(Younkers<root> / Younkers)"

VBZ -> has_VBZ
[tree] VBZ(has)
[ud] "(has<root> / has)"
[fourlang] "(has<root> / has)"

JJ -> administrative_JJ
[tree] JJ(administrative)
[ud] "(administrative<root> / administrative)"
[fourlang] "(administrative<root> / administrative)"

NNS -> practices_NNS
[tree] NNS(practices)
[ud] "(practices<root> / practices)"
[fourlang] "(practices<root> / practices)"

JJ -> congressional_JJ
[tree] JJ(congressional)
[ud] "(congressional<root> / congressional)"
[fourlang] "(congressional<root> / congressional)"

VBN -> fattened_VBN
[tree] VBN(fattened)
[ud] "(fattened<root> / fattened)"
[fourlang] "(fattened<root> / fattened)"

RB -> publicly_RB
[tree] RB(publicly)
[ud] "(publicly<root> / publicly)"
[fourlang] "(publicly<root> / publicly)"

JJ -> great_JJ
[tree] JJ(great)
[ud] "(great<root> / great)"
[fourlang] "(great<root> / great)"

NN -> martyr_NN
[tree] NN(martyr)
[ud] "(martyr<root> / martyr)"
[fourlang] "(martyr<root> / martyr)"

RB -> very_RB
[tree] RB(very)
[ud] "(very<root> / very)"
[fourlang] "(very<root> / very)"

JJ -> corporate_JJ
[tree] JJ(corporate)
[ud] "(corporate<root> / corporate)"
[fourlang] "(corporate<root> / corporate)"

JJ -> easy_JJ
[tree] JJ(easy)
[ud] "(easy<root> / easy)"
[fourlang] "(easy<root> / easy)"

JJ -> loose_JJ
[tree] JJ(loose)
[ud] "(loose<root> / loose)"
[fourlang] "(loose<root> / loose)"

PUNCT -> COMMA_PUNCT
[tree] PUNCT(COMMA)
[ud] "(COMMA<root> / COMMA)"
[fourlang] "(COMMA<root> / COMMA)"

NNS -> investorHYPHENrelations_NNS
[tree] NNS(investorHYPHENrelations)
[ud] "(investorHYPHENrelations<root> / investorHYPHENrelations)"
[fourlang] "(investorHYPHENrelations<root> / investorHYPHENrelations)"

NN -> turmoil_NN
[tree] NN(turmoil)
[ud] "(turmoil<root> / turmoil)"
[fourlang] "(turmoil<root> / turmoil)"

JJ -> RenaissanceHYPHENstyle_JJ
[tree] JJ(RenaissanceHYPHENstyle)
[ud] "(RenaissanceHYPHENstyle<root> / RenaissanceHYPHENstyle)"
[fourlang] "(RenaissanceHYPHENstyle<root> / RenaissanceHYPHENstyle)"

NNP -> West_NNP
[tree] NNP(West)
[ud] "(West<root> / West)"
[fourlang] "(West<root> / West)"

RB -> rather_RB
[tree] RB(rather)
[ud] "(rather<root> / rather)"
[fourlang] "(rather<root> / rather)"

JJ -> TexasHYPHENbased_JJ
[tree] JJ(TexasHYPHENbased)
[ud] "(TexasHYPHENbased<root> / TexasHYPHENbased)"
[fourlang] "(TexasHYPHENbased<root> / TexasHYPHENbased)"

JJ -> open_JJ
[tree] JJ(open)
[ud] "(open<root> / open)"
[fourlang] "(open<root> / open)"

VB -> impart_VB
[tree] VB(impart)
[ud] "(impart<root> / impart)"
[fourlang] "(impart<root> / impart)"

JJ -> international_JJ
[tree] JJ(international)
[ud] "(international<root> / international)"
[fourlang] "(international<root> / international)"

NNS -> sheets_NNS
[tree] NNS(sheets)
[ud] "(sheets<root> / sheets)"
[fourlang] "(sheets<root> / sheets)"

NN -> casino_NN
[tree] NN(casino)
[ud] "(casino<root> / casino)"
[fourlang] "(casino<root> / casino)"

RB -> twice_RB
[tree] RB(twice)
[ud] "(twice<root> / twice)"
[fourlang] "(twice<root> / twice)"

CD -> DIGITDIGITCOMMADIGITDIGITDIGIT_CD
[tree] CD(DIGITDIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITCOMMADIGITDIGITDIGIT)"

JJ -> wellHYPHENconnected_JJ
[tree] JJ(wellHYPHENconnected)
[ud] "(wellHYPHENconnected<root> / wellHYPHENconnected)"
[fourlang] "(wellHYPHENconnected<root> / wellHYPHENconnected)"

JJ -> egregious_JJ
[tree] JJ(egregious)
[ud] "(egregious<root> / egregious)"
[fourlang] "(egregious<root> / egregious)"

WP -> what_WP
[tree] WP(what)
[ud] "(what<root> / what)"
[fourlang] "(what<root> / what)"

VBN -> limited_VBN
[tree] VBN(limited)
[ud] "(limited<root> / limited)"
[fourlang] "(limited<root> / limited)"

JJ -> mean_JJ
[tree] JJ(mean)
[ud] "(mean<root> / mean)"
[fourlang] "(mean<root> / mean)"

JJ -> void_JJ
[tree] JJ(void)
[ud] "(void<root> / void)"
[fourlang] "(void<root> / void)"

JJ -> constitutional_JJ
[tree] JJ(constitutional)
[ud] "(constitutional<root> / constitutional)"
[fourlang] "(constitutional<root> / constitutional)"

JJ -> true_JJ
[tree] JJ(true)
[ud] "(true<root> / true)"
[fourlang] "(true<root> / true)"

VBN -> publicized_VBN
[tree] VBN(publicized)
[ud] "(publicized<root> / publicized)"
[fourlang] "(publicized<root> / publicized)"

PUNCT -> IQIQ_PUNCT
[tree] PUNCT(IQIQ)
[ud] "(IQIQ<root> / IQIQ)"
[fourlang] "(IQIQ<root> / IQIQ)"

VBN -> fed_VBN
[tree] VBN(fed)
[ud] "(fed<root> / fed)"
[fourlang] "(fed<root> / fed)"

NN -> type_NN
[tree] NN(type)
[ud] "(type<root> / type)"
[fourlang] "(type<root> / type)"

RB -> historically_RB
[tree] RB(historically)
[ud] "(historically<root> / historically)"
[fourlang] "(historically<root> / historically)"

NNS -> institutions_NNS
[tree] NNS(institutions)
[ud] "(institutions<root> / institutions)"
[fourlang] "(institutions<root> / institutions)"

RB -> especially_RB
[tree] RB(especially)
[ud] "(especially<root> / especially)"
[fourlang] "(especially<root> / especially)"

RB -> as_RB
[tree] RB(as)
[ud] "(as<root> / as)"
[fourlang] "(as<root> / as)"

IN -> that_IN
[tree] IN(that)
[ud] "(that<root> / that)"
[fourlang] "(that<root> / that)"

NNS -> points_NNS
[tree] NNS(points)
[ud] "(points<root> / points)"
[fourlang] "(points<root> / points)"

NN -> promise_NN
[tree] NN(promise)
[ud] "(promise<root> / promise)"
[fourlang] "(promise<root> / promise)"

JJ -> MichPERIODHYPHENbased_JJ
[tree] JJ(MichPERIODHYPHENbased)
[ud] "(MichPERIODHYPHENbased<root> / MichPERIODHYPHENbased)"
[fourlang] "(MichPERIODHYPHENbased<root> / MichPERIODHYPHENbased)"

NNP -> Department_NNP
[tree] NNP(Department)
[ud] "(Department<root> / Department)"
[fourlang] "(Department<root> / Department)"

JJR -> faster_JJR
[tree] JJR(faster)
[ud] "(faster<root> / faster)"
[fourlang] "(faster<root> / faster)"

JJ -> big_JJ
[tree] JJ(big)
[ud] "(big<root> / big)"
[fourlang] "(big<root> / big)"

RB -> even_RB
[tree] RB(even)
[ud] "(even<root> / even)"
[fourlang] "(even<root> / even)"

RB -> little_RB
[tree] RB(little)
[ud] "(little<root> / little)"
[fourlang] "(little<root> / little)"

JJR -> lower_JJR
[tree] JJR(lower)
[ud] "(lower<root> / lower)"
[fourlang] "(lower<root> / lower)"

NN -> percentage_NN
[tree] NN(percentage)
[ud] "(percentage<root> / percentage)"
[fourlang] "(percentage<root> / percentage)"

NNP -> Bush_NNP
[tree] NNP(Bush)
[ud] "(Bush<root> / Bush)"
[fourlang] "(Bush<root> / Bush)"

RB -> that_RB
[tree] RB(that)
[ud] "(that<root> / that)"
[fourlang] "(that<root> / that)"

RB -> significantly_RB
[tree] RB(significantly)
[ud] "(significantly<root> / significantly)"
[fourlang] "(significantly<root> / significantly)"

NN -> mark_NN
[tree] NN(mark)
[ud] "(mark<root> / mark)"
[fourlang] "(mark<root> / mark)"

VBN -> held_VBN
[tree] VBN(held)
[ud] "(held<root> / held)"
[fourlang] "(held<root> / held)"

JJ -> baldHYPHENfaced_JJ
[tree] JJ(baldHYPHENfaced)
[ud] "(baldHYPHENfaced<root> / baldHYPHENfaced)"
[fourlang] "(baldHYPHENfaced<root> / baldHYPHENfaced)"

NN -> meeting_NN
[tree] NN(meeting)
[ud] "(meeting<root> / meeting)"
[fourlang] "(meeting<root> / meeting)"

RB -> moderately_RB
[tree] RB(moderately)
[ud] "(moderately<root> / moderately)"
[fourlang] "(moderately<root> / moderately)"

JJ -> profitable_JJ
[tree] JJ(profitable)
[ud] "(profitable<root> / profitable)"
[fourlang] "(profitable<root> / profitable)"

JJ -> West_JJ
[tree] JJ(West)
[ud] "(West<root> / West)"
[fourlang] "(West<root> / West)"

JJ -> real_JJ
[tree] JJ(real)
[ud] "(real<root> / real)"
[fourlang] "(real<root> / real)"

VBN -> qualified_VBN
[tree] VBN(qualified)
[ud] "(qualified<root> / qualified)"
[fourlang] "(qualified<root> / qualified)"

RB -> narrowly_RB
[tree] RB(narrowly)
[ud] "(narrowly<root> / narrowly)"
[fourlang] "(narrowly<root> / narrowly)"

VB -> cut_VB
[tree] VB(cut)
[ud] "(cut<root> / cut)"
[fourlang] "(cut<root> / cut)"

JJ -> different_JJ
[tree] JJ(different)
[ud] "(different<root> / different)"
[fourlang] "(different<root> / different)"

RB -> seasonally_RB
[tree] RB(seasonally)
[ud] "(seasonally<root> / seasonally)"
[fourlang] "(seasonally<root> / seasonally)"

JJ -> tense_JJ
[tree] JJ(tense)
[ud] "(tense<root> / tense)"
[fourlang] "(tense<root> / tense)"

JJ -> compatible_JJ
[tree] JJ(compatible)
[ud] "(compatible<root> / compatible)"
[fourlang] "(compatible<root> / compatible)"

NN -> board_NN
[tree] NN(board)
[ud] "(board<root> / board)"
[fourlang] "(board<root> / board)"

CD -> DIGITDIGITPERIODDIGIT_CD
[tree] CD(DIGITDIGITPERIODDIGIT)
[ud] "(DIGITDIGITPERIODDIGIT<root> / DIGITDIGITPERIODDIGIT)"
[fourlang] "(DIGITDIGITPERIODDIGIT<root> / DIGITDIGITPERIODDIGIT)"

IN -> on_IN
[tree] IN(on)
[ud] "(on<root> / on)"
[fourlang] "(on<root> / on)"

PRP -> it_PRP
[tree] PRP(it)
[ud] "(it<root> / it)"
[fourlang] "(it<root> / it)"

VBN -> romanticized_VBN
[tree] VBN(romanticized)
[ud] "(romanticized<root> / romanticized)"
[fourlang] "(romanticized<root> / romanticized)"

JJ -> materialistic_JJ
[tree] JJ(materialistic)
[ud] "(materialistic<root> / materialistic)"
[fourlang] "(materialistic<root> / materialistic)"

NNP -> SeptPERIOD_NNP
[tree] NNP(SeptPERIOD)
[ud] "(SeptPERIOD<root> / SeptPERIOD)"
[fourlang] "(SeptPERIOD<root> / SeptPERIOD)"

JJ -> vicious_JJ
[tree] JJ(vicious)
[ud] "(vicious<root> / vicious)"
[fourlang] "(vicious<root> / vicious)"

RB -> mentally_RB
[tree] RB(mentally)
[ud] "(mentally<root> / mentally)"
[fourlang] "(mentally<root> / mentally)"

IN -> because_IN
[tree] IN(because)
[ud] "(because<root> / because)"
[fourlang] "(because<root> / because)"

JJ -> subject_JJ
[tree] JJ(subject)
[ud] "(subject<root> / subject)"
[fourlang] "(subject<root> / subject)"

JJ -> due_JJ
[tree] JJ(due)
[ud] "(due<root> / due)"
[fourlang] "(due<root> / due)"

NNS -> marketingHYPHENcommunications_NNS
[tree] NNS(marketingHYPHENcommunications)
[ud] "(marketingHYPHENcommunications<root> / marketingHYPHENcommunications)"
[fourlang] "(marketingHYPHENcommunications<root> / marketingHYPHENcommunications)"

JJ -> disparate_JJ
[tree] JJ(disparate)
[ud] "(disparate<root> / disparate)"
[fourlang] "(disparate<root> / disparate)"

IN -> with_IN
[tree] IN(with)
[ud] "(with<root> / with)"
[fourlang] "(with<root> / with)"

NNS -> yen_NNS
[tree] NNS(yen)
[ud] "(yen<root> / yen)"
[fourlang] "(yen<root> / yen)"

RB -> pretty_RB
[tree] RB(pretty)
[ud] "(pretty<root> / pretty)"
[fourlang] "(pretty<root> / pretty)"

POS -> SQs_POS
[tree] POS(SQs)
[ud] "(SQs<root> / SQs)"
[fourlang] "(SQs<root> / SQs)"

CD -> six_CD
[tree] CD(six)
[ud] "(six<root> / six)"
[fourlang] "(six<root> / six)"

NNP -> Spanish_NNP
[tree] NNP(Spanish)
[ud] "(Spanish<root> / Spanish)"
[fourlang] "(Spanish<root> / Spanish)"

JJ -> first_JJ
[tree] JJ(first)
[ud] "(first<root> / first)"
[fourlang] "(first<root> / first)"

JJ -> persistent_JJ
[tree] JJ(persistent)
[ud] "(persistent<root> / persistent)"
[fourlang] "(persistent<root> / persistent)"

JJ -> complete_JJ
[tree] JJ(complete)
[ud] "(complete<root> / complete)"
[fourlang] "(complete<root> / complete)"

NN -> base_NN
[tree] NN(base)
[ud] "(base<root> / base)"
[fourlang] "(base<root> / base)"

JJ -> deplorable_JJ
[tree] JJ(deplorable)
[ud] "(deplorable<root> / deplorable)"
[fourlang] "(deplorable<root> / deplorable)"

JJR -> easier_JJR
[tree] JJR(easier)
[ud] "(easier<root> / easier)"
[fourlang] "(easier<root> / easier)"

JJ -> social_JJ
[tree] JJ(social)
[ud] "(social<root> / social)"
[fourlang] "(social<root> / social)"

JJ -> South_JJ
[tree] JJ(South)
[ud] "(South<root> / South)"
[fourlang] "(South<root> / South)"

NN -> work_NN
[tree] NN(work)
[ud] "(work<root> / work)"
[fourlang] "(work<root> / work)"

JJ -> high_JJ
[tree] JJ(high)
[ud] "(high<root> / high)"
[fourlang] "(high<root> / high)"

JJ -> amusing_JJ
[tree] JJ(amusing)
[ud] "(amusing<root> / amusing)"
[fourlang] "(amusing<root> / amusing)"

NNPS -> Underwoods_NNPS
[tree] NNPS(Underwoods)
[ud] "(Underwoods<root> / Underwoods)"
[fourlang] "(Underwoods<root> / Underwoods)"

IN -> at_IN
[tree] IN(at)
[ud] "(at<root> / at)"
[fourlang] "(at<root> / at)"

NNP -> Carolina_NNP
[tree] NNP(Carolina)
[ud] "(Carolina<root> / Carolina)"
[fourlang] "(Carolina<root> / Carolina)"

JJ -> effective_JJ
[tree] JJ(effective)
[ud] "(effective<root> / effective)"
[fourlang] "(effective<root> / effective)"

VBN -> diluted_VBN
[tree] VBN(diluted)
[ud] "(diluted<root> / diluted)"
[fourlang] "(diluted<root> / diluted)"

RB -> structurally_RB
[tree] RB(structurally)
[ud] "(structurally<root> / structurally)"
[fourlang] "(structurally<root> / structurally)"

NN -> number_NN
[tree] NN(number)
[ud] "(number<root> / number)"
[fourlang] "(number<root> / number)"

NN -> service_NN
[tree] NN(service)
[ud] "(service<root> / service)"
[fourlang] "(service<root> / service)"

JJ -> shortHYPHENterm_JJ
[tree] JJ(shortHYPHENterm)
[ud] "(shortHYPHENterm<root> / shortHYPHENterm)"
[fourlang] "(shortHYPHENterm<root> / shortHYPHENterm)"

NN -> warming_NN
[tree] NN(warming)
[ud] "(warming<root> / warming)"
[fourlang] "(warming<root> / warming)"

NNS -> tests_NNS
[tree] NNS(tests)
[ud] "(tests<root> / tests)"
[fourlang] "(tests<root> / tests)"

VB -> help_VB
[tree] VB(help)
[ud] "(help<root> / help)"
[fourlang] "(help<root> / help)"

VBN -> respected_VBN
[tree] VBN(respected)
[ud] "(respected<root> / respected)"
[fourlang] "(respected<root> / respected)"

WDT -> that_WDT
[tree] WDT(that)
[ud] "(that<root> / that)"
[fourlang] "(that<root> / that)"

VBN -> connected_VBN
[tree] VBN(connected)
[ud] "(connected<root> / connected)"
[fourlang] "(connected<root> / connected)"

JJ -> gentle_JJ
[tree] JJ(gentle)
[ud] "(gentle<root> / gentle)"
[fourlang] "(gentle<root> / gentle)"

JJ -> aggressive_JJ
[tree] JJ(aggressive)
[ud] "(aggressive<root> / aggressive)"
[fourlang] "(aggressive<root> / aggressive)"

RB -> enough_RB
[tree] RB(enough)
[ud] "(enough<root> / enough)"
[fourlang] "(enough<root> / enough)"

VBN -> related_VBN
[tree] VBN(related)
[ud] "(related<root> / related)"
[fourlang] "(related<root> / related)"

VBN -> insured_VBN
[tree] VBN(insured)
[ud] "(insured<root> / insured)"
[fourlang] "(insured<root> / insured)"

JJ -> severe_JJ
[tree] JJ(severe)
[ud] "(severe<root> / severe)"
[fourlang] "(severe<root> / severe)"

NNS -> ringers_NNS
[tree] NNS(ringers)
[ud] "(ringers<root> / ringers)"
[fourlang] "(ringers<root> / ringers)"

IN -> near_IN
[tree] IN(near)
[ud] "(near<root> / near)"
[fourlang] "(near<root> / near)"

RB -> nearly_RB
[tree] RB(nearly)
[ud] "(nearly<root> / nearly)"
[fourlang] "(nearly<root> / nearly)"

JJ -> new_JJ
[tree] JJ(new)
[ud] "(new<root> / new)"
[fourlang] "(new<root> / new)"

RB -> politically_RB
[tree] RB(politically)
[ud] "(politically<root> / politically)"
[fourlang] "(politically<root> / politically)"

NN -> share_NN
[tree] NN(share)
[ud] "(share<root> / share)"
[fourlang] "(share<root> / share)"

JJ -> New_JJ
[tree] JJ(New)
[ud] "(New<root> / New)"
[fourlang] "(New<root> / New)"

NN -> PERCENT_NN
[tree] NN(PERCENT)
[ud] "(PERCENT<root> / PERCENT)"
[fourlang] "(PERCENT<root> / PERCENT)"

NNS -> times_NNS
[tree] NNS(times)
[ud] "(times<root> / times)"
[fourlang] "(times<root> / times)"

JJ -> replete_JJ
[tree] JJ(replete)
[ud] "(replete<root> / replete)"
[fourlang] "(replete<root> / replete)"

JJ -> close_JJ
[tree] JJ(close)
[ud] "(close<root> / close)"
[fourlang] "(close<root> / close)"

NNP -> August_NNP
[tree] NNP(August)
[ud] "(August<root> / August)"
[fourlang] "(August<root> / August)"

JJ -> winning_JJ
[tree] JJ(winning)
[ud] "(winning<root> / winning)"
[fourlang] "(winning<root> / winning)"

JJ -> regional_JJ
[tree] JJ(regional)
[ud] "(regional<root> / regional)"
[fourlang] "(regional<root> / regional)"

NN -> family_NN
[tree] NN(family)
[ud] "(family<root> / family)"
[fourlang] "(family<root> / family)"

JJ -> wealthy_JJ
[tree] JJ(wealthy)
[ud] "(wealthy<root> / wealthy)"
[fourlang] "(wealthy<root> / wealthy)"

NN -> bond_NN
[tree] NN(bond)
[ud] "(bond<root> / bond)"
[fourlang] "(bond<root> / bond)"

NN -> floor_NN
[tree] NN(floor)
[ud] "(floor<root> / floor)"
[fourlang] "(floor<root> / floor)"

JJ -> inadequate_JJ
[tree] JJ(inadequate)
[ud] "(inadequate<root> / inadequate)"
[fourlang] "(inadequate<root> / inadequate)"

JJ -> obvious_JJ
[tree] JJ(obvious)
[ud] "(obvious<root> / obvious)"
[fourlang] "(obvious<root> / obvious)"

JJ -> prominent_JJ
[tree] JJ(prominent)
[ud] "(prominent<root> / prominent)"
[fourlang] "(prominent<root> / prominent)"

NN -> diaper_NN
[tree] NN(diaper)
[ud] "(diaper<root> / diaper)"
[fourlang] "(diaper<root> / diaper)"

JJ -> unneeded_JJ
[tree] JJ(unneeded)
[ud] "(unneeded<root> / unneeded)"
[fourlang] "(unneeded<root> / unneeded)"

JJ -> singleHYPHENhanded_JJ
[tree] JJ(singleHYPHENhanded)
[ud] "(singleHYPHENhanded<root> / singleHYPHENhanded)"
[fourlang] "(singleHYPHENhanded<root> / singleHYPHENhanded)"

JJ -> mature_JJ
[tree] JJ(mature)
[ud] "(mature<root> / mature)"
[fourlang] "(mature<root> / mature)"

JJ -> OhioHYPHENbased_JJ
[tree] JJ(OhioHYPHENbased)
[ud] "(OhioHYPHENbased<root> / OhioHYPHENbased)"
[fourlang] "(OhioHYPHENbased<root> / OhioHYPHENbased)"

VBN -> integrated_VBN
[tree] VBN(integrated)
[ud] "(integrated<root> / integrated)"
[fourlang] "(integrated<root> / integrated)"

JJ -> acid_JJ
[tree] JJ(acid)
[ud] "(acid<root> / acid)"
[fourlang] "(acid<root> / acid)"

RB -> nSQt_RB
[tree] RB(nSQt)
[ud] "(nSQt<root> / nSQt)"
[fourlang] "(nSQt<root> / nSQt)"

JJ -> leery_JJ
[tree] JJ(leery)
[ud] "(leery<root> / leery)"
[fourlang] "(leery<root> / leery)"

RB -> entirely_RB
[tree] RB(entirely)
[ud] "(entirely<root> / entirely)"
[fourlang] "(entirely<root> / entirely)"

JJ -> significant_JJ
[tree] JJ(significant)
[ud] "(significant<root> / significant)"
[fourlang] "(significant<root> / significant)"

PRP -> themselves_PRP
[tree] PRP(themselves)
[ud] "(themselves<root> / themselves)"
[fourlang] "(themselves<root> / themselves)"

NNP -> Treasury_NNP
[tree] NNP(Treasury)
[ud] "(Treasury<root> / Treasury)"
[fourlang] "(Treasury<root> / Treasury)"

RB -> rapidly_RB
[tree] RB(rapidly)
[ud] "(rapidly<root> / rapidly)"
[fourlang] "(rapidly<root> / rapidly)"

DT -> any_DT
[tree] DT(any)
[ud] "(any<root> / any)"
[fourlang] "(any<root> / any)"

JJ -> intentioned_JJ
[tree] JJ(intentioned)
[ud] "(intentioned<root> / intentioned)"
[fourlang] "(intentioned<root> / intentioned)"

JJ -> imaginative_JJ
[tree] JJ(imaginative)
[ud] "(imaginative<root> / imaginative)"
[fourlang] "(imaginative<root> / imaginative)"

JJ -> lucrative_JJ
[tree] JJ(lucrative)
[ud] "(lucrative<root> / lucrative)"
[fourlang] "(lucrative<root> / lucrative)"

NNS -> students_NNS
[tree] NNS(students)
[ud] "(students<root> / students)"
[fourlang] "(students<root> / students)"

VB -> serve_VB
[tree] VB(serve)
[ud] "(serve<root> / serve)"
[fourlang] "(serve<root> / serve)"

JJ -> CalifPERIODHYPHENbased_JJ
[tree] JJ(CalifPERIODHYPHENbased)
[ud] "(CalifPERIODHYPHENbased<root> / CalifPERIODHYPHENbased)"
[fourlang] "(CalifPERIODHYPHENbased<root> / CalifPERIODHYPHENbased)"

NNS -> estimates_NNS
[tree] NNS(estimates)
[ud] "(estimates<root> / estimates)"
[fourlang] "(estimates<root> / estimates)"

VBG -> diversifying_VBG
[tree] VBG(diversifying)
[ud] "(diversifying<root> / diversifying)"
[fourlang] "(diversifying<root> / diversifying)"

VBG -> TRIMMING_VBG
[tree] VBG(TRIMMING)
[ud] "(TRIMMING<root> / TRIMMING)"
[fourlang] "(TRIMMING<root> / TRIMMING)"

JJ -> comprehensive_JJ
[tree] JJ(comprehensive)
[ud] "(comprehensive<root> / comprehensive)"
[fourlang] "(comprehensive<root> / comprehensive)"

JJR -> weaker_JJR
[tree] JJR(weaker)
[ud] "(weaker<root> / weaker)"
[fourlang] "(weaker<root> / weaker)"

NN -> wage_NN
[tree] NN(wage)
[ud] "(wage<root> / wage)"
[fourlang] "(wage<root> / wage)"

JJ -> African_JJ
[tree] JJ(African)
[ud] "(African<root> / African)"
[fourlang] "(African<root> / African)"

NNP -> Judiciary_NNP
[tree] NNP(Judiciary)
[ud] "(Judiciary<root> / Judiciary)"
[fourlang] "(Judiciary<root> / Judiciary)"

RB -> exceedingly_RB
[tree] RB(exceedingly)
[ud] "(exceedingly<root> / exceedingly)"
[fourlang] "(exceedingly<root> / exceedingly)"

JJ -> defensive_JJ
[tree] JJ(defensive)
[ud] "(defensive<root> / defensive)"
[fourlang] "(defensive<root> / defensive)"

JJ -> interesting_JJ
[tree] JJ(interesting)
[ud] "(interesting<root> / interesting)"
[fourlang] "(interesting<root> / interesting)"

JJR -> older_JJR
[tree] JJR(older)
[ud] "(older<root> / older)"
[fourlang] "(older<root> / older)"

JJ -> old_JJ
[tree] JJ(old)
[ud] "(old<root> / old)"
[fourlang] "(old<root> / old)"

JJ -> thin_JJ
[tree] JJ(thin)
[ud] "(thin<root> / thin)"
[fourlang] "(thin<root> / thin)"

JJ -> rich_JJ
[tree] JJ(rich)
[ud] "(rich<root> / rich)"
[fourlang] "(rich<root> / rich)"

JJ -> excise_JJ
[tree] JJ(excise)
[ud] "(excise<root> / excise)"
[fourlang] "(excise<root> / excise)"

JJ -> strongHYPHENwilled_JJ
[tree] JJ(strongHYPHENwilled)
[ud] "(strongHYPHENwilled<root> / strongHYPHENwilled)"
[fourlang] "(strongHYPHENwilled<root> / strongHYPHENwilled)"

NNS -> analysts_NNS
[tree] NNS(analysts)
[ud] "(analysts<root> / analysts)"
[fourlang] "(analysts<root> / analysts)"

IN -> without_IN
[tree] IN(without)
[ud] "(without<root> / without)"
[fourlang] "(without<root> / without)"

RB -> close_RB
[tree] RB(close)
[ud] "(close<root> / close)"
[fourlang] "(close<root> / close)"

CD -> CrayHYPHENDIGIT_CD
[tree] CD(CrayHYPHENDIGIT)
[ud] "(CrayHYPHENDIGIT<root> / CrayHYPHENDIGIT)"
[fourlang] "(CrayHYPHENDIGIT<root> / CrayHYPHENDIGIT)"

JJ -> dirty_JJ
[tree] JJ(dirty)
[ud] "(dirty<root> / dirty)"
[fourlang] "(dirty<root> / dirty)"

JJ -> bad_JJ
[tree] JJ(bad)
[ud] "(bad<root> / bad)"
[fourlang] "(bad<root> / bad)"

JJ -> likely_JJ
[tree] JJ(likely)
[ud] "(likely<root> / likely)"
[fourlang] "(likely<root> / likely)"

NNP -> City_NNP
[tree] NNP(City)
[ud] "(City<root> / City)"
[fourlang] "(City<root> / City)"

JJR -> slower_JJR
[tree] JJR(slower)
[ud] "(slower<root> / slower)"
[fourlang] "(slower<root> / slower)"

NNP -> Committee_NNP
[tree] NNP(Committee)
[ud] "(Committee<root> / Committee)"
[fourlang] "(Committee<root> / Committee)"

JJ -> residential_JJ
[tree] JJ(residential)
[ud] "(residential<root> / residential)"
[fourlang] "(residential<root> / residential)"

JJ -> little_JJ
[tree] JJ(little)
[ud] "(little<root> / little)"
[fourlang] "(little<root> / little)"

JJ -> even_JJ
[tree] JJ(even)
[ud] "(even<root> / even)"
[fourlang] "(even<root> / even)"

NNP -> Kearny_NNP
[tree] NNP(Kearny)
[ud] "(Kearny<root> / Kearny)"
[fourlang] "(Kearny<root> / Kearny)"

JJ -> receptive_JJ
[tree] JJ(receptive)
[ud] "(receptive<root> / receptive)"
[fourlang] "(receptive<root> / receptive)"

VBN -> divided_VBN
[tree] VBN(divided)
[ud] "(divided<root> / divided)"
[fourlang] "(divided<root> / divided)"

JJ -> precious_JJ
[tree] JJ(precious)
[ud] "(precious<root> / precious)"
[fourlang] "(precious<root> / precious)"

JJ -> sympathetic_JJ
[tree] JJ(sympathetic)
[ud] "(sympathetic<root> / sympathetic)"
[fourlang] "(sympathetic<root> / sympathetic)"

NN -> crib_NN
[tree] NN(crib)
[ud] "(crib<root> / crib)"
[fourlang] "(crib<root> / crib)"

NN -> arbitrage_NN
[tree] NN(arbitrage)
[ud] "(arbitrage<root> / arbitrage)"
[fourlang] "(arbitrage<root> / arbitrage)"

VBN -> announced_VBN
[tree] VBN(announced)
[ud] "(announced<root> / announced)"
[fourlang] "(announced<root> / announced)"

RB -> unrealistically_RB
[tree] RB(unrealistically)
[ud] "(unrealistically<root> / unrealistically)"
[fourlang] "(unrealistically<root> / unrealistically)"

RB -> privately_RB
[tree] RB(privately)
[ud] "(privately<root> / privately)"
[fourlang] "(privately<root> / privately)"

NN -> point_NN
[tree] NN(point)
[ud] "(point<root> / point)"
[fourlang] "(point<root> / point)"

VBN -> fashioned_VBN
[tree] VBN(fashioned)
[ud] "(fashioned<root> / fashioned)"
[fourlang] "(fashioned<root> / fashioned)"

NN -> index_NN
[tree] NN(index)
[ud] "(index<root> / index)"
[fourlang] "(index<root> / index)"

NNP -> II_NNP
[tree] NNP(II)
[ud] "(II<root> / II)"
[fourlang] "(II<root> / II)"

NNP -> Basin_NNP
[tree] NNP(Basin)
[ud] "(Basin<root> / Basin)"
[fourlang] "(Basin<root> / Basin)"

JJ -> OrleansHYPHENbased_JJ
[tree] JJ(OrleansHYPHENbased)
[ud] "(OrleansHYPHENbased<root> / OrleansHYPHENbased)"
[fourlang] "(OrleansHYPHENbased<root> / OrleansHYPHENbased)"

JJR -> more_JJR
[tree] JJR(more)
[ud] "(more<root> / more)"
[fourlang] "(more<root> / more)"

JJ -> funded_JJ
[tree] JJ(funded)
[ud] "(funded<root> / funded)"
[fourlang] "(funded<root> / funded)"

RB -> not_RB
[tree] RB(not)
[ud] "(not<root> / not)"
[fourlang] "(not<root> / not)"

NN -> tax_NN
[tree] NN(tax)
[ud] "(tax<root> / tax)"
[fourlang] "(tax<root> / tax)"

JJR -> cleaner_JJR
[tree] JJR(cleaner)
[ud] "(cleaner<root> / cleaner)"
[fourlang] "(cleaner<root> / cleaner)"

JJR -> greater_JJR
[tree] JJR(greater)
[ud] "(greater<root> / greater)"
[fourlang] "(greater<root> / greater)"

NNS -> bonds_NNS
[tree] NNS(bonds)
[ud] "(bonds<root> / bonds)"
[fourlang] "(bonds<root> / bonds)"

JJ -> normal_JJ
[tree] JJ(normal)
[ud] "(normal<root> / normal)"
[fourlang] "(normal<root> / normal)"

JJ -> longHYPHENterm_JJ
[tree] JJ(longHYPHENterm)
[ud] "(longHYPHENterm<root> / longHYPHENterm)"
[fourlang] "(longHYPHENterm<root> / longHYPHENterm)"

NNP -> Kalamazoo_NNP
[tree] NNP(Kalamazoo)
[ud] "(Kalamazoo<root> / Kalamazoo)"
[fourlang] "(Kalamazoo<root> / Kalamazoo)"

JJ -> inappropriate_JJ
[tree] JJ(inappropriate)
[ud] "(inappropriate<root> / inappropriate)"
[fourlang] "(inappropriate<root> / inappropriate)"

PRP -> she_PRP
[tree] PRP(she)
[ud] "(she<root> / she)"
[fourlang] "(she<root> / she)"

RB -> vertically_RB
[tree] RB(vertically)
[ud] "(vertically<root> / vertically)"
[fourlang] "(vertically<root> / vertically)"

JJ -> large_JJ
[tree] JJ(large)
[ud] "(large<root> / large)"
[fourlang] "(large<root> / large)"

IN -> OF_IN
[tree] IN(OF)
[ud] "(OF<root> / OF)"
[fourlang] "(OF<root> / OF)"

NN -> attention_NN
[tree] NN(attention)
[ud] "(attention<root> / attention)"
[fourlang] "(attention<root> / attention)"

CD -> DIGITDIGITDIGITPERIODDIGIT_CD
[tree] CD(DIGITDIGITDIGITPERIODDIGIT)
[ud] "(DIGITDIGITDIGITPERIODDIGIT<root> / DIGITDIGITDIGITPERIODDIGIT)"
[fourlang] "(DIGITDIGITDIGITPERIODDIGIT<root> / DIGITDIGITDIGITPERIODDIGIT)"

CD -> DIGITDIGITDIGIT_CD
[tree] CD(DIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGIT<root> / DIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGIT<root> / DIGITDIGITDIGIT)"

NN -> elephant_NN
[tree] NN(elephant)
[ud] "(elephant<root> / elephant)"
[fourlang] "(elephant<root> / elephant)"

RB -> sharply_RB
[tree] RB(sharply)
[ud] "(sharply<root> / sharply)"
[fourlang] "(sharply<root> / sharply)"

JJ -> minute_JJ
[tree] JJ(minute)
[ud] "(minute<root> / minute)"
[fourlang] "(minute<root> / minute)"

JJ -> central_JJ
[tree] JJ(central)
[ud] "(central<root> / central)"
[fourlang] "(central<root> / central)"

JJ -> historic_JJ
[tree] JJ(historic)
[ud] "(historic<root> / historic)"
[fourlang] "(historic<root> / historic)"

CD -> DIGITPERIODDIGITDIGIT_CD
[tree] CD(DIGITPERIODDIGITDIGIT)
[ud] "(DIGITPERIODDIGITDIGIT<root> / DIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITPERIODDIGITDIGIT<root> / DIGITPERIODDIGITDIGIT)"

NNP -> YorkHYPHENbased_NNP
[tree] NNP(YorkHYPHENbased)
[ud] "(YorkHYPHENbased<root> / YorkHYPHENbased)"
[fourlang] "(YorkHYPHENbased<root> / YorkHYPHENbased)"

NNS -> complaints_NNS
[tree] NNS(complaints)
[ud] "(complaints<root> / complaints)"
[fourlang] "(complaints<root> / complaints)"

VB -> cope_VB
[tree] VB(cope)
[ud] "(cope<root> / cope)"
[fourlang] "(cope<root> / cope)"

JJ -> gripping_JJ
[tree] JJ(gripping)
[ud] "(gripping<root> / gripping)"
[fourlang] "(gripping<root> / gripping)"

JJ -> YorkHYPHENbased_JJ
[tree] JJ(YorkHYPHENbased)
[ud] "(YorkHYPHENbased<root> / YorkHYPHENbased)"
[fourlang] "(YorkHYPHENbased<root> / YorkHYPHENbased)"

NNS -> actions_NNS
[tree] NNS(actions)
[ud] "(actions<root> / actions)"
[fourlang] "(actions<root> / actions)"

RB -> relatively_RB
[tree] RB(relatively)
[ud] "(relatively<root> / relatively)"
[fourlang] "(relatively<root> / relatively)"

VBN -> involved_VBN
[tree] VBN(involved)
[ud] "(involved<root> / involved)"
[fourlang] "(involved<root> / involved)"


JJ -> knowledgeable_JJ
[tree] JJ(knowledgeable)
[ud] "(knowledgeable<root> / knowledgeable)"
[fourlang] "(knowledgeable<root> / knowledgeable)"

JJ -> free_JJ
[tree] JJ(free)
[ud] "(free<root> / free)"
[fourlang] "(free<root> / free)"

NNP -> Justice_NNP
[tree] NNP(Justice)
[ud] "(Justice<root> / Justice)"
[fourlang] "(Justice<root> / Justice)"

JJ -> conditional_JJ
[tree] JJ(conditional)
[ud] "(conditional<root> / conditional)"
[fourlang] "(conditional<root> / conditional)"

JJ -> worthy_JJ
[tree] JJ(worthy)
[ud] "(worthy<root> / worthy)"
[fourlang] "(worthy<root> / worthy)"

JJ -> sentimental_JJ
[tree] JJ(sentimental)
[ud] "(sentimental<root> / sentimental)"
[fourlang] "(sentimental<root> / sentimental)"

JJ -> TIRED_JJ
[tree] JJ(TIRED)
[ud] "(TIRED<root> / TIRED)"
[fourlang] "(TIRED<root> / TIRED)"

