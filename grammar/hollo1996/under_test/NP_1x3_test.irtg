interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation tree: de.up.ling.irtg.algebra.TagTreeAlgebra
interpretation ud: de.up.ling.irtg.algebra.graph.GraphAlgebra
interpretation fourlang: de.up.ling.irtg.algebra.graph.GraphAlgebra

//UPPER NODES
//UPPER NODES

//entry point
S! -> sentence(NP)
[string] ?1
[tree] ?1
[ud] ?1
[fourlang] ?1




//LOWER NODES
//LOWER NODES

//Noun_Phrases
//Noun_Phrases

//ternary
//ternary

//complete
//


//a long NounPhrase out of a  NounPhrase Bar and a PersonalPronoun (which is a unspecified dependency). 
//NP3( PRP( her), NN( teaching), NN( certificate))
//(NP (PRP her) (NN teaching) (NN certificate))
NP -> dep_PRP_NPBAR_Tail(PRP, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :dep (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a Noun (which is a compound). 
//NP3( NN( achievement_HYPHEN_test), NN( preparation), NNS( booklets))
//(NP (NN achievement-test) (NN preparation) (NNS booklets))
NP -> compound_NN_NPBAR_Tail(NNbasic, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a PreDeterminer (which is a predeterminant). 
//NP3( PDT( all), DT( the), NN( furor))
//(NP (PDT all) (DT the) (NN furor))
NP -> det_COLON_predet_PDT_NPBAR_Tail(PDT, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :det:predet (d<dep>))", r_dep(?1))),?2)
[fourlang] ?1

//a long NounPhrase out of a  NounPhrase Bar and a PluralProperNoun (which is a compound). 
//NP3( NNPS( GRAINS), NNP( AND), NNPS( SOYBEANS))
//(NP (NNPS GRAINS) (NNP AND) (NNPS SOYBEANS))
NP -> compound_NNPS_NPBAR_Tail(NNPS, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a Gerund|PresentParticipleVerb (which is a adjectival modifier). 
//NP3( VBG( continuing), JJ( economic), NNS( problems))
//(NP (VBG continuing) (JJ economic) (NNS problems))
NP -> amod_VBG_NPBAR_Tail(VBG, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a Adverb (which is a adverbial modifier). 
//NP3( RB( about), DT( the), NN( cost))
//(NP (RB about) (DT the) (NN cost))
NP -> advmod_RB_NPBAR_Tail(RBbasic, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :advmod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a PrepositionOrSubordinatingConjunction (which is a adjectival modifier). 
//NP3( IN( about), CD( _DIGITS_), NN( _PERCENT_))
//(NP (IN about) (CD 80) (NN %))
NP -> amod_IN_NPBAR_Tail(IN, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a PluralNoun (which is a conjunct And) and a NounPhrase Bar.
//NP3( NNS( airlines), CC( and), NNS( airports))
//(NP (NNS airlines) (CC and) (NNS airports))
NP -> conj_COLON_and_NNS_NPBAR_Tail(NNS, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :conj:and (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?2))),?1)

//a long NounPhrase out of a  NounPhrase Bar and a PossessivePronoun (which is a possessive nominal modifier). 
//NP3( PRP_DOLLAR_( her), CD( _DIGITS_), NNS( years))
//(NP (PRP$ her) (CD 60) (NNS years))
NP -> nmod_COLON_poss_PRP_DOLLAR__NPBAR_Tail(PRP_DOLLAR_, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :nmod:poss (d<dep>))", r_dep(?1))),?2)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root>/HAS :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?1))), r_dep1(?2)))

//a long NounPhrase out of a  NounPhrase Bar and a CardinalNumber (which is a numeric modifier). 
//NP3( CD( _DIGITS_COMMA_DIGITS_), NN( parking), NNS( spaces))
//(NP (CD 10,000) (NN parking) (NNS spaces))
NP -> nummod_CD_NPBAR_Tail(CD, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a SuperlativeAdjective (which is a adjectival modifier). 
//NP3( JJS( most), JJ( English), NNS( peculiarities))
//(NP (JJS most) (JJ English) (NNS peculiarities))
NP -> amod_JJS_NPBAR_Tail(JJS, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a Verb (which is a unspecified dependency). 
//NP3( VB( realestate), NN( loan), NNS( reserves))
//(NP (VB realestate) (NN loan) (NNS reserves))
NP -> dep_VB_NPBAR_Tail(VBbasic, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :dep (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a PastParticipleVerb (which is a adjectival modifier). 
//NP3( VBN( advanced), NN( networking), NN( software))
//(NP (VBN advanced) (NN networking) (NN software))
NP -> amod_VBN_NPBAR_Tail(VBN, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a ComparativeAdjective (which is a adjectival modifier). 
//NP3( JJR( better), NN( export), NNS( orders))
//(NP (JJR better) (NN export) (NNS orders))
NP -> amod_JJR_NPBAR_Tail(JJR, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a Adjective (which is a adjectival modifier). 
//NP3( JJ( _DIGITS_HYPHEN_year), NN( mortgage), NNS( commitments))
//(NP (JJ 30-year) (NN mortgage) (NNS commitments))
NP -> amod_JJ_NPBAR_Tail(JJbasic, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//a long NounPhrase out of a  NounPhrase Bar and a Determiner (which is a determiner). 
//NP3( DT( a), CD( _DIGITS_), NN( law))
//(NP (DT a) (CD 1934) (NN law))
NP -> det_DT_NPBAR_Tail(DT, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :det (d<dep>))", r_dep(?1))),?2)
[fourlang] ?1

//a long NounPhrase out of a  NounPhrase Bar and a SingularProperNoun (which is a compound). 
//NP3( NNP( A_PERIOD_C_PERIOD_), NNP( Nielsen), NNP( Co))
//(NP (NNP A.C.) (NNP Nielsen) (NNP Co))
NP -> compound_NNP_NPBAR_Tail(NNP, NP_BAR)
[string] *(?1,?2)
[tree] @(?2,?1)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?1))),?2)

//tail
//

//End of a NounPhrase End out of two SingularProperNoun-s.
//NP3( NNP( Asia), CC( or), NNP( Europe))
//(NP (NNP Asia) (CC or) (NNP Europe))
NP_BAR -> undependent_CC_NNP_Tail(CC,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase End out of a Adjectiveand a Determiner (which is a unspecified dependency). 
//NP3( DT( the), JJ( first), DT( half))
//(NP (DT the) (JJ first) (DT half))
NP_BAR -> dep_JJ_DT_Tail(JJbasic,DT)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :dep (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a Noun (which is a compound) and a SingularProperNoun.
//NP3( DT( the), NN( fifth_HYPHEN_grade), NNP( CAT))
//(NP (DT the) (NN fifth-grade) (NNP CAT))
NP_BAR -> compound_NN_NNP_Tail(NNbasic,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two PluralNoun-s.
//NP3( NN( appreciation), CC( and), NNS( dividends))
//(NP (NN appreciation) (CC and) (NNS dividends))
NP_BAR -> undependent_CC_NNS_Tail(CC,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a SingularProperNoun (which is a compound) and a Noun.
//NP3( CD( one), NNP( U_PERIOD_S_PERIOD_), NN( investor))
//(NP (CD one) (NNP U.S.) (NN investor))
NP_BAR -> compound_NNP_NN_Tail(NNP,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a SingularProperNoun (which is a compound) and a SingularProperNoun.
//NP3( CD( _DIGITS_), NNP( Series), NNP( A_HYPHEN_D))
//(NP (CD 1989) (NNP Series) (NNP A-D))
NP_BAR -> compound_NNP_NNP_Tail(NNP,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Determiner (which is a determiner) and a SingularProperNoun.
//NP3( NNP( Marina), DT( del), NNP( Rey))
//(NP (NNP Marina) (DT del) (NNP Rey))
NP_BAR -> det_DT_NNP_Tail(DT,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :det (d<dep>))", r_dep(?2))),?1)
[fourlang] ?2

//End of a NounPhrase End out of two Punctuation-s.
//NP3( JJ( imminent), NN( use), PUNCT( _SQ_SQ_))
//(NP (JJ imminent) (NN use) ('' ''))
NP_BAR -> undependent_NN_PUNCT_Tail(NNbasic,PUNCT)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase End out of two Noun-s.
//NP3( CD( _DIGITS_), CD( _DIGITS_BSL_PER_DIGITS_), NN( _PERCENT_))
//(NP (CD 10) (CD 1\/2) (NN %))
NP_BAR -> undependent_CD_NN_Tail(CD,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a SingularProperNoun (which is a compound) and a PluralProperNoun.
//NP3( DT( the), NNP( National), NNPS( Institutes))
//(NP (DT the) (NNP National) (NNPS Institutes))
NP_BAR -> compound_NNP_NNPS_Tail(NNP,NNPS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a ComparativeAdjective (which is a adjectival modifier) and a PluralNoun.
//NP3( CD( _DIGITS_COMMA_DIGITS_), JJR( more), NNS( couples))
//(NP (CD 6,000) (JJR more) (NNS couples))
NP_BAR -> amod_JJR_NNS_Tail(JJR,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Adverb (which is a adverbial modifier) and a PluralNoun.
//NP3( NNP( LONDON), RB( LATE), NNS( EURODOLLARS))
//(NP (NNP LONDON) (RB LATE) (NNS EURODOLLARS))
NP_BAR -> advmod_RB_NNS_Tail(RBbasic,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :advmod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two Noun-s.
//NP3( DT( all), CC( or), NN( part))
//(NP (DT all) (CC or) (NN part))
NP_BAR -> undependent_CC_NN_Tail(CC,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a PrepositionOrSubordinatingConjunction (which is a adjectival modifier) and a PluralNoun.
//NP3( PRP_DOLLAR_( their), IN( down), NNS( payments))
//(NP (PRP$ their) (IN down) (NNS payments))
NP_BAR -> amod_IN_NNS_Tail(IN,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Noun (which is a compound) and a Noun.
//NP3( CD( _DIGITS_), NN( pretax), NN( profit))
//(NP (CD 1988) (NN pretax) (NN profit))
NP_BAR -> compound_NN_NN_Tail(NNbasic,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of a SingularProperNounand a CardinalNumber (which is a numeric modifier). 
//NP3( DT( the), NNP( Reagan), CD( _SQ_DIGITS_s))
//(NP (DT the) (NNP Reagan) (CD '80s))
NP_BAR -> nummod_NNP_CD_Tail(NNP,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase End out of a Adjectiveand a Gerund|PresentParticipleVerb (which is a adjectival modifier). 
//NP3( DT( a), JJ( steady), VBG( ratcheting))
//(NP (DT a) (JJ steady) (VBG ratcheting))
NP_BAR -> amod_JJ_VBG_Tail(JJbasic,VBG)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a PastTenseVerb (which is a adjectival modifier) and a PluralNoun.
//NP3( NN( interbank), VBD( offered), NNS( rates))
//(NP (NN interbank) (VBD offered) (NNS rates))
NP_BAR -> amod_VBD_NNS_Tail(VBD,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Adjective (which is a adjectival modifier) and a Noun.
//NP3( CD( One), JJ( big), NN( reason))
//(NP (CD One) (JJ big) (NN reason))
NP_BAR -> amod_JJ_NN_Tail(JJbasic,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a SuperlativeAdjective (which is a adjectival modifier) and a Adverb.
//NP3( DT( the), JJS( largest), RB( newsweekly))
//(NP (DT the) (JJS largest) (RB newsweekly))
NP_BAR -> amod_JJS_RB_Tail(JJS,RBbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a PastParticipleVerb (which is a adjectival modifier) and a PluralNoun.
//NP3( CD( _DIGITS_COMMA_DIGITS_), VBN( enclosed), NNS( railcars))
//(NP (CD 1,000) (VBN enclosed) (NNS railcars))
NP_BAR -> amod_VBN_NNS_Tail(VBN,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of a Nounand a CardinalNumber (which is a numeric modifier). 
//NP3( DT( the), NN( top), CD( _DIGITS_))
//(NP (DT the) (NN top) (CD 10))
NP_BAR -> nummod_NN_CD_Tail(NNbasic,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a SingularProperNoun (which is a compound) and a PluralNoun.
//NP3( CD( _DIGITS_COMMA_DIGITS_), NNP( U_PERIOD_S_PERIOD_), NNS( households))
//(NP (CD 5,000) (NNP U.S.) (NNS households))
NP_BAR -> compound_NNP_NNS_Tail(NNP,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two SingularProperNoun-s.
//NP3( NNP( Greenville), PUNCT( _COMMA_), NNP( N_PERIOD_C_PERIOD_))
//(NP (NNP Greenville) (, ,) (NNP N.C.))
NP_BAR -> undependent_PUNCT_NNP_Tail(PUNCT,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a Determiner (which is a determiner) and a CardinalNumber.
//NP3( RB( just), DT( another), CD( one))
//(NP (RB just) (DT another) (CD one))
NP_BAR -> det_DT_CD_Tail(DT,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :det (d<dep>))", r_dep(?2))),?1)
[fourlang] ?2

//End of a NounPhrase out of a Adjective (which is a adjectival modifier) and a Adjective.
//NP3( DT( a), JJ( distant), JJ( third))
//(NP (DT a) (JJ distant) (JJ third))
NP_BAR -> amod_JJ_JJ_Tail(JJbasic,JJbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a CardinalNumber (which is a numeric modifier) and a CardinalNumber.
//NP3( DT( Some), CD( _DIGITS_PERIOD_DIGITS_), CD( million))
//(NP (DT Some) (CD 3.8) (CD million))
NP_BAR -> nummod_CD_CD_Tail(CD,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a PluralNoun (which is a compound) and a Noun.
//NP3( DT( an), NNS( appropriations), NN( bill))
//(NP (DT an) (NNS appropriations) (NN bill))
NP_BAR -> compound_NNS_NN_Tail(NNS,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of a PluralNounand a Adjective (which is a adjectival modifier). 
//NP3( CD( _DIGITS_), NNS( years), JJ( old))
//(NP (CD 59) (NNS years) (JJ old))
NP_BAR -> amod_NNS_JJ_Tail(NNS,JJbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a Gerund|PresentParticipleVerb (which is a adjectival modifier) and a Noun.
//NP3( DT( an), VBG( underlying), NN( investment))
//(NP (DT an) (VBG underlying) (NN investment))
NP_BAR -> amod_VBG_NN_Tail(VBG,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two Punctuation-s.
//NP3( DT( the), NNP( U_PERIOD_S_PERIOD_), PUNCT( _PERIOD_))
//(NP (DT the) (NNP U.S.) (. .))
NP_BAR -> undependent_NNP_PUNCT_Tail(NNP,PUNCT)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase End out of a ComparativeAdjectiveand a CardinalNumber (which is a numeric modifier). 
//NP3( DT( the), JJR( larger), CD( _DIGITS_))
//(NP (DT the) (JJR larger) (CD 767))
NP_BAR -> nummod_JJR_CD_Tail(JJR,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a Determiner (which is a determiner) and a PluralNoun.
//NP3( PDT( all), DT( the), NNS( answers))
//(NP (PDT all) (DT the) (NNS answers))
NP_BAR -> det_DT_NNS_Tail(DT,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :det (d<dep>))", r_dep(?2))),?1)
[fourlang] ?2

//End of a NounPhrase End out of two Adjective-s.
//NP3( JJ( good), CC( and), JJ( evil))
//(NP (JJ good) (CC and) (JJ evil))
NP_BAR -> undependent_CC_JJ_Tail(CC,JJbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase End out of two PluralNoun-s.
//NP3( DT( all), PUNCT( _SQ_SQ_), NNS( students))
//(NP (DT all) ('' '') (NNS students))
NP_BAR -> undependent_PUNCT_NNS_Tail(PUNCT,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a Gerund|PresentParticipleVerb (which is a adjectival modifier) and a PluralNoun.
//NP3( DT( all), VBG( trading), NNS( nations))
//(NP (DT all) (VBG trading) (NNS nations))
NP_BAR -> amod_VBG_NNS_Tail(VBG,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of a SingularProperNounand a PossessiveEnding (which is a case marking). 
//NP3( DT( a), NNP( Moody), POS( _SQ_s))
//(NP (DT a) (NNP Moody) (POS 's))
NP_BAR -> case_NNP_POS_Tail(NNP,POS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :case (d<dep>))", r_dep(?1))),?2)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root> :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?1))), r_dep1(?2)))

//End of a NounPhrase End out of a PluralNounand a PossessiveEnding (which is a case marking). 
//NP3( DT( a), NNS( screenwriters), POS( _SQ_))
//(NP (DT a) (NNS screenwriters) (POS '))
NP_BAR -> case_NNS_POS_Tail(NNS,POS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :case (d<dep>))", r_dep(?1))),?2)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root> :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?1))), r_dep1(?2)))

//End of a NounPhrase out of a SuperlativeAdjective (which is a adjectival modifier) and a Noun.
//NP3( DT( the), JJS( best), NN( position))
//(NP (DT the) (JJS best) (NN position))
NP_BAR -> amod_JJS_NN_Tail(JJS,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two Determiner-s.
//NP3( NN( part), CC( or), DT( all))
//(NP (NN part) (CC or) (DT all))
NP_BAR -> undependent_CC_DT_Tail(CC,DT)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a PluralNoun (which is a compound) and a PluralNoun.
//NP3( DT( any), NNS( securities), NNS( activities))
//(NP (DT any) (NNS securities) (NNS activities))
NP_BAR -> compound_NNS_NNS_Tail(NNS,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a PastParticipleVerb (which is a adjectival modifier) and a Noun.
//NP3( DT( an), VBN( accelerated), NN( investigation))
//(NP (DT an) (VBN accelerated) (NN investigation))
NP_BAR -> amod_VBN_NN_Tail(VBN,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Adjective (which is a adjectival modifier) and a PluralNoun.
//NP3( CD( _DIGITS_COMMA_DIGITS_COMMA_DIGITS_), JJ( common), NNS( shares))
//(NP (CD 1,050,000) (JJ common) (NNS shares))
NP_BAR -> amod_JJ_NNS_Tail(JJbasic,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two Punctuation-s.
//NP3( CD( _DIGITS_COLON_DIGITS_), RB( p_PERIOD_m), PUNCT( _PERIOD_))
//(NP (CD 1:30) (RB p.m) (. .))
NP_BAR -> undependent_RB_PUNCT_Tail(RBbasic,PUNCT)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a Determiner (which is a determiner) and a Noun.
//NP3( DT( all), DT( the), NN( hoopla))
//(NP (DT all) (DT the) (NN hoopla))
NP_BAR -> det_DT_NN_Tail(DT,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :det (d<dep>))", r_dep(?2))),?1)
[fourlang] ?2

//End of a NounPhrase End out of two Noun-s.
//NP3( DT( a), PUNCT( _IQ_IQ_), NN( mirror))
//(NP (DT a) (`` ``) (NN mirror))
NP_BAR -> undependent_PUNCT_NN_Tail(PUNCT,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase End out of a PluralProperNounand a PossessiveEnding (which is a case marking). 
//NP3( NNP( Sea), NNPS( Containers), POS( _SQ_))
//(NP (NNP Sea) (NNPS Containers) (POS '))
NP_BAR -> case_NNPS_POS_Tail(NNPS,POS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :case (d<dep>))", r_dep(?1))),?2)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root> :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?1))), r_dep1(?2)))

//End of a NounPhrase End out of a PluralNounand a Adverb (which is a adverbial modifier). 
//NP3( DT( the), NNS( markets), RB( here))
//(NP (DT the) (NNS markets) (RB here))
NP_BAR -> advmod_NNS_RB_Tail(NNS,RBbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :advmod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a Adjective (which is a adjectival modifier) and a SingularProperNoun.
//NP3( DT( a), JJ( mid_HYPHEN_size), NNP( Chevrolet))
//(NP (DT a) (JJ mid-size) (NNP Chevrolet))
NP_BAR -> amod_JJ_NNP_Tail(JJbasic,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Determiner (which is a determiner) and a Adjective.
//NP3( IN( about), DT( the), JJ( same))
//(NP (IN about) (DT the) (JJ same))
NP_BAR -> det_DT_JJ_Tail(DT,JJbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :det (d<dep>))", r_dep(?2))),?1)
[fourlang] ?2

//End of a NounPhrase End out of a Nounand a Adjective (which is a adjectival modifier). 
//NP3( DT( an), NN( intraday), JJ( low))
//(NP (DT an) (NN intraday) (JJ low))
NP_BAR -> amod_NN_JJ_Tail(NNbasic,JJbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase out of a CardinalNumber (which is a numeric modifier) and a PluralNoun.
//NP3( CD( _DIGITS_), CD( million), NNS( shares))
//(NP (CD 18) (CD million) (NNS shares))
NP_BAR -> nummod_CD_NNS_Tail(CD,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a CardinalNumber (which is a numeric modifier) and a SingularProperNoun.
//NP3( PRP_DOLLAR_( its), CD( _DIGITS_), NNP( Corton_HYPHEN_Charlemagne))
//(NP (PRP$ its) (CD 1987) (NNP Corton-Charlemagne))
NP_BAR -> nummod_CD_NNP_Tail(CD,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nummod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Gerund|PresentParticipleVerb (which is a adjectival modifier) and a SingularProperNoun.
//NP3( DT( the), VBG( leading), NNP( Sauternes))
//(NP (DT the) (VBG leading) (NNP Sauternes))
NP_BAR -> amod_VBG_NNP_Tail(VBG,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a ComparativeAdjective (which is a adjectival modifier) and a Noun.
//NP3( DT( a), JJR( better), NN( record))
//(NP (DT a) (JJR better) (NN record))
NP_BAR -> amod_JJR_NN_Tail(JJR,NNbasic)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a PastParticipleVerb (which is a adjectival modifier) and a CardinalNumber.
//NP3( DT( a), VBN( revised), CD( _DIGITS_PERIOD_DIGITS_))
//(NP (DT a) (VBN revised) (CD 116.3))
NP_BAR -> amod_VBN_CD_Tail(VBN,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a PossessivePronoun (which is a possessive nominal modifier) and a PluralNoun.
//NP3( PDT( all), PRP_DOLLAR_( his), NNS( apples))
//(NP (PDT all) (PRP$ his) (NNS apples))
NP_BAR -> nmod_COLON_poss_PRP_DOLLAR__NNS_Tail(PRP_DOLLAR_,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :nmod:poss (d<dep>))", r_dep(?2))),?1)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root>/HAS :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?2))), r_dep1(?1)))

//End of a NounPhrase out of a PluralProperNoun (which is a compound) and a SingularProperNoun.
//NP3( DT( the), NNPS( Writers), NNP( Guild))
//(NP (DT the) (NNPS Writers) (NNP Guild))
NP_BAR -> compound_NNPS_NNP_Tail(NNPS,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a CoordinatingConjunction (which is a coordinating conjunction) and a CardinalNumber.
//NP3( CD( _DIGITS_), CC( and), CD( _DIGITS_))
//(NP (CD 1985) (CC and) (CD 1986))
NP_BAR -> cc_CC_CD_Tail(CC,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :cc (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of a Nounand a 3rdPersonSingularPresentVerb (which is a unspecified dependency). 
//NP3( DT( the), NN( crystal), VBZ( changes))
//(NP (DT the) (NN crystal) (VBZ changes))
NP_BAR -> dep_NN_VBZ_Tail(NNbasic,VBZ)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :dep (d<dep>))", r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?1))),?2)

//End of a NounPhrase End out of a Nounand a PossessiveEnding (which is a case marking). 
//NP3( CD( one), NN( month), POS( _SQ_s))
//(NP (CD one) (NN month) (POS 's))
NP_BAR -> case_NN_POS_Tail(NNbasic,POS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :case (d<dep>))", r_dep(?1))),?2)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root> :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?1))), r_dep1(?2)))

//End of a NounPhrase out of a Noun (which is a unspecified dependency) and a ComparativeAdjective.
//NP3( DT( a), NN( year), JJR( earlier))
//(NP (DT a) (NN year) (JJR earlier))
NP_BAR -> dep_NN_JJR_Tail(NNbasic,JJR)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :dep (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a PrepositionOrSubordinatingConjunction (which is a adjectival modifier) and a SingularProperNoun.
//NP3( NNP( April), IN( through), NNP( June))
//(NP (NNP April) (IN through) (NNP June))
NP_BAR -> amod_IN_NNP_Tail(IN,NNP)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of two Punctuation-s.
//NP3( JJ( long), NNS( delays), PUNCT( _SQ_SQ_))
//(NP (JJ long) (NNS delays) ('' ''))
NP_BAR -> undependent_NNS_PUNCT_Tail(NNS,PUNCT)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] ?1
[fourlang] ?1

//End of a NounPhrase out of a Noun (which is a compound) and a PluralNoun.
//NP3( CD( _DIGITS_COMMA_DIGITS_), NN( parking), NNS( spaces))
//(NP (CD 10,000) (NN parking) (NNS spaces))
NP_BAR -> compound_NN_NNS_Tail(NNbasic,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :compound (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0_compound (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase End out of a CardinalNumberand a PossessiveEnding (which is a case marking). 
//NP3( JJ( fiscal), CD( _DIGITS_), POS( _SQ_s))
//(NP (JJ fiscal) (CD 1989) (POS 's))
NP_BAR -> case_CD_POS_Tail(CD,POS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :case (d<dep>))", r_dep(?1))),?2)
[fourlang] f_dep1(merge(f_dep2(merge("(r<root> :1 d1<dep1> :2 (d2<dep2>))", r_dep2(?1))), r_dep1(?2)))

//End of a NounPhrase out of a Adjective (which is a adjectival modifier) and a CardinalNumber.
//NP3( DT( A), JJ( medium_HYPHEN_sized), CD( one))
//(NP (DT A) (JJ medium-sized) (CD one))
NP_BAR -> amod_JJ_CD_Tail(JJbasic,CD)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a Adverb (which is a adverbial modifier) and a SuperlativeAdjective.
//NP3( DT( the), RB( very), JJS( least))
//(NP (DT the) (RB very) (JJS least))
NP_BAR -> advmod_RB_JJS_Tail(RBbasic,JJS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :advmod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)

//End of a NounPhrase out of a SuperlativeAdjective (which is a adjectival modifier) and a PluralNoun.
//NP3( DT( the), JJS( biggest), NNS( issuers))
//(NP (DT the) (JJS biggest) (NNS issuers))
NP_BAR -> amod_JJS_NNS_Tail(JJS,NNS)
[string] *(?1,?2)
[tree] NP3(*,?1,?2)
[ud] merge(f_dep(merge("(r<root> :amod (d<dep>))", r_dep(?2))),?1)
[fourlang] merge(f_dep(merge("(r<root> :0 (d<dep>))", r_dep(?2))),?1)


//TERMINALS
//TERMINALS

//Converters
//Converters

//Nouns
//Nouns

//basic
NN -> NNbasic_2_NN(NNbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//proper
NN -> NNP_2_NN(NNP)
[tree] ?1
[ud] ?1
[fourlang] ?1

//plural
NN -> NNS_2_NN(NNS)
[tree] ?1
[ud] ?1
[fourlang] ?1

//proper plural
NN -> NNPS_2_NN(NNPS)
[tree] ?1
[ud] ?1
[fourlang] ?1


//Adjectives
//Adjectives

//basic
JJ -> JJbasic_2_JJ(JJbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//comparative
JJ -> JJR_2_JJ(JJR)
[tree] ?1
[ud] ?1
[fourlang] ?1

//superlative
JJ -> JJS_2_JJ(JJS)
[tree] ?1
[ud] ?1
[fourlang] ?1


//Adverbs
//Adverbs

//basic
RB -> RBbasic_2_RB(RBbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//comparative
RB -> RBR_2_RB(RBR)
[tree] ?1
[ud] ?1
[fourlang] ?1

//superlative
RB -> RBS_2_RB(RBS)
[tree] ?1
[ud] ?1
[fourlang] ?1


//Verbs
//Verbs

//basic
VB -> VBbasic_2_VB(VBbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//past tense
VB -> VBD_2_VB(VBD)
[tree] ?1
[ud] ?1
[fourlang] ?1

//gerund or present participle
VB -> VBG_2_VB(VBG)
[tree] ?1
[ud] ?1
[fourlang] ?1

//past participle
VB -> VBN_2_VB(VBN)
[tree] ?1
[ud] ?1
[fourlang] ?1

//non-3rd person singular present
VB -> VBP_2_VB(VBP)
[tree] ?1
[ud] ?1
[fourlang] ?1

//3rd person singular present
VB -> VBZ_2_VB(VBZ)
[tree] ?1
[ud] ?1
[fourlang] ?1



//Dictionary
//Dictionary

NN -> spending_NN
[string] spending
[tree] NN(spending)
[ud] "(spending<root> / spending)"
[fourlang] "(spending<root> / spending)"

NNS -> cents_NNS
[string] cents
[tree] NNS(cents)
[ud] "(cents<root> / cents)"
[fourlang] "(cents<root> / cents)"

JJ -> spectacular_JJ
[string] spectacular
[tree] JJ(spectacular)
[ud] "(spectacular<root> / spectacular)"
[fourlang] "(spectacular<root> / spectacular)"

NNS -> sweatshirts_NNS
[string] sweatshirts
[tree] NNS(sweatshirts)
[ud] "(sweatshirts<root> / sweatshirts)"
[fourlang] "(sweatshirts<root> / sweatshirts)"

NN -> assistance_NN
[string] assistance
[tree] NN(assistance)
[ud] "(assistance<root> / assistance)"
[fourlang] "(assistance<root> / assistance)"

RB -> entirely_RB
[string] entirely
[tree] RB(entirely)
[ud] "(entirely<root> / entirely)"
[fourlang] "(entirely<root> / entirely)"

NNP -> Michael_NNP
[string] Michael
[tree] NNP(Michael)
[ud] "(Michael<root> / Michael)"
[fourlang] "(Michael<root> / Michael)"

RB -> everywhere_RB
[string] everywhere
[tree] RB(everywhere)
[ud] "(everywhere<root> / everywhere)"
[fourlang] "(everywhere<root> / everywhere)"

NNS -> ratings_NNS
[string] ratings
[tree] NNS(ratings)
[ud] "(ratings<root> / ratings)"
[fourlang] "(ratings<root> / ratings)"

NN -> allocation_NN
[string] allocation
[tree] NN(allocation)
[ud] "(allocation<root> / allocation)"
[fourlang] "(allocation<root> / allocation)"

NNP -> Walker_NNP
[string] Walker
[tree] NNP(Walker)
[ud] "(Walker<root> / Walker)"
[fourlang] "(Walker<root> / Walker)"

NNS -> stars_NNS
[string] stars
[tree] NNS(stars)
[ud] "(stars<root> / stars)"
[fourlang] "(stars<root> / stars)"

VB -> turn_VB
[string] turn
[tree] VB(turn)
[ud] "(turn<root> / turn)"
[fourlang] "(turn<root> / turn)"

NN -> lawyer_NN
[string] lawyer
[tree] NN(lawyer)
[ud] "(lawyer<root> / lawyer)"
[fourlang] "(lawyer<root> / lawyer)"

RP -> off_RP
[string] off
[tree] RP(off)
[ud] "(off<root> / off)"
[fourlang] "(off<root> / off)"

NN -> grant_NN
[string] grant
[tree] NN(grant)
[ud] "(grant<root> / grant)"
[fourlang] "(grant<root> / grant)"

NNS -> patterns_NNS
[string] patterns
[tree] NNS(patterns)
[ud] "(patterns<root> / patterns)"
[fourlang] "(patterns<root> / patterns)"

JJ -> congressional_JJ
[string] congressional
[tree] JJ(congressional)
[ud] "(congressional<root> / congressional)"
[fourlang] "(congressional<root> / congressional)"

NN -> change_NN
[string] change
[tree] NN(change)
[ud] "(change<root> / change)"
[fourlang] "(change<root> / change)"

NNP -> School_NNP
[string] School
[tree] NNP(School)
[ud] "(School<root> / School)"
[fourlang] "(School<root> / School)"

JJ -> peripheral_JJ
[string] peripheral
[tree] JJ(peripheral)
[ud] "(peripheral<root> / peripheral)"
[fourlang] "(peripheral<root> / peripheral)"

NN -> household_NN
[string] household
[tree] NN(household)
[ud] "(household<root> / household)"
[fourlang] "(household<root> / household)"

NN -> supply_NN
[string] supply
[tree] NN(supply)
[ud] "(supply<root> / supply)"
[fourlang] "(supply<root> / supply)"

NNP -> Takuma_NNP
[string] Takuma
[tree] NNP(Takuma)
[ud] "(Takuma<root> / Takuma)"
[fourlang] "(Takuma<root> / Takuma)"

NNS -> scandals_NNS
[string] scandals
[tree] NNS(scandals)
[ud] "(scandals<root> / scandals)"
[fourlang] "(scandals<root> / scandals)"

NN -> actor_NN
[string] actor
[tree] NN(actor)
[ud] "(actor<root> / actor)"
[fourlang] "(actor<root> / actor)"

NNP -> Marc_NNP
[string] Marc
[tree] NNP(Marc)
[ud] "(Marc<root> / Marc)"
[fourlang] "(Marc<root> / Marc)"

NN -> cocoa_NN
[string] cocoa
[tree] NN(cocoa)
[ud] "(cocoa<root> / cocoa)"
[fourlang] "(cocoa<root> / cocoa)"

NNS -> boyfriends_NNS
[string] boyfriends
[tree] NNS(boyfriends)
[ud] "(boyfriends<root> / boyfriends)"
[fourlang] "(boyfriends<root> / boyfriends)"

NN -> Asia_NN
[string] Asia
[tree] NN(Asia)
[ud] "(Asia<root> / Asia)"
[fourlang] "(Asia<root> / Asia)"

NNP -> Shangkun_NNP
[string] Shangkun
[tree] NNP(Shangkun)
[ud] "(Shangkun<root> / Shangkun)"
[fourlang] "(Shangkun<root> / Shangkun)"

NN -> high_NN
[string] high
[tree] NN(high)
[ud] "(high<root> / high)"
[fourlang] "(high<root> / high)"

NN -> Midwest_NN
[string] Midwest
[tree] NN(Midwest)
[ud] "(Midwest<root> / Midwest)"
[fourlang] "(Midwest<root> / Midwest)"

VBG -> sacrificing_VBG
[string] sacrificing
[tree] VBG(sacrificing)
[ud] "(sacrificing<root> / sacrificing)"
[fourlang] "(sacrificing<root> / sacrificing)"

NNP -> Lindner_NNP
[string] Lindner
[tree] NNP(Lindner)
[ud] "(Lindner<root> / Lindner)"
[fourlang] "(Lindner<root> / Lindner)"

NN -> spokesman_NN
[string] spokesman
[tree] NN(spokesman)
[ud] "(spokesman<root> / spokesman)"
[fourlang] "(spokesman<root> / spokesman)"

NN -> age_NN
[string] age
[tree] NN(age)
[ud] "(age<root> / age)"
[fourlang] "(age<root> / age)"

NNP -> Explorer_NNP
[string] Explorer
[tree] NNP(Explorer)
[ud] "(Explorer<root> / Explorer)"
[fourlang] "(Explorer<root> / Explorer)"

NN -> Spirit_NN
[string] Spirit
[tree] NN(Spirit)
[ud] "(Spirit<root> / Spirit)"
[fourlang] "(Spirit<root> / Spirit)"

NNP -> Montedison_NNP
[string] Montedison
[tree] NNP(Montedison)
[ud] "(Montedison<root> / Montedison)"
[fourlang] "(Montedison<root> / Montedison)"

VB -> ship_VB
[string] ship
[tree] VB(ship)
[ud] "(ship<root> / ship)"
[fourlang] "(ship<root> / ship)"

NNP -> Melamed_NNP
[string] Melamed
[tree] NNP(Melamed)
[ud] "(Melamed<root> / Melamed)"
[fourlang] "(Melamed<root> / Melamed)"

NNP -> Hill_NNP
[string] Hill
[tree] NNP(Hill)
[ud] "(Hill<root> / Hill)"
[fourlang] "(Hill<root> / Hill)"

NNS -> damages_NNS
[string] damages
[tree] NNS(damages)
[ud] "(damages<root> / damages)"
[fourlang] "(damages<root> / damages)"

NNS -> units_NNS
[string] units
[tree] NNS(units)
[ud] "(units<root> / units)"
[fourlang] "(units<root> / units)"

NNP -> Chinese_NNP
[string] Chinese
[tree] NNP(Chinese)
[ud] "(Chinese<root> / Chinese)"
[fourlang] "(Chinese<root> / Chinese)"

NNS -> issuers_NNS
[string] issuers
[tree] NNS(issuers)
[ud] "(issuers<root> / issuers)"
[fourlang] "(issuers<root> / issuers)"

NNP -> Price_NNP
[string] Price
[tree] NNP(Price)
[ud] "(Price<root> / Price)"
[fourlang] "(Price<root> / Price)"

NN -> idea_NN
[string] idea
[tree] NN(idea)
[ud] "(idea<root> / idea)"
[fourlang] "(idea<root> / idea)"

VBN -> run_VBN
[string] run
[tree] VBN(run)
[ud] "(run<root> / run)"
[fourlang] "(run<root> / run)"

NN -> institute_NN
[string] institute
[tree] NN(institute)
[ud] "(institute<root> / institute)"
[fourlang] "(institute<root> / institute)"

NNP -> Japanese_NNP
[string] Japanese
[tree] NNP(Japanese)
[ud] "(Japanese<root> / Japanese)"
[fourlang] "(Japanese<root> / Japanese)"

NNP -> MarieHYPHENLouise_NNP
[string] MarieHYPHENLouise
[tree] NNP(MarieHYPHENLouise)
[ud] "(MarieHYPHENLouise<root> / MarieHYPHENLouise)"
[fourlang] "(MarieHYPHENLouise<root> / MarieHYPHENLouise)"

_LRB_ -> HYPHENLRBHYPHEN__LRB_
[string] HYPHENLRBHYPHEN
[tree] _LRB_(HYPHENLRBHYPHEN)
[ud] "(HYPHENLRBHYPHEN<root> / HYPHENLRBHYPHEN)"
[fourlang] "(HYPHENLRBHYPHEN<root> / HYPHENLRBHYPHEN)"

JJ -> replete_JJ
[string] replete
[tree] JJ(replete)
[ud] "(replete<root> / replete)"
[fourlang] "(replete<root> / replete)"

NNP -> Patents_NNP
[string] Patents
[tree] NNP(Patents)
[ud] "(Patents<root> / Patents)"
[fourlang] "(Patents<root> / Patents)"

JJ -> bold_JJ
[string] bold
[tree] JJ(bold)
[ud] "(bold<root> / bold)"
[fourlang] "(bold<root> / bold)"

NN -> liquidity_NN
[string] liquidity
[tree] NN(liquidity)
[ud] "(liquidity<root> / liquidity)"
[fourlang] "(liquidity<root> / liquidity)"

NN -> summer_NN
[string] summer
[tree] NN(summer)
[ud] "(summer<root> / summer)"
[fourlang] "(summer<root> / summer)"

VBN -> fixed_VBN
[string] fixed
[tree] VBN(fixed)
[ud] "(fixed<root> / fixed)"
[fourlang] "(fixed<root> / fixed)"

NN -> wealth_NN
[string] wealth
[tree] NN(wealth)
[ud] "(wealth<root> / wealth)"
[fourlang] "(wealth<root> / wealth)"

VBG -> including_VBG
[string] including
[tree] VBG(including)
[ud] "(including<root> / including)"
[fourlang] "(including<root> / including)"

JJ -> working_JJ
[string] working
[tree] JJ(working)
[ud] "(working<root> / working)"
[fourlang] "(working<root> / working)"

NN -> deterioration_NN
[string] deterioration
[tree] NN(deterioration)
[ud] "(deterioration<root> / deterioration)"
[fourlang] "(deterioration<root> / deterioration)"

NNS -> particulars_NNS
[string] particulars
[tree] NNS(particulars)
[ud] "(particulars<root> / particulars)"
[fourlang] "(particulars<root> / particulars)"

NNP -> Copperweld_NNP
[string] Copperweld
[tree] NNP(Copperweld)
[ud] "(Copperweld<root> / Copperweld)"
[fourlang] "(Copperweld<root> / Copperweld)"

VBP -> start_VBP
[string] start
[tree] VBP(start)
[ud] "(start<root> / start)"
[fourlang] "(start<root> / start)"

NN -> audit_NN
[string] audit
[tree] NN(audit)
[ud] "(audit<root> / audit)"
[fourlang] "(audit<root> / audit)"

NNP -> Dynamics_NNP
[string] Dynamics
[tree] NNP(Dynamics)
[ud] "(Dynamics<root> / Dynamics)"
[fourlang] "(Dynamics<root> / Dynamics)"

NNP -> Michio_NNP
[string] Michio
[tree] NNP(Michio)
[ud] "(Michio<root> / Michio)"
[fourlang] "(Michio<root> / Michio)"

JJ -> concrete_JJ
[string] concrete
[tree] JJ(concrete)
[ud] "(concrete<root> / concrete)"
[fourlang] "(concrete<root> / concrete)"

NNS -> carriers_NNS
[string] carriers
[tree] NNS(carriers)
[ud] "(carriers<root> / carriers)"
[fourlang] "(carriers<root> / carriers)"

IN -> about_IN
[string] about
[tree] IN(about)
[ud] "(about<root> / about)"
[fourlang] "(about<root> / about)"

NNP -> Council_NNP
[string] Council
[tree] NNP(Council)
[ud] "(Council<root> / Council)"
[fourlang] "(Council<root> / Council)"

NNS -> classifications_NNS
[string] classifications
[tree] NNS(classifications)
[ud] "(classifications<root> / classifications)"
[fourlang] "(classifications<root> / classifications)"

NN -> fund_NN
[string] fund
[tree] NN(fund)
[ud] "(fund<root> / fund)"
[fourlang] "(fund<root> / fund)"

NNP -> Wayland_NNP
[string] Wayland
[tree] NNP(Wayland)
[ud] "(Wayland<root> / Wayland)"
[fourlang] "(Wayland<root> / Wayland)"

RB -> studiously_RB
[string] studiously
[tree] RB(studiously)
[ud] "(studiously<root> / studiously)"
[fourlang] "(studiously<root> / studiously)"

NNP -> Elizabeth_NNP
[string] Elizabeth
[tree] NNP(Elizabeth)
[ud] "(Elizabeth<root> / Elizabeth)"
[fourlang] "(Elizabeth<root> / Elizabeth)"

NNS -> capitalHYPHENgains_NNS
[string] capitalHYPHENgains
[tree] NNS(capitalHYPHENgains)
[ud] "(capitalHYPHENgains<root> / capitalHYPHENgains)"
[fourlang] "(capitalHYPHENgains<root> / capitalHYPHENgains)"

NNP -> Christmas_NNP
[string] Christmas
[tree] NNP(Christmas)
[ud] "(Christmas<root> / Christmas)"
[fourlang] "(Christmas<root> / Christmas)"

RP -> down_RP
[string] down
[tree] RP(down)
[ud] "(down<root> / down)"
[fourlang] "(down<root> / down)"

NNS -> teams_NNS
[string] teams
[tree] NNS(teams)
[ud] "(teams<root> / teams)"
[fourlang] "(teams<root> / teams)"

NN -> merchant_NN
[string] merchant
[tree] NN(merchant)
[ud] "(merchant<root> / merchant)"
[fourlang] "(merchant<root> / merchant)"

NNS -> credits_NNS
[string] credits
[tree] NNS(credits)
[ud] "(credits<root> / credits)"
[fourlang] "(credits<root> / credits)"

RB -> just_RB
[string] just
[tree] RB(just)
[ud] "(just<root> / just)"
[fourlang] "(just<root> / just)"

NN -> commission_NN
[string] commission
[tree] NN(commission)
[ud] "(commission<root> / commission)"
[fourlang] "(commission<root> / commission)"

NN -> SETL_NN
[string] SETL
[tree] NN(SETL)
[ud] "(SETL<root> / SETL)"
[fourlang] "(SETL<root> / SETL)"

NN -> trouble_NN
[string] trouble
[tree] NN(trouble)
[ud] "(trouble<root> / trouble)"
[fourlang] "(trouble<root> / trouble)"

NN -> average_NN
[string] average
[tree] NN(average)
[ud] "(average<root> / average)"
[fourlang] "(average<root> / average)"

NN -> reporting_NN
[string] reporting
[tree] NN(reporting)
[ud] "(reporting<root> / reporting)"
[fourlang] "(reporting<root> / reporting)"

NN -> watch_NN
[string] watch
[tree] NN(watch)
[ud] "(watch<root> / watch)"
[fourlang] "(watch<root> / watch)"

NNS -> bottles_NNS
[string] bottles
[tree] NNS(bottles)
[ud] "(bottles<root> / bottles)"
[fourlang] "(bottles<root> / bottles)"

JJ -> foreign_JJ
[string] foreign
[tree] JJ(foreign)
[ud] "(foreign<root> / foreign)"
[fourlang] "(foreign<root> / foreign)"

NN -> store_NN
[string] store
[tree] NN(store)
[ud] "(store<root> / store)"
[fourlang] "(store<root> / store)"

NNP -> Trade_NNP
[string] Trade
[tree] NNP(Trade)
[ud] "(Trade<root> / Trade)"
[fourlang] "(Trade<root> / Trade)"

NNS -> kinds_NNS
[string] kinds
[tree] NNS(kinds)
[ud] "(kinds<root> / kinds)"
[fourlang] "(kinds<root> / kinds)"

NN -> host_NN
[string] host
[tree] NN(host)
[ud] "(host<root> / host)"
[fourlang] "(host<root> / host)"

JJ -> exercisable_JJ
[string] exercisable
[tree] JJ(exercisable)
[ud] "(exercisable<root> / exercisable)"
[fourlang] "(exercisable<root> / exercisable)"

JJ -> DIGITDIGITHYPHENpoint_JJ
[string] DIGITDIGITHYPHENpoint
[tree] JJ(DIGITDIGITHYPHENpoint)
[ud] "(DIGITDIGITHYPHENpoint<root> / DIGITDIGITHYPHENpoint)"
[fourlang] "(DIGITDIGITHYPHENpoint<root> / DIGITDIGITHYPHENpoint)"

RB -> radically_RB
[string] radically
[tree] RB(radically)
[ud] "(radically<root> / radically)"
[fourlang] "(radically<root> / radically)"

NNP -> poor_NNP
[string] poor
[tree] NNP(poor)
[ud] "(poor<root> / poor)"
[fourlang] "(poor<root> / poor)"

NN -> Dollar_NN
[string] Dollar
[tree] NN(Dollar)
[ud] "(Dollar<root> / Dollar)"
[fourlang] "(Dollar<root> / Dollar)"

NNP -> Frenzy_NNP
[string] Frenzy
[tree] NNP(Frenzy)
[ud] "(Frenzy<root> / Frenzy)"
[fourlang] "(Frenzy<root> / Frenzy)"

NNP -> Market_NNP
[string] Market
[tree] NNP(Market)
[ud] "(Market<root> / Market)"
[fourlang] "(Market<root> / Market)"

NN -> doctorate_NN
[string] doctorate
[tree] NN(doctorate)
[ud] "(doctorate<root> / doctorate)"
[fourlang] "(doctorate<root> / doctorate)"

VBG -> violating_VBG
[string] violating
[tree] VBG(violating)
[ud] "(violating<root> / violating)"
[fourlang] "(violating<root> / violating)"

VB -> select_VB
[string] select
[tree] VB(select)
[ud] "(select<root> / select)"
[fourlang] "(select<root> / select)"

JJ -> Preliminary_JJ
[string] Preliminary
[tree] JJ(Preliminary)
[ud] "(Preliminary<root> / Preliminary)"
[fourlang] "(Preliminary<root> / Preliminary)"

NN -> pact_NN
[string] pact
[tree] NN(pact)
[ud] "(pact<root> / pact)"
[fourlang] "(pact<root> / pact)"

JJ -> steady_JJ
[string] steady
[tree] JJ(steady)
[ud] "(steady<root> / steady)"
[fourlang] "(steady<root> / steady)"

VBN -> taken_VBN
[string] taken
[tree] VBN(taken)
[ud] "(taken<root> / taken)"
[fourlang] "(taken<root> / taken)"

NNS -> reasons_NNS
[string] reasons
[tree] NNS(reasons)
[ud] "(reasons<root> / reasons)"
[fourlang] "(reasons<root> / reasons)"

NNS -> states_NNS
[string] states
[tree] NNS(states)
[ud] "(states<root> / states)"
[fourlang] "(states<root> / states)"

NN -> initiative_NN
[string] initiative
[tree] NN(initiative)
[ud] "(initiative<root> / initiative)"
[fourlang] "(initiative<root> / initiative)"

NN -> demise_NN
[string] demise
[tree] NN(demise)
[ud] "(demise<root> / demise)"
[fourlang] "(demise<root> / demise)"

NNP -> DecPERIOD_NNP
[string] DecPERIOD
[tree] NNP(DecPERIOD)
[ud] "(DecPERIOD<root> / DecPERIOD)"
[fourlang] "(DecPERIOD<root> / DecPERIOD)"

NNS -> releases_NNS
[string] releases
[tree] NNS(releases)
[ud] "(releases<root> / releases)"
[fourlang] "(releases<root> / releases)"

JJ -> partial_JJ
[string] partial
[tree] JJ(partial)
[ud] "(partial<root> / partial)"
[fourlang] "(partial<root> / partial)"

NN -> reason_NN
[string] reason
[tree] NN(reason)
[ud] "(reason<root> / reason)"
[fourlang] "(reason<root> / reason)"

VBD -> lost_VBD
[string] lost
[tree] VBD(lost)
[ud] "(lost<root> / lost)"
[fourlang] "(lost<root> / lost)"

NN -> progress_NN
[string] progress
[tree] NN(progress)
[ud] "(progress<root> / progress)"
[fourlang] "(progress<root> / progress)"

NN -> survey_NN
[string] survey
[tree] NN(survey)
[ud] "(survey<root> / survey)"
[fourlang] "(survey<root> / survey)"

JJ -> criminal_JJ
[string] criminal
[tree] JJ(criminal)
[ud] "(criminal<root> / criminal)"
[fourlang] "(criminal<root> / criminal)"

JJ -> AmericanHYPHENstyle_JJ
[string] AmericanHYPHENstyle
[tree] JJ(AmericanHYPHENstyle)
[ud] "(AmericanHYPHENstyle<root> / AmericanHYPHENstyle)"
[fourlang] "(AmericanHYPHENstyle<root> / AmericanHYPHENstyle)"

NNS -> provisions_NNS
[string] provisions
[tree] NNS(provisions)
[ud] "(provisions<root> / provisions)"
[fourlang] "(provisions<root> / provisions)"

IN -> via_IN
[string] via
[tree] IN(via)
[ud] "(via<root> / via)"
[fourlang] "(via<root> / via)"

NNP -> Jaffray_NNP
[string] Jaffray
[tree] NNP(Jaffray)
[ud] "(Jaffray<root> / Jaffray)"
[fourlang] "(Jaffray<root> / Jaffray)"

NN -> quarter_NN
[string] quarter
[tree] NN(quarter)
[ud] "(quarter<root> / quarter)"
[fourlang] "(quarter<root> / quarter)"

NN -> community_NN
[string] community
[tree] NN(community)
[ud] "(community<root> / community)"
[fourlang] "(community<root> / community)"

NNP -> Vitulli_NNP
[string] Vitulli
[tree] NNP(Vitulli)
[ud] "(Vitulli<root> / Vitulli)"
[fourlang] "(Vitulli<root> / Vitulli)"

NN -> profit_NN
[string] profit
[tree] NN(profit)
[ud] "(profit<root> / profit)"
[fourlang] "(profit<root> / profit)"

NNP -> Disease_NNP
[string] Disease
[tree] NNP(Disease)
[ud] "(Disease<root> / Disease)"
[fourlang] "(Disease<root> / Disease)"

NNP -> Holding_NNP
[string] Holding
[tree] NNP(Holding)
[ud] "(Holding<root> / Holding)"
[fourlang] "(Holding<root> / Holding)"

NN -> standard_NN
[string] standard
[tree] NN(standard)
[ud] "(standard<root> / standard)"
[fourlang] "(standard<root> / standard)"

NNP -> Alleghany_NNP
[string] Alleghany
[tree] NNP(Alleghany)
[ud] "(Alleghany<root> / Alleghany)"
[fourlang] "(Alleghany<root> / Alleghany)"

NNP -> Gerald_NNP
[string] Gerald
[tree] NNP(Gerald)
[ud] "(Gerald<root> / Gerald)"
[fourlang] "(Gerald<root> / Gerald)"

VBN -> needed_VBN
[string] needed
[tree] VBN(needed)
[ud] "(needed<root> / needed)"
[fourlang] "(needed<root> / needed)"

NNP -> Iowa_NNP
[string] Iowa
[tree] NNP(Iowa)
[ud] "(Iowa<root> / Iowa)"
[fourlang] "(Iowa<root> / Iowa)"

NNP -> Kangyo_NNP
[string] Kangyo
[tree] NNP(Kangyo)
[ud] "(Kangyo<root> / Kangyo)"
[fourlang] "(Kangyo<root> / Kangyo)"

NNP -> Fantasy_NNP
[string] Fantasy
[tree] NNP(Fantasy)
[ud] "(Fantasy<root> / Fantasy)"
[fourlang] "(Fantasy<root> / Fantasy)"

NN -> sociology_NN
[string] sociology
[tree] NN(sociology)
[ud] "(sociology<root> / sociology)"
[fourlang] "(sociology<root> / sociology)"

VB -> buy_VB
[string] buy
[tree] VB(buy)
[ud] "(buy<root> / buy)"
[fourlang] "(buy<root> / buy)"

NNS -> lawmakers_NNS
[string] lawmakers
[tree] NNS(lawmakers)
[ud] "(lawmakers<root> / lawmakers)"
[fourlang] "(lawmakers<root> / lawmakers)"

NNP -> Social_NNP
[string] Social
[tree] NNP(Social)
[ud] "(Social<root> / Social)"
[fourlang] "(Social<root> / Social)"

VBD -> loved_VBD
[string] loved
[tree] VBD(loved)
[ud] "(loved<root> / loved)"
[fourlang] "(loved<root> / loved)"

NNP -> GeorgiaHYPHENPacific_NNP
[string] GeorgiaHYPHENPacific
[tree] NNP(GeorgiaHYPHENPacific)
[ud] "(GeorgiaHYPHENPacific<root> / GeorgiaHYPHENPacific)"
[fourlang] "(GeorgiaHYPHENPacific<root> / GeorgiaHYPHENPacific)"

NNP -> BTR_NNP
[string] BTR
[tree] NNP(BTR)
[ud] "(BTR<root> / BTR)"
[fourlang] "(BTR<root> / BTR)"

NN -> camera_NN
[string] camera
[tree] NN(camera)
[ud] "(camera<root> / camera)"
[fourlang] "(camera<root> / camera)"

JJ -> chief_JJ
[string] chief
[tree] JJ(chief)
[ud] "(chief<root> / chief)"
[fourlang] "(chief<root> / chief)"

JJ -> annual_JJ
[string] annual
[tree] JJ(annual)
[ud] "(annual<root> / annual)"
[fourlang] "(annual<root> / annual)"

NN -> measure_NN
[string] measure
[tree] NN(measure)
[ud] "(measure<root> / measure)"
[fourlang] "(measure<root> / measure)"

NNP -> Treasury_NNP
[string] Treasury
[tree] NNP(Treasury)
[ud] "(Treasury<root> / Treasury)"
[fourlang] "(Treasury<root> / Treasury)"

VBD -> showed_VBD
[string] showed
[tree] VBD(showed)
[ud] "(showed<root> / showed)"
[fourlang] "(showed<root> / showed)"

NN -> equivalent_NN
[string] equivalent
[tree] NN(equivalent)
[ud] "(equivalent<root> / equivalent)"
[fourlang] "(equivalent<root> / equivalent)"

NN -> stuff_NN
[string] stuff
[tree] NN(stuff)
[ud] "(stuff<root> / stuff)"
[fourlang] "(stuff<root> / stuff)"

NNS -> francs_NNS
[string] francs
[tree] NNS(francs)
[ud] "(francs<root> / francs)"
[fourlang] "(francs<root> / francs)"

JJ -> breezy_JJ
[string] breezy
[tree] JJ(breezy)
[ud] "(breezy<root> / breezy)"
[fourlang] "(breezy<root> / breezy)"

NN -> problem_NN
[string] problem
[tree] NN(problem)
[ud] "(problem<root> / problem)"
[fourlang] "(problem<root> / problem)"

NNPS -> Articles_NNPS
[string] Articles
[tree] NNPS(Articles)
[ud] "(Articles<root> / Articles)"
[fourlang] "(Articles<root> / Articles)"

NN -> jam_NN
[string] jam
[tree] NN(jam)
[ud] "(jam<root> / jam)"
[fourlang] "(jam<root> / jam)"

NNP -> LONDON_NNP
[string] LONDON
[tree] NNP(LONDON)
[ud] "(LONDON<root> / LONDON)"
[fourlang] "(LONDON<root> / LONDON)"

NNP -> Daiwa_NNP
[string] Daiwa
[tree] NNP(Daiwa)
[ud] "(Daiwa<root> / Daiwa)"
[fourlang] "(Daiwa<root> / Daiwa)"

JJ -> Comprehensive_JJ
[string] Comprehensive
[tree] JJ(Comprehensive)
[ud] "(Comprehensive<root> / Comprehensive)"
[fourlang] "(Comprehensive<root> / Comprehensive)"

NNP -> Calif_NNP
[string] Calif
[tree] NNP(Calif)
[ud] "(Calif<root> / Calif)"
[fourlang] "(Calif<root> / Calif)"

NNS -> publicHYPHENrelations_NNS
[string] publicHYPHENrelations
[tree] NNS(publicHYPHENrelations)
[ud] "(publicHYPHENrelations<root> / publicHYPHENrelations)"
[fourlang] "(publicHYPHENrelations<root> / publicHYPHENrelations)"

NNP -> Lynch_NNP
[string] Lynch
[tree] NNP(Lynch)
[ud] "(Lynch<root> / Lynch)"
[fourlang] "(Lynch<root> / Lynch)"

NNP -> Guinea_NNP
[string] Guinea
[tree] NNP(Guinea)
[ud] "(Guinea<root> / Guinea)"
[fourlang] "(Guinea<root> / Guinea)"

JJS -> most_JJS
[string] most
[tree] JJS(most)
[ud] "(most<root> / most)"
[fourlang] "(most<root> / most)"

JJ -> wineHYPHENbuying_JJ
[string] wineHYPHENbuying
[tree] JJ(wineHYPHENbuying)
[ud] "(wineHYPHENbuying<root> / wineHYPHENbuying)"
[fourlang] "(wineHYPHENbuying<root> / wineHYPHENbuying)"

JJR -> larger_JJR
[string] larger
[tree] JJR(larger)
[ud] "(larger<root> / larger)"
[fourlang] "(larger<root> / larger)"

JJ -> nervous_JJ
[string] nervous
[tree] JJ(nervous)
[ud] "(nervous<root> / nervous)"
[fourlang] "(nervous<root> / nervous)"

JJ -> alleged_JJ
[string] alleged
[tree] JJ(alleged)
[ud] "(alleged<root> / alleged)"
[fourlang] "(alleged<root> / alleged)"

NN -> sheet_NN
[string] sheet
[tree] NN(sheet)
[ud] "(sheet<root> / sheet)"
[fourlang] "(sheet<root> / sheet)"

NNP -> Medicine_NNP
[string] Medicine
[tree] NNP(Medicine)
[ud] "(Medicine<root> / Medicine)"
[fourlang] "(Medicine<root> / Medicine)"

NNP -> Bailey_NNP
[string] Bailey
[tree] NNP(Bailey)
[ud] "(Bailey<root> / Bailey)"
[fourlang] "(Bailey<root> / Bailey)"

NNP -> Rowe_NNP
[string] Rowe
[tree] NNP(Rowe)
[ud] "(Rowe<root> / Rowe)"
[fourlang] "(Rowe<root> / Rowe)"

NNS -> spaces_NNS
[string] spaces
[tree] NNS(spaces)
[ud] "(spaces<root> / spaces)"
[fourlang] "(spaces<root> / spaces)"

NN -> corn_NN
[string] corn
[tree] NN(corn)
[ud] "(corn<root> / corn)"
[fourlang] "(corn<root> / corn)"

NNS -> revelations_NNS
[string] revelations
[tree] NNS(revelations)
[ud] "(revelations<root> / revelations)"
[fourlang] "(revelations<root> / revelations)"

VBN -> aimed_VBN
[string] aimed
[tree] VBN(aimed)
[ud] "(aimed<root> / aimed)"
[fourlang] "(aimed<root> / aimed)"

NNP -> NTG_NNP
[string] NTG
[tree] NNP(NTG)
[ud] "(NTG<root> / NTG)"
[fourlang] "(NTG<root> / NTG)"

JJ -> citizenHYPHENsparked_JJ
[string] citizenHYPHENsparked
[tree] JJ(citizenHYPHENsparked)
[ud] "(citizenHYPHENsparked<root> / citizenHYPHENsparked)"
[fourlang] "(citizenHYPHENsparked<root> / citizenHYPHENsparked)"

NN -> freedom_NN
[string] freedom
[tree] NN(freedom)
[ud] "(freedom<root> / freedom)"
[fourlang] "(freedom<root> / freedom)"

RB -> little_RB
[string] little
[tree] RB(little)
[ud] "(little<root> / little)"
[fourlang] "(little<root> / little)"

NN -> youth_NN
[string] youth
[tree] NN(youth)
[ud] "(youth<root> / youth)"
[fourlang] "(youth<root> / youth)"

NNP -> Toronto_NNP
[string] Toronto
[tree] NNP(Toronto)
[ud] "(Toronto<root> / Toronto)"
[fourlang] "(Toronto<root> / Toronto)"

NNP -> Control_NNP
[string] Control
[tree] NNP(Control)
[ud] "(Control<root> / Control)"
[fourlang] "(Control<root> / Control)"

NNP -> Otero_NNP
[string] Otero
[tree] NNP(Otero)
[ud] "(Otero<root> / Otero)"
[fourlang] "(Otero<root> / Otero)"

NN -> cataract_NN
[string] cataract
[tree] NN(cataract)
[ud] "(cataract<root> / cataract)"
[fourlang] "(cataract<root> / cataract)"

NN -> bill_NN
[string] bill
[tree] NN(bill)
[ud] "(bill<root> / bill)"
[fourlang] "(bill<root> / bill)"

RP -> on_RP
[string] on
[tree] RP(on)
[ud] "(on<root> / on)"
[fourlang] "(on<root> / on)"

CC -> nor_CC
[string] nor
[tree] CC(nor)
[ud] "(nor<root> / nor)"
[fourlang] "(nor<root> / nor)"

NNP -> RepPERIOD_NNP
[string] RepPERIOD
[tree] NNP(RepPERIOD)
[ud] "(RepPERIOD<root> / RepPERIOD)"
[fourlang] "(RepPERIOD<root> / RepPERIOD)"

NNP -> Henry_NNP
[string] Henry
[tree] NNP(Henry)
[ud] "(Henry<root> / Henry)"
[fourlang] "(Henry<root> / Henry)"

NN -> spot_NN
[string] spot
[tree] NN(spot)
[ud] "(spot<root> / spot)"
[fourlang] "(spot<root> / spot)"

NNP -> February_NNP
[string] February
[tree] NNP(February)
[ud] "(February<root> / February)"
[fourlang] "(February<root> / February)"

NN -> candidate_NN
[string] candidate
[tree] NN(candidate)
[ud] "(candidate<root> / candidate)"
[fourlang] "(candidate<root> / candidate)"

NNP -> Courter_NNP
[string] Courter
[tree] NNP(Courter)
[ud] "(Courter<root> / Courter)"
[fourlang] "(Courter<root> / Courter)"

JJ -> Last_JJ
[string] Last
[tree] JJ(Last)
[ud] "(Last<root> / Last)"
[fourlang] "(Last<root> / Last)"

NNS -> theaters_NNS
[string] theaters
[tree] NNS(theaters)
[ud] "(theaters<root> / theaters)"
[fourlang] "(theaters<root> / theaters)"

JJS -> highest_JJS
[string] highest
[tree] JJS(highest)
[ud] "(highest<root> / highest)"
[fourlang] "(highest<root> / highest)"

NN -> role_NN
[string] role
[tree] NN(role)
[ud] "(role<root> / role)"
[fourlang] "(role<root> / role)"

NNP -> Equus_NNP
[string] Equus
[tree] NNP(Equus)
[ud] "(Equus<root> / Equus)"
[fourlang] "(Equus<root> / Equus)"

VBN -> viewed_VBN
[string] viewed
[tree] VBN(viewed)
[ud] "(viewed<root> / viewed)"
[fourlang] "(viewed<root> / viewed)"

NNP -> Altair_NNP
[string] Altair
[tree] NNP(Altair)
[ud] "(Altair<root> / Altair)"
[fourlang] "(Altair<root> / Altair)"

NNP -> Philippines_NNP
[string] Philippines
[tree] NNP(Philippines)
[ud] "(Philippines<root> / Philippines)"
[fourlang] "(Philippines<root> / Philippines)"

NNP -> Secilia_NNP
[string] Secilia
[tree] NNP(Secilia)
[ud] "(Secilia<root> / Secilia)"
[fourlang] "(Secilia<root> / Secilia)"

NNP -> Rock_NNP
[string] Rock
[tree] NNP(Rock)
[ud] "(Rock<root> / Rock)"
[fourlang] "(Rock<root> / Rock)"

NN -> survivor_NN
[string] survivor
[tree] NN(survivor)
[ud] "(survivor<root> / survivor)"
[fourlang] "(survivor<root> / survivor)"

JJ -> trainingHYPHENwage_JJ
[string] trainingHYPHENwage
[tree] JJ(trainingHYPHENwage)
[ud] "(trainingHYPHENwage<root> / trainingHYPHENwage)"
[fourlang] "(trainingHYPHENwage<root> / trainingHYPHENwage)"

RB -> about_RB
[string] about
[tree] RB(about)
[ud] "(about<root> / about)"
[fourlang] "(about<root> / about)"

NNS -> signs_NNS
[string] signs
[tree] NNS(signs)
[ud] "(signs<root> / signs)"
[fourlang] "(signs<root> / signs)"

NNP -> Random_NNP
[string] Random
[tree] NNP(Random)
[ud] "(Random<root> / Random)"
[fourlang] "(Random<root> / Random)"

NN -> today_NN
[string] today
[tree] NN(today)
[ud] "(today<root> / today)"
[fourlang] "(today<root> / today)"

NNP -> Data_NNP
[string] Data
[tree] NNP(Data)
[ud] "(Data<root> / Data)"
[fourlang] "(Data<root> / Data)"

NNP -> Pretty_NNP
[string] Pretty
[tree] NNP(Pretty)
[ud] "(Pretty<root> / Pretty)"
[fourlang] "(Pretty<root> / Pretty)"

NN -> stock_NN
[string] stock
[tree] NN(stock)
[ud] "(stock<root> / stock)"
[fourlang] "(stock<root> / stock)"

CD -> DIGITCOMMADIGITDIGITDIGIT_CD
[string] DIGITCOMMADIGITDIGITDIGIT
[tree] CD(DIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITCOMMADIGITDIGITDIGIT<root> / DIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITCOMMADIGITDIGITDIGIT<root> / DIGITCOMMADIGITDIGITDIGIT)"

NNP -> Citicorp_NNP
[string] Citicorp
[tree] NNP(Citicorp)
[ud] "(Citicorp<root> / Citicorp)"
[fourlang] "(Citicorp<root> / Citicorp)"

NNP -> Ariail_NNP
[string] Ariail
[tree] NNP(Ariail)
[ud] "(Ariail<root> / Ariail)"
[fourlang] "(Ariail<root> / Ariail)"

NN -> stone_NN
[string] stone
[tree] NN(stone)
[ud] "(stone<root> / stone)"
[fourlang] "(stone<root> / stone)"

NNPS -> Airlines_NNPS
[string] Airlines
[tree] NNPS(Airlines)
[ud] "(Airlines<root> / Airlines)"
[fourlang] "(Airlines<root> / Airlines)"

VB -> compromise_VB
[string] compromise
[tree] VB(compromise)
[ud] "(compromise<root> / compromise)"
[fourlang] "(compromise<root> / compromise)"

JJ -> ornamental_JJ
[string] ornamental
[tree] JJ(ornamental)
[ud] "(ornamental<root> / ornamental)"
[fourlang] "(ornamental<root> / ornamental)"

JJ -> differential_JJ
[string] differential
[tree] JJ(differential)
[ud] "(differential<root> / differential)"
[fourlang] "(differential<root> / differential)"

NN -> unit_NN
[string] unit
[tree] NN(unit)
[ud] "(unit<root> / unit)"
[fourlang] "(unit<root> / unit)"

NNS -> providers_NNS
[string] providers
[tree] NNS(providers)
[ud] "(providers<root> / providers)"
[fourlang] "(providers<root> / providers)"

NN -> loan_NN
[string] loan
[tree] NN(loan)
[ud] "(loan<root> / loan)"
[fourlang] "(loan<root> / loan)"

NNS -> cups_NNS
[string] cups
[tree] NNS(cups)
[ud] "(cups<root> / cups)"
[fourlang] "(cups<root> / cups)"

NNP -> Buckhead_NNP
[string] Buckhead
[tree] NNP(Buckhead)
[ud] "(Buckhead<root> / Buckhead)"
[fourlang] "(Buckhead<root> / Buckhead)"

VBN -> added_VBN
[string] added
[tree] VBN(added)
[ud] "(added<root> / added)"
[fourlang] "(added<root> / added)"

NN -> capital_NN
[string] capital
[tree] NN(capital)
[ud] "(capital<root> / capital)"
[fourlang] "(capital<root> / capital)"

NNPS -> Plains_NNPS
[string] Plains
[tree] NNPS(Plains)
[ud] "(Plains<root> / Plains)"
[fourlang] "(Plains<root> / Plains)"

PUNCT -> USDOLLAR_PUNCT
[string] USDOLLAR
[tree] PUNCT(USDOLLAR)
[ud] "(USDOLLAR<root> / USDOLLAR)"
[fourlang] "(USDOLLAR<root> / USDOLLAR)"

NNPS -> Travelers_NNPS
[string] Travelers
[tree] NNPS(Travelers)
[ud] "(Travelers<root> / Travelers)"
[fourlang] "(Travelers<root> / Travelers)"

NNS -> attacks_NNS
[string] attacks
[tree] NNS(attacks)
[ud] "(attacks<root> / attacks)"
[fourlang] "(attacks<root> / attacks)"

NNP -> World_NNP
[string] World
[tree] NNP(World)
[ud] "(World<root> / World)"
[fourlang] "(World<root> / World)"

NNS -> reds_NNS
[string] reds
[tree] NNS(reds)
[ud] "(reds<root> / reds)"
[fourlang] "(reds<root> / reds)"

NN -> payment_NN
[string] payment
[tree] NN(payment)
[ud] "(payment<root> / payment)"
[fourlang] "(payment<root> / payment)"

NN -> official_NN
[string] official
[tree] NN(official)
[ud] "(official<root> / official)"
[fourlang] "(official<root> / official)"

NN -> focus_NN
[string] focus
[tree] NN(focus)
[ud] "(focus<root> / focus)"
[fourlang] "(focus<root> / focus)"

NNP -> Book_NNP
[string] Book
[tree] NNP(Book)
[ud] "(Book<root> / Book)"
[fourlang] "(Book<root> / Book)"

RB -> equally_RB
[string] equally
[tree] RB(equally)
[ud] "(equally<root> / equally)"
[fourlang] "(equally<root> / equally)"

NN -> JunkHYPHENbond_NN
[string] JunkHYPHENbond
[tree] NN(JunkHYPHENbond)
[ud] "(JunkHYPHENbond<root> / JunkHYPHENbond)"
[fourlang] "(JunkHYPHENbond<root> / JunkHYPHENbond)"

NNP -> Gulf_NNP
[string] Gulf
[tree] NNP(Gulf)
[ud] "(Gulf<root> / Gulf)"
[fourlang] "(Gulf<root> / Gulf)"

JJ -> joint_JJ
[string] joint
[tree] JJ(joint)
[ud] "(joint<root> / joint)"
[fourlang] "(joint<root> / joint)"

NNP -> Mario_NNP
[string] Mario
[tree] NNP(Mario)
[ud] "(Mario<root> / Mario)"
[fourlang] "(Mario<root> / Mario)"

NNS -> offices_NNS
[string] offices
[tree] NNS(offices)
[ud] "(offices<root> / offices)"
[fourlang] "(offices<root> / offices)"

VBN -> rumored_VBN
[string] rumored
[tree] VBN(rumored)
[ud] "(rumored<root> / rumored)"
[fourlang] "(rumored<root> / rumored)"

NN -> headquarters_NN
[string] headquarters
[tree] NN(headquarters)
[ud] "(headquarters<root> / headquarters)"
[fourlang] "(headquarters<root> / headquarters)"

JJ -> free_JJ
[string] free
[tree] JJ(free)
[ud] "(free<root> / free)"
[fourlang] "(free<root> / free)"

NNP -> Lewis_NNP
[string] Lewis
[tree] NNP(Lewis)
[ud] "(Lewis<root> / Lewis)"
[fourlang] "(Lewis<root> / Lewis)"

RB -> increasingly_RB
[string] increasingly
[tree] RB(increasingly)
[ud] "(increasingly<root> / increasingly)"
[fourlang] "(increasingly<root> / increasingly)"

NNS -> slides_NNS
[string] slides
[tree] NNS(slides)
[ud] "(slides<root> / slides)"
[fourlang] "(slides<root> / slides)"

PUNCT -> CDOLLAR_PUNCT
[string] CDOLLAR
[tree] PUNCT(CDOLLAR)
[ud] "(CDOLLAR<root> / CDOLLAR)"
[fourlang] "(CDOLLAR<root> / CDOLLAR)"

NNS -> obstacles_NNS
[string] obstacles
[tree] NNS(obstacles)
[ud] "(obstacles<root> / obstacles)"
[fourlang] "(obstacles<root> / obstacles)"

NNS -> smiles_NNS
[string] smiles
[tree] NNS(smiles)
[ud] "(smiles<root> / smiles)"
[fourlang] "(smiles<root> / smiles)"

JJ -> evil_JJ
[string] evil
[tree] JJ(evil)
[ud] "(evil<root> / evil)"
[fourlang] "(evil<root> / evil)"

NNP -> Kaminski_NNP
[string] Kaminski
[tree] NNP(Kaminski)
[ud] "(Kaminski<root> / Kaminski)"
[fourlang] "(Kaminski<root> / Kaminski)"

NNP -> Second_NNP
[string] Second
[tree] NNP(Second)
[ud] "(Second<root> / Second)"
[fourlang] "(Second<root> / Second)"

NNP -> Wedtech_NNP
[string] Wedtech
[tree] NNP(Wedtech)
[ud] "(Wedtech<root> / Wedtech)"
[fourlang] "(Wedtech<root> / Wedtech)"

VB -> weaken_VB
[string] weaken
[tree] VB(weaken)
[ud] "(weaken<root> / weaken)"
[fourlang] "(weaken<root> / weaken)"

NNP -> Ford_NNP
[string] Ford
[tree] NNP(Ford)
[ud] "(Ford<root> / Ford)"
[fourlang] "(Ford<root> / Ford)"

JJS -> least_JJS
[string] least
[tree] JJS(least)
[ud] "(least<root> / least)"
[fourlang] "(least<root> / least)"

VBN -> planned_VBN
[string] planned
[tree] VBN(planned)
[ud] "(planned<root> / planned)"
[fourlang] "(planned<root> / planned)"

JJ -> affirmative_JJ
[string] affirmative
[tree] JJ(affirmative)
[ud] "(affirmative<root> / affirmative)"
[fourlang] "(affirmative<root> / affirmative)"

NN -> DIGITDIGITDIGITDIGITs_NN
[string] DIGITDIGITDIGITDIGITs
[tree] NN(DIGITDIGITDIGITDIGITs)
[ud] "(DIGITDIGITDIGITDIGITs<root> / DIGITDIGITDIGITDIGITs)"
[fourlang] "(DIGITDIGITDIGITDIGITs<root> / DIGITDIGITDIGITDIGITs)"

NN -> peddling_NN
[string] peddling
[tree] NN(peddling)
[ud] "(peddling<root> / peddling)"
[fourlang] "(peddling<root> / peddling)"

NNP -> Hanifen_NNP
[string] Hanifen
[tree] NNP(Hanifen)
[ud] "(Hanifen<root> / Hanifen)"
[fourlang] "(Hanifen<root> / Hanifen)"

NN -> paper_NN
[string] paper
[tree] NN(paper)
[ud] "(paper<root> / paper)"
[fourlang] "(paper<root> / paper)"

NNP -> Church_NNP
[string] Church
[tree] NNP(Church)
[ud] "(Church<root> / Church)"
[fourlang] "(Church<root> / Church)"

NNS -> Payouts_NNS
[string] Payouts
[tree] NNS(Payouts)
[ud] "(Payouts<root> / Payouts)"
[fourlang] "(Payouts<root> / Payouts)"

VBP -> have_VBP
[string] have
[tree] VBP(have)
[ud] "(have<root> / have)"
[fourlang] "(have<root> / have)"

JJ -> the_JJ
[string] the
[tree] JJ(the)
[ud] "(the<root> / the)"
[fourlang] "(the<root> / the)"

NN -> refinery_NN
[string] refinery
[tree] NN(refinery)
[ud] "(refinery<root> / refinery)"
[fourlang] "(refinery<root> / refinery)"

NN -> departure_NN
[string] departure
[tree] NN(departure)
[ud] "(departure<root> / departure)"
[fourlang] "(departure<root> / departure)"

NN -> Factory_NN
[string] Factory
[tree] NN(Factory)
[ud] "(Factory<root> / Factory)"
[fourlang] "(Factory<root> / Factory)"

VBG -> doing_VBG
[string] doing
[tree] VBG(doing)
[ud] "(doing<root> / doing)"
[fourlang] "(doing<root> / doing)"

NNS -> times_NNS
[string] times
[tree] NNS(times)
[ud] "(times<root> / times)"
[fourlang] "(times<root> / times)"

VBG -> teetering_VBG
[string] teetering
[tree] VBG(teetering)
[ud] "(teetering<root> / teetering)"
[fourlang] "(teetering<root> / teetering)"

NN -> Excision_NN
[string] Excision
[tree] NN(Excision)
[ud] "(Excision<root> / Excision)"
[fourlang] "(Excision<root> / Excision)"

NNP -> Adolph_NNP
[string] Adolph
[tree] NNP(Adolph)
[ud] "(Adolph<root> / Adolph)"
[fourlang] "(Adolph<root> / Adolph)"

VBZ -> gives_VBZ
[string] gives
[tree] VBZ(gives)
[ud] "(gives<root> / gives)"
[fourlang] "(gives<root> / gives)"

JJ -> Solomonic_JJ
[string] Solomonic
[tree] JJ(Solomonic)
[ud] "(Solomonic<root> / Solomonic)"
[fourlang] "(Solomonic<root> / Solomonic)"

NN -> view_NN
[string] view
[tree] NN(view)
[ud] "(view<root> / view)"
[fourlang] "(view<root> / view)"

NN -> gas_NN
[string] gas
[tree] NN(gas)
[ud] "(gas<root> / gas)"
[fourlang] "(gas<root> / gas)"

NNP -> Leighton_NNP
[string] Leighton
[tree] NNP(Leighton)
[ud] "(Leighton<root> / Leighton)"
[fourlang] "(Leighton<root> / Leighton)"

NNS -> additions_NNS
[string] additions
[tree] NNS(additions)
[ud] "(additions<root> / additions)"
[fourlang] "(additions<root> / additions)"

NNP -> Hallwood_NNP
[string] Hallwood
[tree] NNP(Hallwood)
[ud] "(Hallwood<root> / Hallwood)"
[fourlang] "(Hallwood<root> / Hallwood)"

NNS -> currencies_NNS
[string] currencies
[tree] NNS(currencies)
[ud] "(currencies<root> / currencies)"
[fourlang] "(currencies<root> / currencies)"

NN -> replacementHYPHENcar_NN
[string] replacementHYPHENcar
[tree] NN(replacementHYPHENcar)
[ud] "(replacementHYPHENcar<root> / replacementHYPHENcar)"
[fourlang] "(replacementHYPHENcar<root> / replacementHYPHENcar)"

JJ -> willing_JJ
[string] willing
[tree] JJ(willing)
[ud] "(willing<root> / willing)"
[fourlang] "(willing<root> / willing)"

RB -> namely_RB
[string] namely
[tree] RB(namely)
[ud] "(namely<root> / namely)"
[fourlang] "(namely<root> / namely)"

JJ -> quantitive_JJ
[string] quantitive
[tree] JJ(quantitive)
[ud] "(quantitive<root> / quantitive)"
[fourlang] "(quantitive<root> / quantitive)"

RB -> almost_RB
[string] almost
[tree] RB(almost)
[ud] "(almost<root> / almost)"
[fourlang] "(almost<root> / almost)"

VBN -> met_VBN
[string] met
[tree] VBN(met)
[ud] "(met<root> / met)"
[fourlang] "(met<root> / met)"

JJ -> fullHYPHENyear_JJ
[string] fullHYPHENyear
[tree] JJ(fullHYPHENyear)
[ud] "(fullHYPHENyear<root> / fullHYPHENyear)"
[fourlang] "(fullHYPHENyear<root> / fullHYPHENyear)"

RB -> typically_RB
[string] typically
[tree] RB(typically)
[ud] "(typically<root> / typically)"
[fourlang] "(typically<root> / typically)"

NN -> selling_NN
[string] selling
[tree] NN(selling)
[ud] "(selling<root> / selling)"
[fourlang] "(selling<root> / selling)"

NN -> formation_NN
[string] formation
[tree] NN(formation)
[ud] "(formation<root> / formation)"
[fourlang] "(formation<root> / formation)"

NNP -> Barrett_NNP
[string] Barrett
[tree] NNP(Barrett)
[ud] "(Barrett<root> / Barrett)"
[fourlang] "(Barrett<root> / Barrett)"

NN -> corruption_NN
[string] corruption
[tree] NN(corruption)
[ud] "(corruption<root> / corruption)"
[fourlang] "(corruption<root> / corruption)"

JJ -> retail_JJ
[string] retail
[tree] JJ(retail)
[ud] "(retail<root> / retail)"
[fourlang] "(retail<root> / retail)"

JJ -> HighHYPHENgrade_JJ
[string] HighHYPHENgrade
[tree] JJ(HighHYPHENgrade)
[ud] "(HighHYPHENgrade<root> / HighHYPHENgrade)"
[fourlang] "(HighHYPHENgrade<root> / HighHYPHENgrade)"

NN -> environment_NN
[string] environment
[tree] NN(environment)
[ud] "(environment<root> / environment)"
[fourlang] "(environment<root> / environment)"

RB -> extremely_RB
[string] extremely
[tree] RB(extremely)
[ud] "(extremely<root> / extremely)"
[fourlang] "(extremely<root> / extremely)"

NNP -> Murakami_NNP
[string] Murakami
[tree] NNP(Murakami)
[ud] "(Murakami<root> / Murakami)"
[fourlang] "(Murakami<root> / Murakami)"

NNP -> Kuhns_NNP
[string] Kuhns
[tree] NNP(Kuhns)
[ud] "(Kuhns<root> / Kuhns)"
[fourlang] "(Kuhns<root> / Kuhns)"

CD -> DIGITPERIODDIGITDIGITDIGIT_CD
[string] DIGITPERIODDIGITDIGITDIGIT
[tree] CD(DIGITPERIODDIGITDIGITDIGIT)
[ud] "(DIGITPERIODDIGITDIGITDIGIT<root> / DIGITPERIODDIGITDIGITDIGIT)"
[fourlang] "(DIGITPERIODDIGITDIGITDIGIT<root> / DIGITPERIODDIGITDIGITDIGIT)"

NNS -> Imports_NNS
[string] Imports
[tree] NNS(Imports)
[ud] "(Imports<root> / Imports)"
[fourlang] "(Imports<root> / Imports)"

JJ -> vicious_JJ
[string] vicious
[tree] JJ(vicious)
[ud] "(vicious<root> / vicious)"
[fourlang] "(vicious<root> / vicious)"

NNP -> Foreign_NNP
[string] Foreign
[tree] NNP(Foreign)
[ud] "(Foreign<root> / Foreign)"
[fourlang] "(Foreign<root> / Foreign)"

NNP -> Circuit_NNP
[string] Circuit
[tree] NNP(Circuit)
[ud] "(Circuit<root> / Circuit)"
[fourlang] "(Circuit<root> / Circuit)"

NNP -> Agnew_NNP
[string] Agnew
[tree] NNP(Agnew)
[ud] "(Agnew<root> / Agnew)"
[fourlang] "(Agnew<root> / Agnew)"

JJR -> longer_JJR
[string] longer
[tree] JJR(longer)
[ud] "(longer<root> / longer)"
[fourlang] "(longer<root> / longer)"

NNP -> Hammersmith_NNP
[string] Hammersmith
[tree] NNP(Hammersmith)
[ud] "(Hammersmith<root> / Hammersmith)"
[fourlang] "(Hammersmith<root> / Hammersmith)"

NN -> rhythm_NN
[string] rhythm
[tree] NN(rhythm)
[ud] "(rhythm<root> / rhythm)"
[fourlang] "(rhythm<root> / rhythm)"

NNS -> activities_NNS
[string] activities
[tree] NNS(activities)
[ud] "(activities<root> / activities)"
[fourlang] "(activities<root> / activities)"

VBG -> asking_VBG
[string] asking
[tree] VBG(asking)
[ud] "(asking<root> / asking)"
[fourlang] "(asking<root> / asking)"

NN -> legislature_NN
[string] legislature
[tree] NN(legislature)
[ud] "(legislature<root> / legislature)"
[fourlang] "(legislature<root> / legislature)"

NNP -> Vineyard_NNP
[string] Vineyard
[tree] NNP(Vineyard)
[ud] "(Vineyard<root> / Vineyard)"
[fourlang] "(Vineyard<root> / Vineyard)"

NNS -> reserves_NNS
[string] reserves
[tree] NNS(reserves)
[ud] "(reserves<root> / reserves)"
[fourlang] "(reserves<root> / reserves)"

VBG -> signifying_VBG
[string] signifying
[tree] VBG(signifying)
[ud] "(signifying<root> / signifying)"
[fourlang] "(signifying<root> / signifying)"

NNP -> CPERIOD_NNP
[string] CPERIOD
[tree] NNP(CPERIOD)
[ud] "(CPERIOD<root> / CPERIOD)"
[fourlang] "(CPERIOD<root> / CPERIOD)"

_LRB_ -> HYPHENLCBHYPHEN__LRB_
[string] HYPHENLCBHYPHEN
[tree] _LRB_(HYPHENLCBHYPHEN)
[ud] "(HYPHENLCBHYPHEN<root> / HYPHENLCBHYPHEN)"
[fourlang] "(HYPHENLCBHYPHEN<root> / HYPHENLCBHYPHEN)"

VBN -> Annualized_VBN
[string] Annualized
[tree] VBN(Annualized)
[ud] "(Annualized<root> / Annualized)"
[fourlang] "(Annualized<root> / Annualized)"

NN -> favor_NN
[string] favor
[tree] NN(favor)
[ud] "(favor<root> / favor)"
[fourlang] "(favor<root> / favor)"

RB -> already_RB
[string] already
[tree] RB(already)
[ud] "(already<root> / already)"
[fourlang] "(already<root> / already)"

_NONE_ -> ASTERISKTASTERISKHYPHENDIGIT__NONE_
[string] ASTERISKTASTERISKHYPHENDIGIT
[tree] _NONE_(ASTERISKTASTERISKHYPHENDIGIT)
[ud] "(ASTERISKTASTERISKHYPHENDIGIT<root> / ASTERISKTASTERISKHYPHENDIGIT)"
[fourlang] "(ASTERISKTASTERISKHYPHENDIGIT<root> / ASTERISKTASTERISKHYPHENDIGIT)"

NNP -> Federalist_NNP
[string] Federalist
[tree] NNP(Federalist)
[ud] "(Federalist<root> / Federalist)"
[fourlang] "(Federalist<root> / Federalist)"

JJ -> worthy_JJ
[string] worthy
[tree] JJ(worthy)
[ud] "(worthy<root> / worthy)"
[fourlang] "(worthy<root> / worthy)"

NNS -> interests_NNS
[string] interests
[tree] NNS(interests)
[ud] "(interests<root> / interests)"
[fourlang] "(interests<root> / interests)"

NN -> scale_NN
[string] scale
[tree] NN(scale)
[ud] "(scale<root> / scale)"
[fourlang] "(scale<root> / scale)"

NNS -> Countries_NNS
[string] Countries
[tree] NNS(Countries)
[ud] "(Countries<root> / Countries)"
[fourlang] "(Countries<root> / Countries)"

JJ -> antiHYPHENtakeover_JJ
[string] antiHYPHENtakeover
[tree] JJ(antiHYPHENtakeover)
[ud] "(antiHYPHENtakeover<root> / antiHYPHENtakeover)"
[fourlang] "(antiHYPHENtakeover<root> / antiHYPHENtakeover)"

NNP -> East_NNP
[string] East
[tree] NNP(East)
[ud] "(East<root> / East)"
[fourlang] "(East<root> / East)"

NN -> mathematics_NN
[string] mathematics
[tree] NN(mathematics)
[ud] "(mathematics<root> / mathematics)"
[fourlang] "(mathematics<root> / mathematics)"

NN -> registration_NN
[string] registration
[tree] NN(registration)
[ud] "(registration<root> / registration)"
[fourlang] "(registration<root> / registration)"

NN -> comment_NN
[string] comment
[tree] NN(comment)
[ud] "(comment<root> / comment)"
[fourlang] "(comment<root> / comment)"

VBP -> give_VBP
[string] give
[tree] VBP(give)
[ud] "(give<root> / give)"
[fourlang] "(give<root> / give)"

NNP -> Free_NNP
[string] Free
[tree] NNP(Free)
[ud] "(Free<root> / Free)"
[fourlang] "(Free<root> / Free)"

VBG -> advancing_VBG
[string] advancing
[tree] VBG(advancing)
[ud] "(advancing<root> / advancing)"
[fourlang] "(advancing<root> / advancing)"

NNP -> Jim_NNP
[string] Jim
[tree] NNP(Jim)
[ud] "(Jim<root> / Jim)"
[fourlang] "(Jim<root> / Jim)"

NNP -> Antonio_NNP
[string] Antonio
[tree] NNP(Antonio)
[ud] "(Antonio<root> / Antonio)"
[fourlang] "(Antonio<root> / Antonio)"

NN -> return_NN
[string] return
[tree] NN(return)
[ud] "(return<root> / return)"
[fourlang] "(return<root> / return)"

JJ -> Brisk_JJ
[string] Brisk
[tree] JJ(Brisk)
[ud] "(Brisk<root> / Brisk)"
[fourlang] "(Brisk<root> / Brisk)"

NNP -> Boone_NNP
[string] Boone
[tree] NNP(Boone)
[ud] "(Boone<root> / Boone)"
[fourlang] "(Boone<root> / Boone)"

RB -> heavily_RB
[string] heavily
[tree] RB(heavily)
[ud] "(heavily<root> / heavily)"
[fourlang] "(heavily<root> / heavily)"

NN -> approval_NN
[string] approval
[tree] NN(approval)
[ud] "(approval<root> / approval)"
[fourlang] "(approval<root> / approval)"

NNS -> marbles_NNS
[string] marbles
[tree] NNS(marbles)
[ud] "(marbles<root> / marbles)"
[fourlang] "(marbles<root> / marbles)"

NN -> buildup_NN
[string] buildup
[tree] NN(buildup)
[ud] "(buildup<root> / buildup)"
[fourlang] "(buildup<root> / buildup)"

NNS -> plants_NNS
[string] plants
[tree] NNS(plants)
[ud] "(plants<root> / plants)"
[fourlang] "(plants<root> / plants)"

NNP -> Richard_NNP
[string] Richard
[tree] NNP(Richard)
[ud] "(Richard<root> / Richard)"
[fourlang] "(Richard<root> / Richard)"

NN -> sleep_NN
[string] sleep
[tree] NN(sleep)
[ud] "(sleep<root> / sleep)"
[fourlang] "(sleep<root> / sleep)"

NNP -> Pretoria_NNP
[string] Pretoria
[tree] NNP(Pretoria)
[ud] "(Pretoria<root> / Pretoria)"
[fourlang] "(Pretoria<root> / Pretoria)"

NNP -> Cabbage_NNP
[string] Cabbage
[tree] NNP(Cabbage)
[ud] "(Cabbage<root> / Cabbage)"
[fourlang] "(Cabbage<root> / Cabbage)"

NNP -> DSQAmico_NNP
[string] DSQAmico
[tree] NNP(DSQAmico)
[ud] "(DSQAmico<root> / DSQAmico)"
[fourlang] "(DSQAmico<root> / DSQAmico)"

JJ -> preliminary_JJ
[string] preliminary
[tree] JJ(preliminary)
[ud] "(preliminary<root> / preliminary)"
[fourlang] "(preliminary<root> / preliminary)"

NN -> Safety_NN
[string] Safety
[tree] NN(Safety)
[ud] "(Safety<root> / Safety)"
[fourlang] "(Safety<root> / Safety)"

JJ -> JerseyHYPHENbased_JJ
[string] JerseyHYPHENbased
[tree] JJ(JerseyHYPHENbased)
[ud] "(JerseyHYPHENbased<root> / JerseyHYPHENbased)"
[fourlang] "(JerseyHYPHENbased<root> / JerseyHYPHENbased)"

NNP -> Boulder_NNP
[string] Boulder
[tree] NNP(Boulder)
[ud] "(Boulder<root> / Boulder)"
[fourlang] "(Boulder<root> / Boulder)"

VBD -> urged_VBD
[string] urged
[tree] VBD(urged)
[ud] "(urged<root> / urged)"
[fourlang] "(urged<root> / urged)"

NNP -> Hudson_NNP
[string] Hudson
[tree] NNP(Hudson)
[ud] "(Hudson<root> / Hudson)"
[fourlang] "(Hudson<root> / Hudson)"

JJ -> computerHYPHENassisted_JJ
[string] computerHYPHENassisted
[tree] JJ(computerHYPHENassisted)
[ud] "(computerHYPHENassisted<root> / computerHYPHENassisted)"
[fourlang] "(computerHYPHENassisted<root> / computerHYPHENassisted)"

NNP -> Angeles_NNP
[string] Angeles
[tree] NNP(Angeles)
[ud] "(Angeles<root> / Angeles)"
[fourlang] "(Angeles<root> / Angeles)"

NN -> minicrash_NN
[string] minicrash
[tree] NN(minicrash)
[ud] "(minicrash<root> / minicrash)"
[fourlang] "(minicrash<root> / minicrash)"

NNP -> IMSAI_NNP
[string] IMSAI
[tree] NNP(IMSAI)
[ud] "(IMSAI<root> / IMSAI)"
[fourlang] "(IMSAI<root> / IMSAI)"

NNP -> Nancy_NNP
[string] Nancy
[tree] NNP(Nancy)
[ud] "(Nancy<root> / Nancy)"
[fourlang] "(Nancy<root> / Nancy)"

NN -> position_NN
[string] position
[tree] NN(position)
[ud] "(position<root> / position)"
[fourlang] "(position<root> / position)"

NNS -> makers_NNS
[string] makers
[tree] NNS(makers)
[ud] "(makers<root> / makers)"
[fourlang] "(makers<root> / makers)"

JJ -> dropHYPHENin_JJ
[string] dropHYPHENin
[tree] JJ(dropHYPHENin)
[ud] "(dropHYPHENin<root> / dropHYPHENin)"
[fourlang] "(dropHYPHENin<root> / dropHYPHENin)"

NNP -> NPERIODJPERIOD_NNP
[string] NPERIODJPERIOD
[tree] NNP(NPERIODJPERIOD)
[ud] "(NPERIODJPERIOD<root> / NPERIODJPERIOD)"
[fourlang] "(NPERIODJPERIOD<root> / NPERIODJPERIOD)"

NN -> intervention_NN
[string] intervention
[tree] NN(intervention)
[ud] "(intervention<root> / intervention)"
[fourlang] "(intervention<root> / intervention)"

NNS -> photos_NNS
[string] photos
[tree] NNS(photos)
[ud] "(photos<root> / photos)"
[fourlang] "(photos<root> / photos)"

VBG -> according_VBG
[string] according
[tree] VBG(according)
[ud] "(according<root> / according)"
[fourlang] "(according<root> / according)"

NNP -> Bancorp_NNP
[string] Bancorp
[tree] NNP(Bancorp)
[ud] "(Bancorp<root> / Bancorp)"
[fourlang] "(Bancorp<root> / Bancorp)"

NNS -> barrels_NNS
[string] barrels
[tree] NNS(barrels)
[ud] "(barrels<root> / barrels)"
[fourlang] "(barrels<root> / barrels)"

VBN -> accused_VBN
[string] accused
[tree] VBN(accused)
[ud] "(accused<root> / accused)"
[fourlang] "(accused<root> / accused)"

NNS -> bids_NNS
[string] bids
[tree] NNS(bids)
[ud] "(bids<root> / bids)"
[fourlang] "(bids<root> / bids)"

NNP -> Hartford_NNP
[string] Hartford
[tree] NNP(Hartford)
[ud] "(Hartford<root> / Hartford)"
[fourlang] "(Hartford<root> / Hartford)"

NNP -> Cedric_NNP
[string] Cedric
[tree] NNP(Cedric)
[ud] "(Cedric<root> / Cedric)"
[fourlang] "(Cedric<root> / Cedric)"

NNS -> transactions_NNS
[string] transactions
[tree] NNS(transactions)
[ud] "(transactions<root> / transactions)"
[fourlang] "(transactions<root> / transactions)"

JJ -> mediumHYPHENsized_JJ
[string] mediumHYPHENsized
[tree] JJ(mediumHYPHENsized)
[ud] "(mediumHYPHENsized<root> / mediumHYPHENsized)"
[fourlang] "(mediumHYPHENsized<root> / mediumHYPHENsized)"

VBD -> ran_VBD
[string] ran
[tree] VBD(ran)
[ud] "(ran<root> / ran)"
[fourlang] "(ran<root> / ran)"

JJ -> tissueHYPHENtransplant_JJ
[string] tissueHYPHENtransplant
[tree] JJ(tissueHYPHENtransplant)
[ud] "(tissueHYPHENtransplant<root> / tissueHYPHENtransplant)"
[fourlang] "(tissueHYPHENtransplant<root> / tissueHYPHENtransplant)"

NNP -> Democrat_NNP
[string] Democrat
[tree] NNP(Democrat)
[ud] "(Democrat<root> / Democrat)"
[fourlang] "(Democrat<root> / Democrat)"

NN -> Uptick_NN
[string] Uptick
[tree] NN(Uptick)
[ud] "(Uptick<root> / Uptick)"
[fourlang] "(Uptick<root> / Uptick)"

NN -> buyHYPHENback_NN
[string] buyHYPHENback
[tree] NN(buyHYPHENback)
[ud] "(buyHYPHENback<root> / buyHYPHENback)"
[fourlang] "(buyHYPHENback<root> / buyHYPHENback)"

NNP -> TEXAS_NNP
[string] TEXAS
[tree] NNP(TEXAS)
[ud] "(TEXAS<root> / TEXAS)"
[fourlang] "(TEXAS<root> / TEXAS)"

NNP -> Oshkosh_NNP
[string] Oshkosh
[tree] NNP(Oshkosh)
[ud] "(Oshkosh<root> / Oshkosh)"
[fourlang] "(Oshkosh<root> / Oshkosh)"

NNS -> Ratings_NNS
[string] Ratings
[tree] NNS(Ratings)
[ud] "(Ratings<root> / Ratings)"
[fourlang] "(Ratings<root> / Ratings)"

NNP -> July_NNP
[string] July
[tree] NNP(July)
[ud] "(July<root> / July)"
[fourlang] "(July<root> / July)"

JJ -> soft_JJ
[string] soft
[tree] JJ(soft)
[ud] "(soft<root> / soft)"
[fourlang] "(soft<root> / soft)"

NN -> ownership_NN
[string] ownership
[tree] NN(ownership)
[ud] "(ownership<root> / ownership)"
[fourlang] "(ownership<root> / ownership)"

NN -> Year_NN
[string] Year
[tree] NN(Year)
[ud] "(Year<root> / Year)"
[fourlang] "(Year<root> / Year)"

JJ -> Soviet_JJ
[string] Soviet
[tree] JJ(Soviet)
[ud] "(Soviet<root> / Soviet)"
[fourlang] "(Soviet<root> / Soviet)"

VBN -> placed_VBN
[string] placed
[tree] VBN(placed)
[ud] "(placed<root> / placed)"
[fourlang] "(placed<root> / placed)"

NNS -> contests_NNS
[string] contests
[tree] NNS(contests)
[ud] "(contests<root> / contests)"
[fourlang] "(contests<root> / contests)"

NNP -> Investor_NNP
[string] Investor
[tree] NNP(Investor)
[ud] "(Investor<root> / Investor)"
[fourlang] "(Investor<root> / Investor)"

JJ -> fundamental_JJ
[string] fundamental
[tree] JJ(fundamental)
[ud] "(fundamental<root> / fundamental)"
[fourlang] "(fundamental<root> / fundamental)"

NNP -> ENERGY_NNP
[string] ENERGY
[tree] NNP(ENERGY)
[ud] "(ENERGY<root> / ENERGY)"
[fourlang] "(ENERGY<root> / ENERGY)"

NN -> conference_NN
[string] conference
[tree] NN(conference)
[ud] "(conference<root> / conference)"
[fourlang] "(conference<root> / conference)"

NNP -> Herbert_NNP
[string] Herbert
[tree] NNP(Herbert)
[ud] "(Herbert<root> / Herbert)"
[fourlang] "(Herbert<root> / Herbert)"

NNS -> newsstands_NNS
[string] newsstands
[tree] NNS(newsstands)
[ud] "(newsstands<root> / newsstands)"
[fourlang] "(newsstands<root> / newsstands)"

RB -> mainly_RB
[string] mainly
[tree] RB(mainly)
[ud] "(mainly<root> / mainly)"
[fourlang] "(mainly<root> / mainly)"

JJ -> much_JJ
[string] much
[tree] JJ(much)
[ud] "(much<root> / much)"
[fourlang] "(much<root> / much)"

VBZ -> receives_VBZ
[string] receives
[tree] VBZ(receives)
[ud] "(receives<root> / receives)"
[fourlang] "(receives<root> / receives)"

VBG -> banning_VBG
[string] banning
[tree] VBG(banning)
[ud] "(banning<root> / banning)"
[fourlang] "(banning<root> / banning)"

NNS -> farmers_NNS
[string] farmers
[tree] NNS(farmers)
[ud] "(farmers<root> / farmers)"
[fourlang] "(farmers<root> / farmers)"

JJ -> hardHYPHENhitting_JJ
[string] hardHYPHENhitting
[tree] JJ(hardHYPHENhitting)
[ud] "(hardHYPHENhitting<root> / hardHYPHENhitting)"
[fourlang] "(hardHYPHENhitting<root> / hardHYPHENhitting)"

NNP -> Peabody_NNP
[string] Peabody
[tree] NNP(Peabody)
[ud] "(Peabody<root> / Peabody)"
[fourlang] "(Peabody<root> / Peabody)"

NNP -> Tip_NNP
[string] Tip
[tree] NNP(Tip)
[ud] "(Tip<root> / Tip)"
[fourlang] "(Tip<root> / Tip)"

NN -> demand_NN
[string] demand
[tree] NN(demand)
[ud] "(demand<root> / demand)"
[fourlang] "(demand<root> / demand)"

NN -> chrysotile_NN
[string] chrysotile
[tree] NN(chrysotile)
[ud] "(chrysotile<root> / chrysotile)"
[fourlang] "(chrysotile<root> / chrysotile)"

DT -> these_DT
[string] these
[tree] DT(these)
[ud] "(these<root> / these)"
[fourlang] "(these<root> / these)"

NNS -> students_NNS
[string] students
[tree] NNS(students)
[ud] "(students<root> / students)"
[fourlang] "(students<root> / students)"

NN -> removal_NN
[string] removal
[tree] NN(removal)
[ud] "(removal<root> / removal)"
[fourlang] "(removal<root> / removal)"

NNP -> Sheffield_NNP
[string] Sheffield
[tree] NNP(Sheffield)
[ud] "(Sheffield<root> / Sheffield)"
[fourlang] "(Sheffield<root> / Sheffield)"

NN -> disadvantage_NN
[string] disadvantage
[tree] NN(disadvantage)
[ud] "(disadvantage<root> / disadvantage)"
[fourlang] "(disadvantage<root> / disadvantage)"

NNPS -> Partners_NNPS
[string] Partners
[tree] NNPS(Partners)
[ud] "(Partners<root> / Partners)"
[fourlang] "(Partners<root> / Partners)"

NN -> safety_NN
[string] safety
[tree] NN(safety)
[ud] "(safety<root> / safety)"
[fourlang] "(safety<root> / safety)"

NNS -> circumstances_NNS
[string] circumstances
[tree] NNS(circumstances)
[ud] "(circumstances<root> / circumstances)"
[fourlang] "(circumstances<root> / circumstances)"

JJ -> worldHYPHENwide_JJ
[string] worldHYPHENwide
[tree] JJ(worldHYPHENwide)
[ud] "(worldHYPHENwide<root> / worldHYPHENwide)"
[fourlang] "(worldHYPHENwide<root> / worldHYPHENwide)"

NN -> seminar_NN
[string] seminar
[tree] NN(seminar)
[ud] "(seminar<root> / seminar)"
[fourlang] "(seminar<root> / seminar)"

NN -> lens_NN
[string] lens
[tree] NN(lens)
[ud] "(lens<root> / lens)"
[fourlang] "(lens<root> / lens)"

VBN -> covered_VBN
[string] covered
[tree] VBN(covered)
[ud] "(covered<root> / covered)"
[fourlang] "(covered<root> / covered)"

NNP -> Paul_NNP
[string] Paul
[tree] NNP(Paul)
[ud] "(Paul<root> / Paul)"
[fourlang] "(Paul<root> / Paul)"

NNP -> JPERIODLPERIOD_NNP
[string] JPERIODLPERIOD
[tree] NNP(JPERIODLPERIOD)
[ud] "(JPERIODLPERIOD<root> / JPERIODLPERIOD)"
[fourlang] "(JPERIODLPERIOD<root> / JPERIODLPERIOD)"

NNS -> elevators_NNS
[string] elevators
[tree] NNS(elevators)
[ud] "(elevators<root> / elevators)"
[fourlang] "(elevators<root> / elevators)"

NNP -> Riese_NNP
[string] Riese
[tree] NNP(Riese)
[ud] "(Riese<root> / Riese)"
[fourlang] "(Riese<root> / Riese)"

NNP -> Coors_NNP
[string] Coors
[tree] NNP(Coors)
[ud] "(Coors<root> / Coors)"
[fourlang] "(Coors<root> / Coors)"

NNP -> UPERIODKPERIOD_NNP
[string] UPERIODKPERIOD
[tree] NNP(UPERIODKPERIOD)
[ud] "(UPERIODKPERIOD<root> / UPERIODKPERIOD)"
[fourlang] "(UPERIODKPERIOD<root> / UPERIODKPERIOD)"

NNP -> PrudentialHYPHENBache_NNP
[string] PrudentialHYPHENBache
[tree] NNP(PrudentialHYPHENBache)
[ud] "(PrudentialHYPHENBache<root> / PrudentialHYPHENBache)"
[fourlang] "(PrudentialHYPHENBache<root> / PrudentialHYPHENBache)"

RB -> temporarily_RB
[string] temporarily
[tree] RB(temporarily)
[ud] "(temporarily<root> / temporarily)"
[fourlang] "(temporarily<root> / temporarily)"

JJ -> plenty_JJ
[string] plenty
[tree] JJ(plenty)
[ud] "(plenty<root> / plenty)"
[fourlang] "(plenty<root> / plenty)"

NNP -> Dumpster_NNP
[string] Dumpster
[tree] NNP(Dumpster)
[ud] "(Dumpster<root> / Dumpster)"
[fourlang] "(Dumpster<root> / Dumpster)"

NNP -> Victor_NNP
[string] Victor
[tree] NNP(Victor)
[ud] "(Victor<root> / Victor)"
[fourlang] "(Victor<root> / Victor)"

NN -> maturity_NN
[string] maturity
[tree] NN(maturity)
[ud] "(maturity<root> / maturity)"
[fourlang] "(maturity<root> / maturity)"

VBG -> playing_VBG
[string] playing
[tree] VBG(playing)
[ud] "(playing<root> / playing)"
[fourlang] "(playing<root> / playing)"

NNP -> Yorker_NNP
[string] Yorker
[tree] NNP(Yorker)
[ud] "(Yorker<root> / Yorker)"
[fourlang] "(Yorker<root> / Yorker)"

NN -> excision_NN
[string] excision
[tree] NN(excision)
[ud] "(excision<root> / excision)"
[fourlang] "(excision<root> / excision)"

NN -> cancellation_NN
[string] cancellation
[tree] NN(cancellation)
[ud] "(cancellation<root> / cancellation)"
[fourlang] "(cancellation<root> / cancellation)"

NNP -> Judge_NNP
[string] Judge
[tree] NNP(Judge)
[ud] "(Judge<root> / Judge)"
[fourlang] "(Judge<root> / Judge)"

NNS -> hopes_NNS
[string] hopes
[tree] NNS(hopes)
[ud] "(hopes<root> / hopes)"
[fourlang] "(hopes<root> / hopes)"

JJ -> natural_JJ
[string] natural
[tree] JJ(natural)
[ud] "(natural<root> / natural)"
[fourlang] "(natural<root> / natural)"

JJ -> lapHYPHENshoulder_JJ
[string] lapHYPHENshoulder
[tree] JJ(lapHYPHENshoulder)
[ud] "(lapHYPHENshoulder<root> / lapHYPHENshoulder)"
[fourlang] "(lapHYPHENshoulder<root> / lapHYPHENshoulder)"

NN -> difference_NN
[string] difference
[tree] NN(difference)
[ud] "(difference<root> / difference)"
[fourlang] "(difference<root> / difference)"

JJ -> weird_JJ
[string] weird
[tree] JJ(weird)
[ud] "(weird<root> / weird)"
[fourlang] "(weird<root> / weird)"

NN -> livestock_NN
[string] livestock
[tree] NN(livestock)
[ud] "(livestock<root> / livestock)"
[fourlang] "(livestock<root> / livestock)"

NNS -> exits_NNS
[string] exits
[tree] NNS(exits)
[ud] "(exits<root> / exits)"
[fourlang] "(exits<root> / exits)"

VBG -> running_VBG
[string] running
[tree] VBG(running)
[ud] "(running<root> / running)"
[fourlang] "(running<root> / running)"

NN -> angle_NN
[string] angle
[tree] NN(angle)
[ud] "(angle<root> / angle)"
[fourlang] "(angle<root> / angle)"

NN -> rise_NN
[string] rise
[tree] NN(rise)
[ud] "(rise<root> / rise)"
[fourlang] "(rise<root> / rise)"

NNP -> Mount_NNP
[string] Mount
[tree] NNP(Mount)
[ud] "(Mount<root> / Mount)"
[fourlang] "(Mount<root> / Mount)"

NN -> escape_NN
[string] escape
[tree] NN(escape)
[ud] "(escape<root> / escape)"
[fourlang] "(escape<root> / escape)"

NNP -> Brazil_NNP
[string] Brazil
[tree] NNP(Brazil)
[ud] "(Brazil<root> / Brazil)"
[fourlang] "(Brazil<root> / Brazil)"

NNP -> September_NNP
[string] September
[tree] NNP(September)
[ud] "(September<root> / September)"
[fourlang] "(September<root> / September)"

NNP -> Robert_NNP
[string] Robert
[tree] NNP(Robert)
[ud] "(Robert<root> / Robert)"
[fourlang] "(Robert<root> / Robert)"

NNP -> Act_NNP
[string] Act
[tree] NNP(Act)
[ud] "(Act<root> / Act)"
[fourlang] "(Act<root> / Act)"

NNS -> procedures_NNS
[string] procedures
[tree] NNS(procedures)
[ud] "(procedures<root> / procedures)"
[fourlang] "(procedures<root> / procedures)"

JJ -> distorted_JJ
[string] distorted
[tree] JJ(distorted)
[ud] "(distorted<root> / distorted)"
[fourlang] "(distorted<root> / distorted)"

NN -> march_NN
[string] march
[tree] NN(march)
[ud] "(march<root> / march)"
[fourlang] "(march<root> / march)"

JJ -> deviant_JJ
[string] deviant
[tree] JJ(deviant)
[ud] "(deviant<root> / deviant)"
[fourlang] "(deviant<root> / deviant)"

PRP$ -> our_PRP$
[string] our
[tree] PRP$(our)
[ud] "(our<root> / our)"
[fourlang] "(our<root> / our)"

NNP -> Ames_NNP
[string] Ames
[tree] NNP(Ames)
[ud] "(Ames<root> / Ames)"
[fourlang] "(Ames<root> / Ames)"

NNP -> Biaggi_NNP
[string] Biaggi
[tree] NNP(Biaggi)
[ud] "(Biaggi<root> / Biaggi)"
[fourlang] "(Biaggi<root> / Biaggi)"

NNS -> rapists_NNS
[string] rapists
[tree] NNS(rapists)
[ud] "(rapists<root> / rapists)"
[fourlang] "(rapists<root> / rapists)"

NN -> operating_NN
[string] operating
[tree] NN(operating)
[ud] "(operating<root> / operating)"
[fourlang] "(operating<root> / operating)"

NNP -> Switzerland_NNP
[string] Switzerland
[tree] NNP(Switzerland)
[ud] "(Switzerland<root> / Switzerland)"
[fourlang] "(Switzerland<root> / Switzerland)"

NN -> set_NN
[string] set
[tree] NN(set)
[ud] "(set<root> / set)"
[fourlang] "(set<root> / set)"

NNP -> VOA_NNP
[string] VOA
[tree] NNP(VOA)
[ud] "(VOA<root> / VOA)"
[fourlang] "(VOA<root> / VOA)"

NNP -> Sangyo_NNP
[string] Sangyo
[tree] NNP(Sangyo)
[ud] "(Sangyo<root> / Sangyo)"
[fourlang] "(Sangyo<root> / Sangyo)"

NN -> gain_NN
[string] gain
[tree] NN(gain)
[ud] "(gain<root> / gain)"
[fourlang] "(gain<root> / gain)"

NN -> school_NN
[string] school
[tree] NN(school)
[ud] "(school<root> / school)"
[fourlang] "(school<root> / school)"

NN -> writer_NN
[string] writer
[tree] NN(writer)
[ud] "(writer<root> / writer)"
[fourlang] "(writer<root> / writer)"

NN -> competition_NN
[string] competition
[tree] NN(competition)
[ud] "(competition<root> / competition)"
[fourlang] "(competition<root> / competition)"

NNP -> Monday_NNP
[string] Monday
[tree] NNP(Monday)
[ud] "(Monday<root> / Monday)"
[fourlang] "(Monday<root> / Monday)"

JJ -> jointHYPHENventure_JJ
[string] jointHYPHENventure
[tree] JJ(jointHYPHENventure)
[ud] "(jointHYPHENventure<root> / jointHYPHENventure)"
[fourlang] "(jointHYPHENventure<root> / jointHYPHENventure)"

JJ -> aesthetic_JJ
[string] aesthetic
[tree] JJ(aesthetic)
[ud] "(aesthetic<root> / aesthetic)"
[fourlang] "(aesthetic<root> / aesthetic)"

NN -> total_NN
[string] total
[tree] NN(total)
[ud] "(total<root> / total)"
[fourlang] "(total<root> / total)"

NNP -> Hitachi_NNP
[string] Hitachi
[tree] NNP(Hitachi)
[ud] "(Hitachi<root> / Hitachi)"
[fourlang] "(Hitachi<root> / Hitachi)"

NNS -> patents_NNS
[string] patents
[tree] NNS(patents)
[ud] "(patents<root> / patents)"
[fourlang] "(patents<root> / patents)"

NNP -> Stanley_NNP
[string] Stanley
[tree] NNP(Stanley)
[ud] "(Stanley<root> / Stanley)"
[fourlang] "(Stanley<root> / Stanley)"

NN -> student_NN
[string] student
[tree] NN(student)
[ud] "(student<root> / student)"
[fourlang] "(student<root> / student)"

JJ -> Muzzling_JJ
[string] Muzzling
[tree] JJ(Muzzling)
[ud] "(Muzzling<root> / Muzzling)"
[fourlang] "(Muzzling<root> / Muzzling)"

VBD -> participated_VBD
[string] participated
[tree] VBD(participated)
[ud] "(participated<root> / participated)"
[fourlang] "(participated<root> / participated)"

NN -> recess_NN
[string] recess
[tree] NN(recess)
[ud] "(recess<root> / recess)"
[fourlang] "(recess<root> / recess)"

NNP -> Pardus_NNP
[string] Pardus
[tree] NNP(Pardus)
[ud] "(Pardus<root> / Pardus)"
[fourlang] "(Pardus<root> / Pardus)"

JJ -> third_JJ
[string] third
[tree] JJ(third)
[ud] "(third<root> / third)"
[fourlang] "(third<root> / third)"

NNS -> inventories_NNS
[string] inventories
[tree] NNS(inventories)
[ud] "(inventories<root> / inventories)"
[fourlang] "(inventories<root> / inventories)"

NNS -> amounts_NNS
[string] amounts
[tree] NNS(amounts)
[ud] "(amounts<root> / amounts)"
[fourlang] "(amounts<root> / amounts)"

NN -> coupon_NN
[string] coupon
[tree] NN(coupon)
[ud] "(coupon<root> / coupon)"
[fourlang] "(coupon<root> / coupon)"

NN -> craze_NN
[string] craze
[tree] NN(craze)
[ud] "(craze<root> / craze)"
[fourlang] "(craze<root> / craze)"

VBG -> underlying_VBG
[string] underlying
[tree] VBG(underlying)
[ud] "(underlying<root> / underlying)"
[fourlang] "(underlying<root> / underlying)"

NNP -> Mexico_NNP
[string] Mexico
[tree] NNP(Mexico)
[ud] "(Mexico<root> / Mexico)"
[fourlang] "(Mexico<root> / Mexico)"

VB -> cover_VB
[string] cover
[tree] VB(cover)
[ud] "(cover<root> / cover)"
[fourlang] "(cover<root> / cover)"

VBG -> extending_VBG
[string] extending
[tree] VBG(extending)
[ud] "(extending<root> / extending)"
[fourlang] "(extending<root> / extending)"

NNP -> Trailer_NNP
[string] Trailer
[tree] NNP(Trailer)
[ud] "(Trailer<root> / Trailer)"
[fourlang] "(Trailer<root> / Trailer)"

CD -> One_CD_W
[string] One
[tree] CD(One)
[ud] "(One<root> / One)"
[fourlang] "(One<root> / One)"

NN -> couple_NN
[string] couple
[tree] NN(couple)
[ud] "(couple<root> / couple)"
[fourlang] "(couple<root> / couple)"

NN -> officer_NN
[string] officer
[tree] NN(officer)
[ud] "(officer<root> / officer)"
[fourlang] "(officer<root> / officer)"

JJ -> odd_JJ
[string] odd
[tree] JJ(odd)
[ud] "(odd<root> / odd)"
[fourlang] "(odd<root> / odd)"

NN -> bomber_NN
[string] bomber
[tree] NN(bomber)
[ud] "(bomber<root> / bomber)"
[fourlang] "(bomber<root> / bomber)"

JJ -> semiannual_JJ
[string] semiannual
[tree] JJ(semiannual)
[ud] "(semiannual<root> / semiannual)"
[fourlang] "(semiannual<root> / semiannual)"

NN -> drug_NN
[string] drug
[tree] NN(drug)
[ud] "(drug<root> / drug)"
[fourlang] "(drug<root> / drug)"

JJ -> wherewithal_JJ
[string] wherewithal
[tree] JJ(wherewithal)
[ud] "(wherewithal<root> / wherewithal)"
[fourlang] "(wherewithal<root> / wherewithal)"

VBN -> announced_VBN
[string] announced
[tree] VBN(announced)
[ud] "(announced<root> / announced)"
[fourlang] "(announced<root> / announced)"

JJ -> minimum_JJ
[string] minimum
[tree] JJ(minimum)
[ud] "(minimum<root> / minimum)"
[fourlang] "(minimum<root> / minimum)"

NN -> chassis_NN
[string] chassis
[tree] NN(chassis)
[ud] "(chassis<root> / chassis)"
[fourlang] "(chassis<root> / chassis)"

NN -> manager_NN
[string] manager
[tree] NN(manager)
[ud] "(manager<root> / manager)"
[fourlang] "(manager<root> / manager)"

NN -> None_NN
[string] None
[tree] NN(None)
[ud] "(None<root> / None)"
[fourlang] "(None<root> / None)"

NN -> foodHYPHENindustry_NN
[string] foodHYPHENindustry
[tree] NN(foodHYPHENindustry)
[ud] "(foodHYPHENindustry<root> / foodHYPHENindustry)"
[fourlang] "(foodHYPHENindustry<root> / foodHYPHENindustry)"

NN -> lion_NN
[string] lion
[tree] NN(lion)
[ud] "(lion<root> / lion)"
[fourlang] "(lion<root> / lion)"

NNP -> Seymour_NNP
[string] Seymour
[tree] NNP(Seymour)
[ud] "(Seymour<root> / Seymour)"
[fourlang] "(Seymour<root> / Seymour)"

IN -> Than_IN
[string] Than
[tree] IN(Than)
[ud] "(Than<root> / Than)"
[fourlang] "(Than<root> / Than)"

NN -> language_NN
[string] language
[tree] NN(language)
[ud] "(language<root> / language)"
[fourlang] "(language<root> / language)"

NN -> comeback_NN
[string] comeback
[tree] NN(comeback)
[ud] "(comeback<root> / comeback)"
[fourlang] "(comeback<root> / comeback)"

VBN -> auctioned_VBN
[string] auctioned
[tree] VBN(auctioned)
[ud] "(auctioned<root> / auctioned)"
[fourlang] "(auctioned<root> / auctioned)"

NNP -> Mariotta_NNP
[string] Mariotta
[tree] NNP(Mariotta)
[ud] "(Mariotta<root> / Mariotta)"
[fourlang] "(Mariotta<root> / Mariotta)"

NNP -> News_NNP
[string] News
[tree] NNP(News)
[ud] "(News<root> / News)"
[fourlang] "(News<root> / News)"

NNS -> corners_NNS
[string] corners
[tree] NNS(corners)
[ud] "(corners<root> / corners)"
[fourlang] "(corners<root> / corners)"

NN -> heart_NN
[string] heart
[tree] NN(heart)
[ud] "(heart<root> / heart)"
[fourlang] "(heart<root> / heart)"

NNP -> SenPERIOD_NNP
[string] SenPERIOD
[tree] NNP(SenPERIOD)
[ud] "(SenPERIOD<root> / SenPERIOD)"
[fourlang] "(SenPERIOD<root> / SenPERIOD)"

JJ -> sweeping_JJ
[string] sweeping
[tree] JJ(sweeping)
[ud] "(sweeping<root> / sweeping)"
[fourlang] "(sweeping<root> / sweeping)"

NN -> indictment_NN
[string] indictment
[tree] NN(indictment)
[ud] "(indictment<root> / indictment)"
[fourlang] "(indictment<root> / indictment)"

VBG -> softening_VBG
[string] softening
[tree] VBG(softening)
[ud] "(softening<root> / softening)"
[fourlang] "(softening<root> / softening)"

NNS -> trays_NNS
[string] trays
[tree] NNS(trays)
[ud] "(trays<root> / trays)"
[fourlang] "(trays<root> / trays)"

NNS -> ships_NNS
[string] ships
[tree] NNS(ships)
[ud] "(ships<root> / ships)"
[fourlang] "(ships<root> / ships)"

WRB -> how_WRB
[string] how
[tree] WRB(how)
[ud] "(how<root> / how)"
[fourlang] "(how<root> / how)"

NNP -> Sacramento_NNP
[string] Sacramento
[tree] NNP(Sacramento)
[ud] "(Sacramento<root> / Sacramento)"
[fourlang] "(Sacramento<root> / Sacramento)"

NNS -> machines_NNS
[string] machines
[tree] NNS(machines)
[ud] "(machines<root> / machines)"
[fourlang] "(machines<root> / machines)"

NN -> tower_NN
[string] tower
[tree] NN(tower)
[ud] "(tower<root> / tower)"
[fourlang] "(tower<root> / tower)"

NNP -> Komatsu_NNP
[string] Komatsu
[tree] NNP(Komatsu)
[ud] "(Komatsu<root> / Komatsu)"
[fourlang] "(Komatsu<root> / Komatsu)"

NNS -> platforms_NNS
[string] platforms
[tree] NNS(platforms)
[ud] "(platforms<root> / platforms)"
[fourlang] "(platforms<root> / platforms)"

NNP -> Garbage_NNP
[string] Garbage
[tree] NNP(Garbage)
[ud] "(Garbage<root> / Garbage)"
[fourlang] "(Garbage<root> / Garbage)"

NN -> execution_NN
[string] execution
[tree] NN(execution)
[ud] "(execution<root> / execution)"
[fourlang] "(execution<root> / execution)"

VBN -> parched_VBN
[string] parched
[tree] VBN(parched)
[ud] "(parched<root> / parched)"
[fourlang] "(parched<root> / parched)"

NN -> shape_NN
[string] shape
[tree] NN(shape)
[ud] "(shape<root> / shape)"
[fourlang] "(shape<root> / shape)"

NN -> need_NN
[string] need
[tree] NN(need)
[ud] "(need<root> / need)"
[fourlang] "(need<root> / need)"

NNPS -> Soviets_NNPS
[string] Soviets
[tree] NNPS(Soviets)
[ud] "(Soviets<root> / Soviets)"
[fourlang] "(Soviets<root> / Soviets)"

VBD -> held_VBD
[string] held
[tree] VBD(held)
[ud] "(held<root> / held)"
[fourlang] "(held<root> / held)"

JJ -> diversified_JJ
[string] diversified
[tree] JJ(diversified)
[ud] "(diversified<root> / diversified)"
[fourlang] "(diversified<root> / diversified)"

NNS -> penalties_NNS
[string] penalties
[tree] NNS(penalties)
[ud] "(penalties<root> / penalties)"
[fourlang] "(penalties<root> / penalties)"

JJ -> earlyHYPHENretirement_JJ
[string] earlyHYPHENretirement
[tree] JJ(earlyHYPHENretirement)
[ud] "(earlyHYPHENretirement<root> / earlyHYPHENretirement)"
[fourlang] "(earlyHYPHENretirement<root> / earlyHYPHENretirement)"

JJ -> interstate_JJ
[string] interstate
[tree] JJ(interstate)
[ud] "(interstate<root> / interstate)"
[fourlang] "(interstate<root> / interstate)"

NN -> junk_NN
[string] junk
[tree] NN(junk)
[ud] "(junk<root> / junk)"
[fourlang] "(junk<root> / junk)"

IN -> off_IN
[string] off
[tree] IN(off)
[ud] "(off<root> / off)"
[fourlang] "(off<root> / off)"

WRB -> when_WRB
[string] when
[tree] WRB(when)
[ud] "(when<root> / when)"
[fourlang] "(when<root> / when)"

NNS -> appliances_NNS
[string] appliances
[tree] NNS(appliances)
[ud] "(appliances<root> / appliances)"
[fourlang] "(appliances<root> / appliances)"

JJ -> outside_JJ
[string] outside
[tree] JJ(outside)
[ud] "(outside<root> / outside)"
[fourlang] "(outside<root> / outside)"

NN -> help_NN
[string] help
[tree] NN(help)
[ud] "(help<root> / help)"
[fourlang] "(help<root> / help)"

JJ -> standard_JJ
[string] standard
[tree] JJ(standard)
[ud] "(standard<root> / standard)"
[fourlang] "(standard<root> / standard)"

NN -> Program_NN
[string] Program
[tree] NN(Program)
[ud] "(Program<root> / Program)"
[fourlang] "(Program<root> / Program)"

NNS -> incentives_NNS
[string] incentives
[tree] NNS(incentives)
[ud] "(incentives<root> / incentives)"
[fourlang] "(incentives<root> / incentives)"

NNP -> Pierre_NNP
[string] Pierre
[tree] NNP(Pierre)
[ud] "(Pierre<root> / Pierre)"
[fourlang] "(Pierre<root> / Pierre)"

NNS -> regulators_NNS
[string] regulators
[tree] NNS(regulators)
[ud] "(regulators<root> / regulators)"
[fourlang] "(regulators<root> / regulators)"

VBN -> regarded_VBN
[string] regarded
[tree] VBN(regarded)
[ud] "(regarded<root> / regarded)"
[fourlang] "(regarded<root> / regarded)"

NN -> backyard_NN
[string] backyard
[tree] NN(backyard)
[ud] "(backyard<root> / backyard)"
[fourlang] "(backyard<root> / backyard)"

NNS -> crops_NNS
[string] crops
[tree] NNS(crops)
[ud] "(crops<root> / crops)"
[fourlang] "(crops<root> / crops)"

NN -> Diaper_NN
[string] Diaper
[tree] NN(Diaper)
[ud] "(Diaper<root> / Diaper)"
[fourlang] "(Diaper<root> / Diaper)"

JJ -> exact_JJ
[string] exact
[tree] JJ(exact)
[ud] "(exact<root> / exact)"
[fourlang] "(exact<root> / exact)"

NN -> crisis_NN
[string] crisis
[tree] NN(crisis)
[ud] "(crisis<root> / crisis)"
[fourlang] "(crisis<root> / crisis)"

NNS -> instances_NNS
[string] instances
[tree] NNS(instances)
[ud] "(instances<root> / instances)"
[fourlang] "(instances<root> / instances)"

VB -> impose_VB
[string] impose
[tree] VB(impose)
[ud] "(impose<root> / impose)"
[fourlang] "(impose<root> / impose)"

RB -> directly_RB
[string] directly
[tree] RB(directly)
[ud] "(directly<root> / directly)"
[fourlang] "(directly<root> / directly)"

NN -> diplomacy_NN
[string] diplomacy
[tree] NN(diplomacy)
[ud] "(diplomacy<root> / diplomacy)"
[fourlang] "(diplomacy<root> / diplomacy)"

NNP -> Biscayne_NNP
[string] Biscayne
[tree] NNP(Biscayne)
[ud] "(Biscayne<root> / Biscayne)"
[fourlang] "(Biscayne<root> / Biscayne)"

JJ -> fetalHYPHENtissue_JJ
[string] fetalHYPHENtissue
[tree] JJ(fetalHYPHENtissue)
[ud] "(fetalHYPHENtissue<root> / fetalHYPHENtissue)"
[fourlang] "(fetalHYPHENtissue<root> / fetalHYPHENtissue)"

NNS -> savings_NNS
[string] savings
[tree] NNS(savings)
[ud] "(savings<root> / savings)"
[fourlang] "(savings<root> / savings)"

VBN -> said_VBN
[string] said
[tree] VBN(said)
[ud] "(said<root> / said)"
[fourlang] "(said<root> / said)"

NNS -> affiliates_NNS
[string] affiliates
[tree] NNS(affiliates)
[ud] "(affiliates<root> / affiliates)"
[fourlang] "(affiliates<root> / affiliates)"

NNS -> staffs_NNS
[string] staffs
[tree] NNS(staffs)
[ud] "(staffs<root> / staffs)"
[fourlang] "(staffs<root> / staffs)"

NNS -> Modifications_NNS
[string] Modifications
[tree] NNS(Modifications)
[ud] "(Modifications<root> / Modifications)"
[fourlang] "(Modifications<root> / Modifications)"

NNP -> State_NNP
[string] State
[tree] NNP(State)
[ud] "(State<root> / State)"
[fourlang] "(State<root> / State)"

VB -> fill_VB
[string] fill
[tree] VB(fill)
[ud] "(fill<root> / fill)"
[fourlang] "(fill<root> / fill)"

JJ -> Net_JJ
[string] Net
[tree] JJ(Net)
[ud] "(Net<root> / Net)"
[fourlang] "(Net<root> / Net)"

NN -> offering_NN
[string] offering
[tree] NN(offering)
[ud] "(offering<root> / offering)"
[fourlang] "(offering<root> / offering)"

IN -> into_IN
[string] into
[tree] IN(into)
[ud] "(into<root> / into)"
[fourlang] "(into<root> / into)"

NNS -> wages_NNS
[string] wages
[tree] NNS(wages)
[ud] "(wages<root> / wages)"
[fourlang] "(wages<root> / wages)"

JJ -> unconstitutional_JJ
[string] unconstitutional
[tree] JJ(unconstitutional)
[ud] "(unconstitutional<root> / unconstitutional)"
[fourlang] "(unconstitutional<root> / unconstitutional)"

RB -> continuously_RB
[string] continuously
[tree] RB(continuously)
[ud] "(continuously<root> / continuously)"
[fourlang] "(continuously<root> / continuously)"

JJ -> sevenHYPHENyen_JJ
[string] sevenHYPHENyen
[tree] JJ(sevenHYPHENyen)
[ud] "(sevenHYPHENyen<root> / sevenHYPHENyen)"
[fourlang] "(sevenHYPHENyen<root> / sevenHYPHENyen)"

NNS -> imbalances_NNS
[string] imbalances
[tree] NNS(imbalances)
[ud] "(imbalances<root> / imbalances)"
[fourlang] "(imbalances<root> / imbalances)"

NN -> consumer_NN
[string] consumer
[tree] NN(consumer)
[ud] "(consumer<root> / consumer)"
[fourlang] "(consumer<root> / consumer)"

NNS -> filings_NNS
[string] filings
[tree] NNS(filings)
[ud] "(filings<root> / filings)"
[fourlang] "(filings<root> / filings)"

NN -> chain_NN
[string] chain
[tree] NN(chain)
[ud] "(chain<root> / chain)"
[fourlang] "(chain<root> / chain)"

CC -> versus_CC
[string] versus
[tree] CC(versus)
[ud] "(versus<root> / versus)"
[fourlang] "(versus<root> / versus)"

NN -> programming_NN
[string] programming
[tree] NN(programming)
[ud] "(programming<root> / programming)"
[fourlang] "(programming<root> / programming)"

NN -> month_NN
[string] month
[tree] NN(month)
[ud] "(month<root> / month)"
[fourlang] "(month<root> / month)"

NNS -> Mitsubishi_NNS
[string] Mitsubishi
[tree] NNS(Mitsubishi)
[ud] "(Mitsubishi<root> / Mitsubishi)"
[fourlang] "(Mitsubishi<root> / Mitsubishi)"

NNP -> CrayHYPHENDIGIT_NNP
[string] CrayHYPHENDIGIT
[tree] NNP(CrayHYPHENDIGIT)
[ud] "(CrayHYPHENDIGIT<root> / CrayHYPHENDIGIT)"
[fourlang] "(CrayHYPHENDIGIT<root> / CrayHYPHENDIGIT)"

NNS -> stocks_NNS
[string] stocks
[tree] NNS(stocks)
[ud] "(stocks<root> / stocks)"
[fourlang] "(stocks<root> / stocks)"

VBN -> withdrawn_VBN
[string] withdrawn
[tree] VBN(withdrawn)
[ud] "(withdrawn<root> / withdrawn)"
[fourlang] "(withdrawn<root> / withdrawn)"

NN -> motive_NN
[string] motive
[tree] NN(motive)
[ud] "(motive<root> / motive)"
[fourlang] "(motive<root> / motive)"

NN -> budget_NN
[string] budget
[tree] NN(budget)
[ud] "(budget<root> / budget)"
[fourlang] "(budget<root> / budget)"

NNS -> quarters_NNS
[string] quarters
[tree] NNS(quarters)
[ud] "(quarters<root> / quarters)"
[fourlang] "(quarters<root> / quarters)"

NN -> markdown_NN
[string] markdown
[tree] NN(markdown)
[ud] "(markdown<root> / markdown)"
[fourlang] "(markdown<root> / markdown)"

NNP -> Tiphook_NNP
[string] Tiphook
[tree] NNP(Tiphook)
[ud] "(Tiphook<root> / Tiphook)"
[fourlang] "(Tiphook<root> / Tiphook)"

NNP -> River_NNP
[string] River
[tree] NNP(River)
[ud] "(River<root> / River)"
[fourlang] "(River<root> / River)"

RB -> relatively_RB
[string] relatively
[tree] RB(relatively)
[ud] "(relatively<root> / relatively)"
[fourlang] "(relatively<root> / relatively)"

NNP -> Gillespie_NNP
[string] Gillespie
[tree] NNP(Gillespie)
[ud] "(Gillespie<root> / Gillespie)"
[fourlang] "(Gillespie<root> / Gillespie)"

NNS -> Stockholders_NNS
[string] Stockholders
[tree] NNS(Stockholders)
[ud] "(Stockholders<root> / Stockholders)"
[fourlang] "(Stockholders<root> / Stockholders)"

VB -> prove_VB
[string] prove
[tree] VB(prove)
[ud] "(prove<root> / prove)"
[fourlang] "(prove<root> / prove)"

NNP -> Mae_NNP
[string] Mae
[tree] NNP(Mae)
[ud] "(Mae<root> / Mae)"
[fourlang] "(Mae<root> / Mae)"

NNS -> requirements_NNS
[string] requirements
[tree] NNS(requirements)
[ud] "(requirements<root> / requirements)"
[fourlang] "(requirements<root> / requirements)"

NNP -> Jerry_NNP
[string] Jerry
[tree] NNP(Jerry)
[ud] "(Jerry<root> / Jerry)"
[fourlang] "(Jerry<root> / Jerry)"

NNP -> Association_NNP
[string] Association
[tree] NNP(Association)
[ud] "(Association<root> / Association)"
[fourlang] "(Association<root> / Association)"

NN -> crop_NN
[string] crop
[tree] NN(crop)
[ud] "(crop<root> / crop)"
[fourlang] "(crop<root> / crop)"

NNS -> droughts_NNS
[string] droughts
[tree] NNS(droughts)
[ud] "(droughts<root> / droughts)"
[fourlang] "(droughts<root> / droughts)"

NNS -> criteria_NNS
[string] criteria
[tree] NNS(criteria)
[ud] "(criteria<root> / criteria)"
[fourlang] "(criteria<root> / criteria)"

NN -> division_NN
[string] division
[tree] NN(division)
[ud] "(division<root> / division)"
[fourlang] "(division<root> / division)"

VBN -> qualified_VBN
[string] qualified
[tree] VBN(qualified)
[ud] "(qualified<root> / qualified)"
[fourlang] "(qualified<root> / qualified)"

NNP -> Justice_NNP
[string] Justice
[tree] NNP(Justice)
[ud] "(Justice<root> / Justice)"
[fourlang] "(Justice<root> / Justice)"

NNP -> NBC_NNP
[string] NBC
[tree] NNP(NBC)
[ud] "(NBC<root> / NBC)"
[fourlang] "(NBC<root> / NBC)"

_NONE_ -> DIGIT__NONE_
[string] DIGIT
[tree] _NONE_(DIGIT)
[ud] "(DIGIT<root> / DIGIT)"
[fourlang] "(DIGIT<root> / DIGIT)"

NN -> holiday_NN
[string] holiday
[tree] NN(holiday)
[ud] "(holiday<root> / holiday)"
[fourlang] "(holiday<root> / holiday)"

NNS -> discrepancies_NNS
[string] discrepancies
[tree] NNS(discrepancies)
[ud] "(discrepancies<root> / discrepancies)"
[fourlang] "(discrepancies<root> / discrepancies)"

JJ -> actual_JJ
[string] actual
[tree] JJ(actual)
[ud] "(actual<root> / actual)"
[fourlang] "(actual<root> / actual)"

NN -> money_NN
[string] money
[tree] NN(money)
[ud] "(money<root> / money)"
[fourlang] "(money<root> / money)"

RB -> exceptionally_RB
[string] exceptionally
[tree] RB(exceptionally)
[ud] "(exceptionally<root> / exceptionally)"
[fourlang] "(exceptionally<root> / exceptionally)"

NN -> Section_NN
[string] Section
[tree] NN(Section)
[ud] "(Section<root> / Section)"
[fourlang] "(Section<root> / Section)"

NN -> ounce_NN
[string] ounce
[tree] NN(ounce)
[ud] "(ounce<root> / ounce)"
[fourlang] "(ounce<root> / ounce)"

JJ -> enlarged_JJ
[string] enlarged
[tree] JJ(enlarged)
[ud] "(enlarged<root> / enlarged)"
[fourlang] "(enlarged<root> / enlarged)"

NNS -> nations_NNS
[string] nations
[tree] NNS(nations)
[ud] "(nations<root> / nations)"
[fourlang] "(nations<root> / nations)"

NNP -> Board_NNP
[string] Board
[tree] NNP(Board)
[ud] "(Board<root> / Board)"
[fourlang] "(Board<root> / Board)"

NNP -> Designated_NNP
[string] Designated
[tree] NNP(Designated)
[ud] "(Designated<root> / Designated)"
[fourlang] "(Designated<root> / Designated)"

NNP -> Chicago_NNP
[string] Chicago
[tree] NNP(Chicago)
[ud] "(Chicago<root> / Chicago)"
[fourlang] "(Chicago<root> / Chicago)"

JJ -> strict_JJ
[string] strict
[tree] JJ(strict)
[ud] "(strict<root> / strict)"
[fourlang] "(strict<root> / strict)"

JJ -> morphogenetic_JJ
[string] morphogenetic
[tree] JJ(morphogenetic)
[ud] "(morphogenetic<root> / morphogenetic)"
[fourlang] "(morphogenetic<root> / morphogenetic)"

NNPS -> Cabernets_NNPS
[string] Cabernets
[tree] NNPS(Cabernets)
[ud] "(Cabernets<root> / Cabernets)"
[fourlang] "(Cabernets<root> / Cabernets)"

NNP -> Fed_NNP
[string] Fed
[tree] NNP(Fed)
[ud] "(Fed<root> / Fed)"
[fourlang] "(Fed<root> / Fed)"

NN -> bulk_NN
[string] bulk
[tree] NN(bulk)
[ud] "(bulk<root> / bulk)"
[fourlang] "(bulk<root> / bulk)"

NNS -> rifles_NNS
[string] rifles
[tree] NNS(rifles)
[ud] "(rifles<root> / rifles)"
[fourlang] "(rifles<root> / rifles)"

NNP -> Institute_NNP
[string] Institute
[tree] NNP(Institute)
[ud] "(Institute<root> / Institute)"
[fourlang] "(Institute<root> / Institute)"

NN -> plate_NN
[string] plate
[tree] NN(plate)
[ud] "(plate<root> / plate)"
[fourlang] "(plate<root> / plate)"

NNP -> INGERSOLLHYPHENRAND_NNP
[string] INGERSOLLHYPHENRAND
[tree] NNP(INGERSOLLHYPHENRAND)
[ud] "(INGERSOLLHYPHENRAND<root> / INGERSOLLHYPHENRAND)"
[fourlang] "(INGERSOLLHYPHENRAND<root> / INGERSOLLHYPHENRAND)"

NNS -> costs_NNS
[string] costs
[tree] NNS(costs)
[ud] "(costs<root> / costs)"
[fourlang] "(costs<root> / costs)"

NNPS -> Centers_NNPS
[string] Centers
[tree] NNPS(Centers)
[ud] "(Centers<root> / Centers)"
[fourlang] "(Centers<root> / Centers)"

RB -> highly_RB
[string] highly
[tree] RB(highly)
[ud] "(highly<root> / highly)"
[fourlang] "(highly<root> / highly)"

NNP -> UPERIODSPERIOD_NNP
[string] UPERIODSPERIOD
[tree] NNP(UPERIODSPERIOD)
[ud] "(UPERIODSPERIOD<root> / UPERIODSPERIOD)"
[fourlang] "(UPERIODSPERIOD<root> / UPERIODSPERIOD)"

NNP -> Program_NNP
[string] Program
[tree] NNP(Program)
[ud] "(Program<root> / Program)"
[fourlang] "(Program<root> / Program)"

IN -> at_IN
[string] at
[tree] IN(at)
[ud] "(at<root> / at)"
[fourlang] "(at<root> / at)"

NN -> fraud_NN
[string] fraud
[tree] NN(fraud)
[ud] "(fraud<root> / fraud)"
[fourlang] "(fraud<root> / fraud)"

JJ -> Japanese_JJ
[string] Japanese
[tree] JJ(Japanese)
[ud] "(Japanese<root> / Japanese)"
[fourlang] "(Japanese<root> / Japanese)"

NNS -> Markets_NNS
[string] Markets
[tree] NNS(Markets)
[ud] "(Markets<root> / Markets)"
[fourlang] "(Markets<root> / Markets)"

NNP -> PPERIOD_NNP
[string] PPERIOD
[tree] NNP(PPERIOD)
[ud] "(PPERIOD<root> / PPERIOD)"
[fourlang] "(PPERIOD<root> / PPERIOD)"

NN -> beginning_NN
[string] beginning
[tree] NN(beginning)
[ud] "(beginning<root> / beginning)"
[fourlang] "(beginning<root> / beginning)"

NNP -> Namibia_NNP
[string] Namibia
[tree] NNP(Namibia)
[ud] "(Namibia<root> / Namibia)"
[fourlang] "(Namibia<root> / Namibia)"

JJ -> additional_JJ
[string] additional
[tree] JJ(additional)
[ud] "(additional<root> / additional)"
[fourlang] "(additional<root> / additional)"

NN -> home_NN
[string] home
[tree] NN(home)
[ud] "(home<root> / home)"
[fourlang] "(home<root> / home)"

NNS -> reports_NNS
[string] reports
[tree] NNS(reports)
[ud] "(reports<root> / reports)"
[fourlang] "(reports<root> / reports)"

NNP -> David_NNP
[string] David
[tree] NNP(David)
[ud] "(David<root> / David)"
[fourlang] "(David<root> / David)"

NN -> income_NN
[string] income
[tree] NN(income)
[ud] "(income<root> / income)"
[fourlang] "(income<root> / income)"

NNS -> diseases_NNS
[string] diseases
[tree] NNS(diseases)
[ud] "(diseases<root> / diseases)"
[fourlang] "(diseases<root> / diseases)"

FW -> etcPERIOD_FW
[string] etcPERIOD
[tree] FW(etcPERIOD)
[ud] "(etcPERIOD<root> / etcPERIOD)"
[fourlang] "(etcPERIOD<root> / etcPERIOD)"

NNP -> AG_NNP
[string] AG
[tree] NNP(AG)
[ud] "(AG<root> / AG)"
[fourlang] "(AG<root> / AG)"

NN -> fatherHYPHENinHYPHENlaw_NN
[string] fatherHYPHENinHYPHENlaw
[tree] NN(fatherHYPHENinHYPHENlaw)
[ud] "(fatherHYPHENinHYPHENlaw<root> / fatherHYPHENinHYPHENlaw)"
[fourlang] "(fatherHYPHENinHYPHENlaw<root> / fatherHYPHENinHYPHENlaw)"

NNP -> Times_NNP
[string] Times
[tree] NNP(Times)
[ud] "(Times<root> / Times)"
[fourlang] "(Times<root> / Times)"

DT -> THE_DT
[string] THE
[tree] DT(THE)
[ud] "(THE<root> / THE)"
[fourlang] "(THE<root> / THE)"

VBN -> played_VBN
[string] played
[tree] VBN(played)
[ud] "(played<root> / played)"
[fourlang] "(played<root> / played)"

NN -> afternoon_NN
[string] afternoon
[tree] NN(afternoon)
[ud] "(afternoon<root> / afternoon)"
[fourlang] "(afternoon<root> / afternoon)"

NN -> hoopla_NN
[string] hoopla
[tree] NN(hoopla)
[ud] "(hoopla<root> / hoopla)"
[fourlang] "(hoopla<root> / hoopla)"

NNP -> Circle_NNP
[string] Circle
[tree] NNP(Circle)
[ud] "(Circle<root> / Circle)"
[fourlang] "(Circle<root> / Circle)"

NNP -> Stearn_NNP
[string] Stearn
[tree] NNP(Stearn)
[ud] "(Stearn<root> / Stearn)"
[fourlang] "(Stearn<root> / Stearn)"

VB -> bend_VB
[string] bend
[tree] VB(bend)
[ud] "(bend<root> / bend)"
[fourlang] "(bend<root> / bend)"

RB -> also_RB
[string] also
[tree] RB(also)
[ud] "(also<root> / also)"
[fourlang] "(also<root> / also)"

JJ -> large_JJ
[string] large
[tree] JJ(large)
[ud] "(large<root> / large)"
[fourlang] "(large<root> / large)"

VBN -> enacted_VBN
[string] enacted
[tree] VBN(enacted)
[ud] "(enacted<root> / enacted)"
[fourlang] "(enacted<root> / enacted)"

JJ -> intraocular_JJ
[string] intraocular
[tree] JJ(intraocular)
[ud] "(intraocular<root> / intraocular)"
[fourlang] "(intraocular<root> / intraocular)"

JJS -> dirtiest_JJS
[string] dirtiest
[tree] JJS(dirtiest)
[ud] "(dirtiest<root> / dirtiest)"
[fourlang] "(dirtiest<root> / dirtiest)"

NNP -> Primerica_NNP
[string] Primerica
[tree] NNP(Primerica)
[ud] "(Primerica<root> / Primerica)"
[fourlang] "(Primerica<root> / Primerica)"

NNP -> Barron_NNP
[string] Barron
[tree] NNP(Barron)
[ud] "(Barron<root> / Barron)"
[fourlang] "(Barron<root> / Barron)"

NNP -> Koito_NNP
[string] Koito
[tree] NNP(Koito)
[ud] "(Koito<root> / Koito)"
[fourlang] "(Koito<root> / Koito)"

JJ -> partisan_JJ
[string] partisan
[tree] JJ(partisan)
[ud] "(partisan<root> / partisan)"
[fourlang] "(partisan<root> / partisan)"

NN -> membership_NN
[string] membership
[tree] NN(membership)
[ud] "(membership<root> / membership)"
[fourlang] "(membership<root> / membership)"

NN -> request_NN
[string] request
[tree] NN(request)
[ud] "(request<root> / request)"
[fourlang] "(request<root> / request)"

NNP -> Creek_NNP
[string] Creek
[tree] NNP(Creek)
[ud] "(Creek<root> / Creek)"
[fourlang] "(Creek<root> / Creek)"

VBD -> set_VBD
[string] set
[tree] VBD(set)
[ud] "(set<root> / set)"
[fourlang] "(set<root> / set)"

JJ -> inHYPHENstore_JJ
[string] inHYPHENstore
[tree] JJ(inHYPHENstore)
[ud] "(inHYPHENstore<root> / inHYPHENstore)"
[fourlang] "(inHYPHENstore<root> / inHYPHENstore)"

CD -> million_CD
[string] million
[tree] CD(million)
[ud] "(million<root> / million)"
[fourlang] "(million<root> / million)"

NNP -> Rosenblum_NNP
[string] Rosenblum
[tree] NNP(Rosenblum)
[ud] "(Rosenblum<root> / Rosenblum)"
[fourlang] "(Rosenblum<root> / Rosenblum)"

JJ -> statewide_JJ
[string] statewide
[tree] JJ(statewide)
[ud] "(statewide<root> / statewide)"
[fourlang] "(statewide<root> / statewide)"

NNS -> bridges_NNS
[string] bridges
[tree] NNS(bridges)
[ud] "(bridges<root> / bridges)"
[fourlang] "(bridges<root> / bridges)"

NN -> purse_NN
[string] purse
[tree] NN(purse)
[ud] "(purse<root> / purse)"
[fourlang] "(purse<root> / purse)"

NNP -> Roukema_NNP
[string] Roukema
[tree] NNP(Roukema)
[ud] "(Roukema<root> / Roukema)"
[fourlang] "(Roukema<root> / Roukema)"

NN -> executive_NN
[string] executive
[tree] NN(executive)
[ud] "(executive<root> / executive)"
[fourlang] "(executive<root> / executive)"

JJ -> interesting_JJ
[string] interesting
[tree] JJ(interesting)
[ud] "(interesting<root> / interesting)"
[fourlang] "(interesting<root> / interesting)"

NN -> vision_NN
[string] vision
[tree] NN(vision)
[ud] "(vision<root> / vision)"
[fourlang] "(vision<root> / vision)"

JJ -> innovative_JJ
[string] innovative
[tree] JJ(innovative)
[ud] "(innovative<root> / innovative)"
[fourlang] "(innovative<root> / innovative)"

NNP -> Acceptance_NNP
[string] Acceptance
[tree] NNP(Acceptance)
[ud] "(Acceptance<root> / Acceptance)"
[fourlang] "(Acceptance<root> / Acceptance)"

NNP -> Yoshihashi_NNP
[string] Yoshihashi
[tree] NNP(Yoshihashi)
[ud] "(Yoshihashi<root> / Yoshihashi)"
[fourlang] "(Yoshihashi<root> / Yoshihashi)"

NNP -> Telephone_NNP
[string] Telephone
[tree] NNP(Telephone)
[ud] "(Telephone<root> / Telephone)"
[fourlang] "(Telephone<root> / Telephone)"

NN -> pressure_NN
[string] pressure
[tree] NN(pressure)
[ud] "(pressure<root> / pressure)"
[fourlang] "(pressure<root> / pressure)"

NNS -> folks_NNS
[string] folks
[tree] NNS(folks)
[ud] "(folks<root> / folks)"
[fourlang] "(folks<root> / folks)"

NN -> base_NN
[string] base
[tree] NN(base)
[ud] "(base<root> / base)"
[fourlang] "(base<root> / base)"

PDT -> all_PDT
[string] all
[tree] PDT(all)
[ud] "(all<root> / all)"
[fourlang] "(all<root> / all)"

VBG -> swelling_VBG
[string] swelling
[tree] VBG(swelling)
[ud] "(swelling<root> / swelling)"
[fourlang] "(swelling<root> / swelling)"

NNS -> partners_NNS
[string] partners
[tree] NNS(partners)
[ud] "(partners<root> / partners)"
[fourlang] "(partners<root> / partners)"

IN -> than_IN
[string] than
[tree] IN(than)
[ud] "(than<root> / than)"
[fourlang] "(than<root> / than)"

NN -> vintage_NN
[string] vintage
[tree] NN(vintage)
[ud] "(vintage<root> / vintage)"
[fourlang] "(vintage<root> / vintage)"

NN -> medicine_NN
[string] medicine
[tree] NN(medicine)
[ud] "(medicine<root> / medicine)"
[fourlang] "(medicine<root> / medicine)"

NNP -> Asada_NNP
[string] Asada
[tree] NNP(Asada)
[ud] "(Asada<root> / Asada)"
[fourlang] "(Asada<root> / Asada)"

VB -> operate_VB
[string] operate
[tree] VB(operate)
[ud] "(operate<root> / operate)"
[fourlang] "(operate<root> / operate)"

NN -> relief_NN
[string] relief
[tree] NN(relief)
[ud] "(relief<root> / relief)"
[fourlang] "(relief<root> / relief)"

PRP -> I_PRP
[string] I
[tree] PRP(I)
[ud] "(I<root> / I)"
[fourlang] "(I<root> / I)"

NNS -> banks_NNS
[string] banks
[tree] NNS(banks)
[ud] "(banks<root> / banks)"
[fourlang] "(banks<root> / banks)"

NN -> Erbamont_NN
[string] Erbamont
[tree] NN(Erbamont)
[ud] "(Erbamont<root> / Erbamont)"
[fourlang] "(Erbamont<root> / Erbamont)"

NNS -> Editorials_NNS
[string] Editorials
[tree] NNS(Editorials)
[ud] "(Editorials<root> / Editorials)"
[fourlang] "(Editorials<root> / Editorials)"

NNP -> Barney_NNP
[string] Barney
[tree] NNP(Barney)
[ud] "(Barney<root> / Barney)"
[fourlang] "(Barney<root> / Barney)"

IN -> through_IN
[string] through
[tree] IN(through)
[ud] "(through<root> / through)"
[fourlang] "(through<root> / through)"

JJ -> next_JJ
[string] next
[tree] JJ(next)
[ud] "(next<root> / next)"
[fourlang] "(next<root> / next)"

NN -> time_NN
[string] time
[tree] NN(time)
[ud] "(time<root> / time)"
[fourlang] "(time<root> / time)"

NN -> society_NN
[string] society
[tree] NN(society)
[ud] "(society<root> / society)"
[fourlang] "(society<root> / society)"

VBN -> developed_VBN
[string] developed
[tree] VBN(developed)
[ud] "(developed<root> / developed)"
[fourlang] "(developed<root> / developed)"

NNS -> dealings_NNS
[string] dealings
[tree] NNS(dealings)
[ud] "(dealings<root> / dealings)"
[fourlang] "(dealings<root> / dealings)"

JJ -> final_JJ
[string] final
[tree] JJ(final)
[ud] "(final<root> / final)"
[fourlang] "(final<root> / final)"

NN -> lead_NN
[string] lead
[tree] NN(lead)
[ud] "(lead<root> / lead)"
[fourlang] "(lead<root> / lead)"

JJ -> ongoing_JJ
[string] ongoing
[tree] JJ(ongoing)
[ud] "(ongoing<root> / ongoing)"
[fourlang] "(ongoing<root> / ongoing)"

NNS -> conversations_NNS
[string] conversations
[tree] NNS(conversations)
[ud] "(conversations<root> / conversations)"
[fourlang] "(conversations<root> / conversations)"

NN -> optimism_NN
[string] optimism
[tree] NN(optimism)
[ud] "(optimism<root> / optimism)"
[fourlang] "(optimism<root> / optimism)"

VBN -> approved_VBN
[string] approved
[tree] VBN(approved)
[ud] "(approved<root> / approved)"
[fourlang] "(approved<root> / approved)"

NNP -> MEDICINE_NNP
[string] MEDICINE
[tree] NNP(MEDICINE)
[ud] "(MEDICINE<root> / MEDICINE)"
[fourlang] "(MEDICINE<root> / MEDICINE)"

JJ -> MichPERIODHYPHENbased_JJ
[string] MichPERIODHYPHENbased
[tree] JJ(MichPERIODHYPHENbased)
[ud] "(MichPERIODHYPHENbased<root> / MichPERIODHYPHENbased)"
[fourlang] "(MichPERIODHYPHENbased<root> / MichPERIODHYPHENbased)"

NNP -> Landrieu_NNP
[string] Landrieu
[tree] NNP(Landrieu)
[ud] "(Landrieu<root> / Landrieu)"
[fourlang] "(Landrieu<root> / Landrieu)"

JJ -> sophisticated_JJ
[string] sophisticated
[tree] JJ(sophisticated)
[ud] "(sophisticated<root> / sophisticated)"
[fourlang] "(sophisticated<root> / sophisticated)"

DT -> Another_DT
[string] Another
[tree] DT(Another)
[ud] "(Another<root> / Another)"
[fourlang] "(Another<root> / Another)"

VBP -> pay_VBP
[string] pay
[tree] VBP(pay)
[ud] "(pay<root> / pay)"
[fourlang] "(pay<root> / pay)"

NNP -> SeptPERIOD_NNP
[string] SeptPERIOD
[tree] NNP(SeptPERIOD)
[ud] "(SeptPERIOD<root> / SeptPERIOD)"
[fourlang] "(SeptPERIOD<root> / SeptPERIOD)"

NNP -> TREASURY_NNP
[string] TREASURY
[tree] NNP(TREASURY)
[ud] "(TREASURY<root> / TREASURY)"
[fourlang] "(TREASURY<root> / TREASURY)"

NNP -> Thursday_NNP
[string] Thursday
[tree] NNP(Thursday)
[ud] "(Thursday<root> / Thursday)"
[fourlang] "(Thursday<root> / Thursday)"

NNP -> RPERIODPPERIOD_NNP
[string] RPERIODPPERIOD
[tree] NNP(RPERIODPPERIOD)
[ud] "(RPERIODPPERIOD<root> / RPERIODPPERIOD)"
[fourlang] "(RPERIODPPERIOD<root> / RPERIODPPERIOD)"

NNP -> Maryland_NNP
[string] Maryland
[tree] NNP(Maryland)
[ud] "(Maryland<root> / Maryland)"
[fourlang] "(Maryland<root> / Maryland)"

JJ -> rural_JJ
[string] rural
[tree] JJ(rural)
[ud] "(rural<root> / rural)"
[fourlang] "(rural<root> / rural)"

NNP -> Forster_NNP
[string] Forster
[tree] NNP(Forster)
[ud] "(Forster<root> / Forster)"
[fourlang] "(Forster<root> / Forster)"

NNP -> Army_NNP
[string] Army
[tree] NNP(Army)
[ud] "(Army<root> / Army)"
[fourlang] "(Army<root> / Army)"

NNS -> wines_NNS
[string] wines
[tree] NNS(wines)
[ud] "(wines<root> / wines)"
[fourlang] "(wines<root> / wines)"

NNP -> Daniel_NNP
[string] Daniel
[tree] NNP(Daniel)
[ud] "(Daniel<root> / Daniel)"
[fourlang] "(Daniel<root> / Daniel)"

NN -> disregard_NN
[string] disregard
[tree] NN(disregard)
[ud] "(disregard<root> / disregard)"
[fourlang] "(disregard<root> / disregard)"

NN -> addition_NN
[string] addition
[tree] NN(addition)
[ud] "(addition<root> / addition)"
[fourlang] "(addition<root> / addition)"

NN -> yesterday_NN
[string] yesterday
[tree] NN(yesterday)
[ud] "(yesterday<root> / yesterday)"
[fourlang] "(yesterday<root> / yesterday)"

RB -> yon_RB
[string] yon
[tree] RB(yon)
[ud] "(yon<root> / yon)"
[fourlang] "(yon<root> / yon)"

NN -> advantage_NN
[string] advantage
[tree] NN(advantage)
[ud] "(advantage<root> / advantage)"
[fourlang] "(advantage<root> / advantage)"

VBG -> loading_VBG
[string] loading
[tree] VBG(loading)
[ud] "(loading<root> / loading)"
[fourlang] "(loading<root> / loading)"

JJ -> external_JJ
[string] external
[tree] JJ(external)
[ud] "(external<root> / external)"
[fourlang] "(external<root> / external)"

NNP -> Blunt_NNP
[string] Blunt
[tree] NNP(Blunt)
[ud] "(Blunt<root> / Blunt)"
[fourlang] "(Blunt<root> / Blunt)"

NNP -> Gelles_NNP
[string] Gelles
[tree] NNP(Gelles)
[ud] "(Gelles<root> / Gelles)"
[fourlang] "(Gelles<root> / Gelles)"

NNP -> Yeargin_NNP
[string] Yeargin
[tree] NNP(Yeargin)
[ud] "(Yeargin<root> / Yeargin)"
[fourlang] "(Yeargin<root> / Yeargin)"

NN -> toast_NN
[string] toast
[tree] NN(toast)
[ud] "(toast<root> / toast)"
[fourlang] "(toast<root> / toast)"

NNP -> Rudolph_NNP
[string] Rudolph
[tree] NNP(Rudolph)
[ud] "(Rudolph<root> / Rudolph)"
[fourlang] "(Rudolph<root> / Rudolph)"

NNP -> Municipal_NNP
[string] Municipal
[tree] NNP(Municipal)
[ud] "(Municipal<root> / Municipal)"
[fourlang] "(Municipal<root> / Municipal)"

NNP -> Florio_NNP
[string] Florio
[tree] NNP(Florio)
[ud] "(Florio<root> / Florio)"
[fourlang] "(Florio<root> / Florio)"

NN -> head_NN
[string] head
[tree] NN(head)
[ud] "(head<root> / head)"
[fourlang] "(head<root> / head)"

NN -> restructuring_NN
[string] restructuring
[tree] NN(restructuring)
[ud] "(restructuring<root> / restructuring)"
[fourlang] "(restructuring<root> / restructuring)"

VBG -> holding_VBG
[string] holding
[tree] VBG(holding)
[ud] "(holding<root> / holding)"
[fourlang] "(holding<root> / holding)"

PDT -> such_PDT
[string] such
[tree] PDT(such)
[ud] "(such<root> / such)"
[fourlang] "(such<root> / such)"

NN -> Silver_NN
[string] Silver
[tree] NN(Silver)
[ud] "(Silver<root> / Silver)"
[fourlang] "(Silver<root> / Silver)"

NNP -> Hiroshima_NNP
[string] Hiroshima
[tree] NNP(Hiroshima)
[ud] "(Hiroshima<root> / Hiroshima)"
[fourlang] "(Hiroshima<root> / Hiroshima)"

NN -> magazine_NN
[string] magazine
[tree] NN(magazine)
[ud] "(magazine<root> / magazine)"
[fourlang] "(magazine<root> / magazine)"

NN -> arrangement_NN
[string] arrangement
[tree] NN(arrangement)
[ud] "(arrangement<root> / arrangement)"
[fourlang] "(arrangement<root> / arrangement)"

NNP -> Whelen_NNP
[string] Whelen
[tree] NNP(Whelen)
[ud] "(Whelen<root> / Whelen)"
[fourlang] "(Whelen<root> / Whelen)"

RB -> currently_RB
[string] currently
[tree] RB(currently)
[ud] "(currently<root> / currently)"
[fourlang] "(currently<root> / currently)"

NNS -> Periods_NNS
[string] Periods
[tree] NNS(Periods)
[ud] "(Periods<root> / Periods)"
[fourlang] "(Periods<root> / Periods)"

NN -> security_NN
[string] security
[tree] NN(security)
[ud] "(security<root> / security)"
[fourlang] "(security<root> / security)"

NN -> industry_NN
[string] industry
[tree] NN(industry)
[ud] "(industry<root> / industry)"
[fourlang] "(industry<root> / industry)"

NN -> format_NN
[string] format
[tree] NN(format)
[ud] "(format<root> / format)"
[fourlang] "(format<root> / format)"

NNS -> lotions_NNS
[string] lotions
[tree] NNS(lotions)
[ud] "(lotions<root> / lotions)"
[fourlang] "(lotions<root> / lotions)"

NN -> country_NN
[string] country
[tree] NN(country)
[ud] "(country<root> / country)"
[fourlang] "(country<root> / country)"

NN -> race_NN
[string] race
[tree] NN(race)
[ud] "(race<root> / race)"
[fourlang] "(race<root> / race)"

JJ -> medical_JJ
[string] medical
[tree] JJ(medical)
[ud] "(medical<root> / medical)"
[fourlang] "(medical<root> / medical)"

VBG -> beginning_VBG
[string] beginning
[tree] VBG(beginning)
[ud] "(beginning<root> / beginning)"
[fourlang] "(beginning<root> / beginning)"

NN -> debate_NN
[string] debate
[tree] NN(debate)
[ud] "(debate<root> / debate)"
[fourlang] "(debate<root> / debate)"

JJ -> bellHYPHENringing_JJ
[string] bellHYPHENringing
[tree] JJ(bellHYPHENringing)
[ud] "(bellHYPHENringing<root> / bellHYPHENringing)"
[fourlang] "(bellHYPHENringing<root> / bellHYPHENringing)"

NN -> twist_NN
[string] twist
[tree] NN(twist)
[ud] "(twist<root> / twist)"
[fourlang] "(twist<root> / twist)"

JJ -> valuable_JJ
[string] valuable
[tree] JJ(valuable)
[ud] "(valuable<root> / valuable)"
[fourlang] "(valuable<root> / valuable)"

JJ -> mammoth_JJ
[string] mammoth
[tree] JJ(mammoth)
[ud] "(mammoth<root> / mammoth)"
[fourlang] "(mammoth<root> / mammoth)"

NNP -> Appellate_NNP
[string] Appellate
[tree] NNP(Appellate)
[ud] "(Appellate<root> / Appellate)"
[fourlang] "(Appellate<root> / Appellate)"

VBN -> incurred_VBN
[string] incurred
[tree] VBN(incurred)
[ud] "(incurred<root> / incurred)"
[fourlang] "(incurred<root> / incurred)"

NNP -> Rockford_NNP
[string] Rockford
[tree] NNP(Rockford)
[ud] "(Rockford<root> / Rockford)"
[fourlang] "(Rockford<root> / Rockford)"

NN -> anyone_NN
[string] anyone
[tree] NN(anyone)
[ud] "(anyone<root> / anyone)"
[fourlang] "(anyone<root> / anyone)"

CD -> DIGITDIGITPERIOD_CD
[string] DIGITDIGITPERIOD
[tree] CD(DIGITDIGITPERIOD)
[ud] "(DIGITDIGITPERIOD<root> / DIGITDIGITPERIOD)"
[fourlang] "(DIGITDIGITPERIOD<root> / DIGITDIGITPERIOD)"

NNP -> Cray_NNP
[string] Cray
[tree] NNP(Cray)
[ud] "(Cray<root> / Cray)"
[fourlang] "(Cray<root> / Cray)"

NN -> spinoff_NN
[string] spinoff
[tree] NN(spinoff)
[ud] "(spinoff<root> / spinoff)"
[fourlang] "(spinoff<root> / spinoff)"

NNP -> None_NNP
[string] None
[tree] NNP(None)
[ud] "(None<root> / None)"
[fourlang] "(None<root> / None)"

NNS -> sectors_NNS
[string] sectors
[tree] NNS(sectors)
[ud] "(sectors<root> / sectors)"
[fourlang] "(sectors<root> / sectors)"

NNS -> occurrences_NNS
[string] occurrences
[tree] NNS(occurrences)
[ud] "(occurrences<root> / occurrences)"
[fourlang] "(occurrences<root> / occurrences)"

NN -> woman_NN
[string] woman
[tree] NN(woman)
[ud] "(woman<root> / woman)"
[fourlang] "(woman<root> / woman)"

NNP -> Wright_NNP
[string] Wright
[tree] NNP(Wright)
[ud] "(Wright<root> / Wright)"
[fourlang] "(Wright<root> / Wright)"

NN -> director_NN
[string] director
[tree] NN(director)
[ud] "(director<root> / director)"
[fourlang] "(director<root> / director)"

NN -> trading_NN
[string] trading
[tree] NN(trading)
[ud] "(trading<root> / trading)"
[fourlang] "(trading<root> / trading)"

NN -> debt_NN
[string] debt
[tree] NN(debt)
[ud] "(debt<root> / debt)"
[fourlang] "(debt<root> / debt)"

NNP -> President_NNP
[string] President
[tree] NNP(President)
[ud] "(President<root> / President)"
[fourlang] "(President<root> / President)"

NN -> semiconductor_NN
[string] semiconductor
[tree] NN(semiconductor)
[ud] "(semiconductor<root> / semiconductor)"
[fourlang] "(semiconductor<root> / semiconductor)"

NNP -> Kodansha_NNP
[string] Kodansha
[tree] NNP(Kodansha)
[ud] "(Kodansha<root> / Kodansha)"
[fourlang] "(Kodansha<root> / Kodansha)"

NNS -> contracts_NNS
[string] contracts
[tree] NNS(contracts)
[ud] "(contracts<root> / contracts)"
[fourlang] "(contracts<root> / contracts)"

NNS -> benefits_NNS
[string] benefits
[tree] NNS(benefits)
[ud] "(benefits<root> / benefits)"
[fourlang] "(benefits<root> / benefits)"

NNP -> TRUST_NNP
[string] TRUST
[tree] NNP(TRUST)
[ud] "(TRUST<root> / TRUST)"
[fourlang] "(TRUST<root> / TRUST)"

PRP -> him_PRP
[string] him
[tree] PRP(him)
[ud] "(him<root> / him)"
[fourlang] "(him<root> / him)"

JJ -> fifth_JJ
[string] fifth
[tree] JJ(fifth)
[ud] "(fifth<root> / fifth)"
[fourlang] "(fifth<root> / fifth)"

NNP -> NCNB_NNP
[string] NCNB
[tree] NNP(NCNB)
[ud] "(NCNB<root> / NCNB)"
[fourlang] "(NCNB<root> / NCNB)"

JJ -> summerBSLPERwinter_JJ
[string] summerBSLPERwinter
[tree] JJ(summerBSLPERwinter)
[ud] "(summerBSLPERwinter<root> / summerBSLPERwinter)"
[fourlang] "(summerBSLPERwinter<root> / summerBSLPERwinter)"

RB -> annually_RB
[string] annually
[tree] RB(annually)
[ud] "(annually<root> / annually)"
[fourlang] "(annually<root> / annually)"

NNP -> Nissan_NNP
[string] Nissan
[tree] NNP(Nissan)
[ud] "(Nissan<root> / Nissan)"
[fourlang] "(Nissan<root> / Nissan)"

VB -> recruit_VB
[string] recruit
[tree] VB(recruit)
[ud] "(recruit<root> / recruit)"
[fourlang] "(recruit<root> / recruit)"

VB -> convince_VB
[string] convince
[tree] VB(convince)
[ud] "(convince<root> / convince)"
[fourlang] "(convince<root> / convince)"

NNP -> Sea_NNP
[string] Sea
[tree] NNP(Sea)
[ud] "(Sea<root> / Sea)"
[fourlang] "(Sea<root> / Sea)"

NNP -> European_NNP
[string] European
[tree] NNP(European)
[ud] "(European<root> / European)"
[fourlang] "(European<root> / European)"

NN -> volatility_NN
[string] volatility
[tree] NN(volatility)
[ud] "(volatility<root> / volatility)"
[fourlang] "(volatility<root> / volatility)"

NNP -> Teikoku_NNP
[string] Teikoku
[tree] NNP(Teikoku)
[ud] "(Teikoku<root> / Teikoku)"
[fourlang] "(Teikoku<root> / Teikoku)"

JJ -> total_JJ
[string] total
[tree] JJ(total)
[ud] "(total<root> / total)"
[fourlang] "(total<root> / total)"

NNP -> Judicial_NNP
[string] Judicial
[tree] NNP(Judicial)
[ud] "(Judicial<root> / Judicial)"
[fourlang] "(Judicial<root> / Judicial)"

NN -> style_NN
[string] style
[tree] NN(style)
[ud] "(style<root> / style)"
[fourlang] "(style<root> / style)"

VBG -> following_VBG
[string] following
[tree] VBG(following)
[ud] "(following<root> / following)"
[fourlang] "(following<root> / following)"

NNP -> Orleans_NNP
[string] Orleans
[tree] NNP(Orleans)
[ud] "(Orleans<root> / Orleans)"
[fourlang] "(Orleans<root> / Orleans)"

NNS -> utilities_NNS
[string] utilities
[tree] NNS(utilities)
[ud] "(utilities<root> / utilities)"
[fourlang] "(utilities<root> / utilities)"

NNS -> bonds_NNS
[string] bonds
[tree] NNS(bonds)
[ud] "(bonds<root> / bonds)"
[fourlang] "(bonds<root> / bonds)"

NNS -> collections_NNS
[string] collections
[tree] NNS(collections)
[ud] "(collections<root> / collections)"
[fourlang] "(collections<root> / collections)"

VBD -> cared_VBD
[string] cared
[tree] VBD(cared)
[ud] "(cared<root> / cared)"
[fourlang] "(cared<root> / cared)"

_NONE_ -> ASTERISKQUEASTERISK__NONE_
[string] ASTERISKQUEASTERISK
[tree] _NONE_(ASTERISKQUEASTERISK)
[ud] "(ASTERISKQUEASTERISK<root> / ASTERISKQUEASTERISK)"
[fourlang] "(ASTERISKQUEASTERISK<root> / ASTERISKQUEASTERISK)"

NNS -> executives_NNS
[string] executives
[tree] NNS(executives)
[ud] "(executives<root> / executives)"
[fourlang] "(executives<root> / executives)"

NN -> self_NN
[string] self
[tree] NN(self)
[ud] "(self<root> / self)"
[fourlang] "(self<root> / self)"

NNP -> Cheetham_NNP
[string] Cheetham
[tree] NNP(Cheetham)
[ud] "(Cheetham<root> / Cheetham)"
[fourlang] "(Cheetham<root> / Cheetham)"

JJR -> older_JJR
[string] older
[tree] JJR(older)
[ud] "(older<root> / older)"
[fourlang] "(older<root> / older)"

VBN -> designed_VBN
[string] designed
[tree] VBN(designed)
[ud] "(designed<root> / designed)"
[fourlang] "(designed<root> / designed)"

VBN -> owned_VBN
[string] owned
[tree] VBN(owned)
[ud] "(owned<root> / owned)"
[fourlang] "(owned<root> / owned)"

NN -> bias_NN
[string] bias
[tree] NN(bias)
[ud] "(bias<root> / bias)"
[fourlang] "(bias<root> / bias)"

JJ -> galvanized_JJ
[string] galvanized
[tree] JJ(galvanized)
[ud] "(galvanized<root> / galvanized)"
[fourlang] "(galvanized<root> / galvanized)"

NNP -> Samnick_NNP
[string] Samnick
[tree] NNP(Samnick)
[ud] "(Samnick<root> / Samnick)"
[fourlang] "(Samnick<root> / Samnick)"

NNS -> acres_NNS
[string] acres
[tree] NNS(acres)
[ud] "(acres<root> / acres)"
[fourlang] "(acres<root> / acres)"

NNS -> stations_NNS
[string] stations
[tree] NNS(stations)
[ud] "(stations<root> / stations)"
[fourlang] "(stations<root> / stations)"

NNP -> FreudToy_NNP
[string] FreudToy
[tree] NNP(FreudToy)
[ud] "(FreudToy<root> / FreudToy)"
[fourlang] "(FreudToy<root> / FreudToy)"

NNS -> sacks_NNS
[string] sacks
[tree] NNS(sacks)
[ud] "(sacks<root> / sacks)"
[fourlang] "(sacks<root> / sacks)"

NN -> quantity_NN
[string] quantity
[tree] NN(quantity)
[ud] "(quantity<root> / quantity)"
[fourlang] "(quantity<root> / quantity)"

JJ -> crude_JJ
[string] crude
[tree] JJ(crude)
[ud] "(crude<root> / crude)"
[fourlang] "(crude<root> / crude)"

JJS -> best_JJS
[string] best
[tree] JJS(best)
[ud] "(best<root> / best)"
[fourlang] "(best<root> / best)"

NN -> tomorrow_NN
[string] tomorrow
[tree] NN(tomorrow)
[ud] "(tomorrow<root> / tomorrow)"
[fourlang] "(tomorrow<root> / tomorrow)"

NNS -> peaks_NNS
[string] peaks
[tree] NNS(peaks)
[ud] "(peaks<root> / peaks)"
[fourlang] "(peaks<root> / peaks)"

VBN -> charged_VBN
[string] charged
[tree] VBN(charged)
[ud] "(charged<root> / charged)"
[fourlang] "(charged<root> / charged)"

NNP -> HOME_NNP
[string] HOME
[tree] NNP(HOME)
[ud] "(HOME<root> / HOME)"
[fourlang] "(HOME<root> / HOME)"

NNP -> June_NNP
[string] June
[tree] NNP(June)
[ud] "(June<root> / June)"
[fourlang] "(June<root> / June)"

NN -> offense_NN
[string] offense
[tree] NN(offense)
[ud] "(offense<root> / offense)"
[fourlang] "(offense<root> / offense)"

NN -> block_NN
[string] block
[tree] NN(block)
[ud] "(block<root> / block)"
[fourlang] "(block<root> / block)"

NNP -> Teddy_NNP
[string] Teddy
[tree] NNP(Teddy)
[ud] "(Teddy<root> / Teddy)"
[fourlang] "(Teddy<root> / Teddy)"

JJ -> DIGITDIGITHYPHENyearHYPHENold_JJ
[string] DIGITDIGITHYPHENyearHYPHENold
[tree] JJ(DIGITDIGITHYPHENyearHYPHENold)
[ud] "(DIGITDIGITHYPHENyearHYPHENold<root> / DIGITDIGITHYPHENyearHYPHENold)"
[fourlang] "(DIGITDIGITHYPHENyearHYPHENold<root> / DIGITDIGITHYPHENyearHYPHENold)"

NN -> stress_NN
[string] stress
[tree] NN(stress)
[ud] "(stress<root> / stress)"
[fourlang] "(stress<root> / stress)"

NN -> evidence_NN
[string] evidence
[tree] NN(evidence)
[ud] "(evidence<root> / evidence)"
[fourlang] "(evidence<root> / evidence)"

NNP -> ASLACTON_NNP
[string] ASLACTON
[tree] NNP(ASLACTON)
[ud] "(ASLACTON<root> / ASLACTON)"
[fourlang] "(ASLACTON<root> / ASLACTON)"

VBN -> advertised_VBN
[string] advertised
[tree] VBN(advertised)
[ud] "(advertised<root> / advertised)"
[fourlang] "(advertised<root> / advertised)"

NNP -> Train_NNP
[string] Train
[tree] NNP(Train)
[ud] "(Train<root> / Train)"
[fourlang] "(Train<root> / Train)"

VBP -> fail_VBP
[string] fail
[tree] VBP(fail)
[ud] "(fail<root> / fail)"
[fourlang] "(fail<root> / fail)"

NNS -> DIGITDIGITDIGITDIGITs_NNS
[string] DIGITDIGITDIGITDIGITs
[tree] NNS(DIGITDIGITDIGITDIGITs)
[ud] "(DIGITDIGITDIGITDIGITs<root> / DIGITDIGITDIGITDIGITs)"
[fourlang] "(DIGITDIGITDIGITDIGITs<root> / DIGITDIGITDIGITDIGITs)"

NN -> JohnsonHYPHENera_NN
[string] JohnsonHYPHENera
[tree] NN(JohnsonHYPHENera)
[ud] "(JohnsonHYPHENera<root> / JohnsonHYPHENera)"
[fourlang] "(JohnsonHYPHENera<root> / JohnsonHYPHENera)"

IN -> between_IN
[string] between
[tree] IN(between)
[ud] "(between<root> / between)"
[fourlang] "(between<root> / between)"

NNP -> StPERIOD_NNP
[string] StPERIOD
[tree] NNP(StPERIOD)
[ud] "(StPERIOD<root> / StPERIOD)"
[fourlang] "(StPERIOD<root> / StPERIOD)"

VBN -> paid_VBN
[string] paid
[tree] VBN(paid)
[ud] "(paid<root> / paid)"
[fourlang] "(paid<root> / paid)"

NNP -> Gotta_NNP
[string] Gotta
[tree] NNP(Gotta)
[ud] "(Gotta<root> / Gotta)"
[fourlang] "(Gotta<root> / Gotta)"

JJ -> capitalHYPHENmarkets_JJ
[string] capitalHYPHENmarkets
[tree] JJ(capitalHYPHENmarkets)
[ud] "(capitalHYPHENmarkets<root> / capitalHYPHENmarkets)"
[fourlang] "(capitalHYPHENmarkets<root> / capitalHYPHENmarkets)"

NNS -> halts_NNS
[string] halts
[tree] NNS(halts)
[ud] "(halts<root> / halts)"
[fourlang] "(halts<root> / halts)"

NN -> rape_NN
[string] rape
[tree] NN(rape)
[ud] "(rape<root> / rape)"
[fourlang] "(rape<root> / rape)"

JJ -> programHYPHENtrading_JJ
[string] programHYPHENtrading
[tree] JJ(programHYPHENtrading)
[ud] "(programHYPHENtrading<root> / programHYPHENtrading)"
[fourlang] "(programHYPHENtrading<root> / programHYPHENtrading)"

NNP -> Kingdom_NNP
[string] Kingdom
[tree] NNP(Kingdom)
[ud] "(Kingdom<root> / Kingdom)"
[fourlang] "(Kingdom<root> / Kingdom)"

NN -> stature_NN
[string] stature
[tree] NN(stature)
[ud] "(stature<root> / stature)"
[fourlang] "(stature<root> / stature)"

NN -> merit_NN
[string] merit
[tree] NN(merit)
[ud] "(merit<root> / merit)"
[fourlang] "(merit<root> / merit)"

VBG -> fundraising_VBG
[string] fundraising
[tree] VBG(fundraising)
[ud] "(fundraising<root> / fundraising)"
[fourlang] "(fundraising<root> / fundraising)"

JJ -> ultimate_JJ
[string] ultimate
[tree] JJ(ultimate)
[ud] "(ultimate<root> / ultimate)"
[fourlang] "(ultimate<root> / ultimate)"

NN -> picture_NN
[string] picture
[tree] NN(picture)
[ud] "(picture<root> / picture)"
[fourlang] "(picture<root> / picture)"

NNS -> Yields_NNS
[string] Yields
[tree] NNS(Yields)
[ud] "(Yields<root> / Yields)"
[fourlang] "(Yields<root> / Yields)"

NN -> football_NN
[string] football
[tree] NN(football)
[ud] "(football<root> / football)"
[fourlang] "(football<root> / football)"

NN -> employment_NN
[string] employment
[tree] NN(employment)
[ud] "(employment<root> / employment)"
[fourlang] "(employment<root> / employment)"

VBG -> tightening_VBG
[string] tightening
[tree] VBG(tightening)
[ud] "(tightening<root> / tightening)"
[fourlang] "(tightening<root> / tightening)"

VBG -> continuing_VBG
[string] continuing
[tree] VBG(continuing)
[ud] "(continuing<root> / continuing)"
[fourlang] "(continuing<root> / continuing)"

JJ -> ideological_JJ
[string] ideological
[tree] JJ(ideological)
[ud] "(ideological<root> / ideological)"
[fourlang] "(ideological<root> / ideological)"

VBN -> stopped_VBN
[string] stopped
[tree] VBN(stopped)
[ud] "(stopped<root> / stopped)"
[fourlang] "(stopped<root> / stopped)"

JJ -> shaded_JJ
[string] shaded
[tree] JJ(shaded)
[ud] "(shaded<root> / shaded)"
[fourlang] "(shaded<root> / shaded)"

NN -> binge_NN
[string] binge
[tree] NN(binge)
[ud] "(binge<root> / binge)"
[fourlang] "(binge<root> / binge)"

JJ -> highHYPHENyield_JJ
[string] highHYPHENyield
[tree] JJ(highHYPHENyield)
[ud] "(highHYPHENyield<root> / highHYPHENyield)"
[fourlang] "(highHYPHENyield<root> / highHYPHENyield)"

NNP -> Newhouse_NNP
[string] Newhouse
[tree] NNP(Newhouse)
[ud] "(Newhouse<root> / Newhouse)"
[fourlang] "(Newhouse<root> / Newhouse)"

NNP -> Supreme_NNP
[string] Supreme
[tree] NNP(Supreme)
[ud] "(Supreme<root> / Supreme)"
[fourlang] "(Supreme<root> / Supreme)"

NNP -> Albany_NNP
[string] Albany
[tree] NNP(Albany)
[ud] "(Albany<root> / Albany)"
[fourlang] "(Albany<root> / Albany)"

NN -> bone_NN
[string] bone
[tree] NN(bone)
[ud] "(bone<root> / bone)"
[fourlang] "(bone<root> / bone)"

NN -> part_NN
[string] part
[tree] NN(part)
[ud] "(part<root> / part)"
[fourlang] "(part<root> / part)"

NNP -> NovPERIOD_NNP
[string] NovPERIOD
[tree] NNP(NovPERIOD)
[ud] "(NovPERIOD<root> / NovPERIOD)"
[fourlang] "(NovPERIOD<root> / NovPERIOD)"

NNS -> slowdowns_NNS
[string] slowdowns
[tree] NNS(slowdowns)
[ud] "(slowdowns<root> / slowdowns)"
[fourlang] "(slowdowns<root> / slowdowns)"

NNP -> Commodity_NNP
[string] Commodity
[tree] NNP(Commodity)
[ud] "(Commodity<root> / Commodity)"
[fourlang] "(Commodity<root> / Commodity)"

NN -> ceiling_NN
[string] ceiling
[tree] NN(ceiling)
[ud] "(ceiling<root> / ceiling)"
[fourlang] "(ceiling<root> / ceiling)"

VB -> force_VB
[string] force
[tree] VB(force)
[ud] "(force<root> / force)"
[fourlang] "(force<root> / force)"

DT -> Any_DT
[string] Any
[tree] DT(Any)
[ud] "(Any<root> / Any)"
[fourlang] "(Any<root> / Any)"

VBN -> carried_VBN
[string] carried
[tree] VBN(carried)
[ud] "(carried<root> / carried)"
[fourlang] "(carried<root> / carried)"

NNP -> Massachusetts_NNP
[string] Massachusetts
[tree] NNP(Massachusetts)
[ud] "(Massachusetts<root> / Massachusetts)"
[fourlang] "(Massachusetts<root> / Massachusetts)"

VBN -> sustained_VBN
[string] sustained
[tree] VBN(sustained)
[ud] "(sustained<root> / sustained)"
[fourlang] "(sustained<root> / sustained)"

NNP -> Kathryn_NNP
[string] Kathryn
[tree] NNP(Kathryn)
[ud] "(Kathryn<root> / Kathryn)"
[fourlang] "(Kathryn<root> / Kathryn)"

NN -> trend_NN
[string] trend
[tree] NN(trend)
[ud] "(trend<root> / trend)"
[fourlang] "(trend<root> / trend)"

NNS -> taxpayers_NNS
[string] taxpayers
[tree] NNS(taxpayers)
[ud] "(taxpayers<root> / taxpayers)"
[fourlang] "(taxpayers<root> / taxpayers)"

NN -> ropeHYPHENsight_NN
[string] ropeHYPHENsight
[tree] NN(ropeHYPHENsight)
[ud] "(ropeHYPHENsight<root> / ropeHYPHENsight)"
[fourlang] "(ropeHYPHENsight<root> / ropeHYPHENsight)"

NNP -> Hampton_NNP
[string] Hampton
[tree] NNP(Hampton)
[ud] "(Hampton<root> / Hampton)"
[fourlang] "(Hampton<root> / Hampton)"

NN -> willingness_NN
[string] willingness
[tree] NN(willingness)
[ud] "(willingness<root> / willingness)"
[fourlang] "(willingness<root> / willingness)"

NN -> standing_NN
[string] standing
[tree] NN(standing)
[ud] "(standing<root> / standing)"
[fourlang] "(standing<root> / standing)"

NNS -> shareholders_NNS
[string] shareholders
[tree] NNS(shareholders)
[ud] "(shareholders<root> / shareholders)"
[fourlang] "(shareholders<root> / shareholders)"

NNP -> Spoon_NNP
[string] Spoon
[tree] NNP(Spoon)
[ud] "(Spoon<root> / Spoon)"
[fourlang] "(Spoon<root> / Spoon)"

VBZ -> warrants_VBZ
[string] warrants
[tree] VBZ(warrants)
[ud] "(warrants<root> / warrants)"
[fourlang] "(warrants<root> / warrants)"

NN -> bidder_NN
[string] bidder
[tree] NN(bidder)
[ud] "(bidder<root> / bidder)"
[fourlang] "(bidder<root> / bidder)"

VBG -> facing_VBG
[string] facing
[tree] VBG(facing)
[ud] "(facing<root> / facing)"
[fourlang] "(facing<root> / facing)"

NNS -> Proceeds_NNS
[string] Proceeds
[tree] NNS(Proceeds)
[ud] "(Proceeds<root> / Proceeds)"
[fourlang] "(Proceeds<root> / Proceeds)"

NNP -> Default_NNP
[string] Default
[tree] NNP(Default)
[ud] "(Default<root> / Default)"
[fourlang] "(Default<root> / Default)"

DT -> All_DT
[string] All
[tree] DT(All)
[ud] "(All<root> / All)"
[fourlang] "(All<root> / All)"

VBG -> changing_VBG
[string] changing
[tree] VBG(changing)
[ud] "(changing<root> / changing)"
[fourlang] "(changing<root> / changing)"

JJ -> thirdHYPHENlargest_JJ
[string] thirdHYPHENlargest
[tree] JJ(thirdHYPHENlargest)
[ud] "(thirdHYPHENlargest<root> / thirdHYPHENlargest)"
[fourlang] "(thirdHYPHENlargest<root> / thirdHYPHENlargest)"

NN -> software_NN
[string] software
[tree] NN(software)
[ud] "(software<root> / software)"
[fourlang] "(software<root> / software)"

NN -> specialty_NN
[string] specialty
[tree] NN(specialty)
[ud] "(specialty<root> / specialty)"
[fourlang] "(specialty<root> / specialty)"

NN -> skill_NN
[string] skill
[tree] NN(skill)
[ud] "(skill<root> / skill)"
[fourlang] "(skill<root> / skill)"

NN -> Index_NN
[string] Index
[tree] NN(Index)
[ud] "(Index<root> / Index)"
[fourlang] "(Index<root> / Index)"

NN -> anybody_NN
[string] anybody
[tree] NN(anybody)
[ud] "(anybody<root> / anybody)"
[fourlang] "(anybody<root> / anybody)"

NNP -> McAlpine_NNP
[string] McAlpine
[tree] NNP(McAlpine)
[ud] "(McAlpine<root> / McAlpine)"
[fourlang] "(McAlpine<root> / McAlpine)"

NN -> effort_NN
[string] effort
[tree] NN(effort)
[ud] "(effort<root> / effort)"
[fourlang] "(effort<root> / effort)"

JJ -> gubernatorial_JJ
[string] gubernatorial
[tree] JJ(gubernatorial)
[ud] "(gubernatorial<root> / gubernatorial)"
[fourlang] "(gubernatorial<root> / gubernatorial)"

NNS -> products_NNS
[string] products
[tree] NNS(products)
[ud] "(products<root> / products)"
[fourlang] "(products<root> / products)"

VBN -> mixed_VBN
[string] mixed
[tree] VBN(mixed)
[ud] "(mixed<root> / mixed)"
[fourlang] "(mixed<root> / mixed)"

NN -> cell_NN
[string] cell
[tree] NN(cell)
[ud] "(cell<root> / cell)"
[fourlang] "(cell<root> / cell)"

NN -> hay_NN
[string] hay
[tree] NN(hay)
[ud] "(hay<root> / hay)"
[fourlang] "(hay<root> / hay)"

NN -> recommendation_NN
[string] recommendation
[tree] NN(recommendation)
[ud] "(recommendation<root> / recommendation)"
[fourlang] "(recommendation<root> / recommendation)"

NNP -> Macmillan_NNP
[string] Macmillan
[tree] NNP(Macmillan)
[ud] "(Macmillan<root> / Macmillan)"
[fourlang] "(Macmillan<root> / Macmillan)"

NNP -> Southeast_NNP
[string] Southeast
[tree] NNP(Southeast)
[ud] "(Southeast<root> / Southeast)"
[fourlang] "(Southeast<root> / Southeast)"

NN -> administration_NN
[string] administration
[tree] NN(administration)
[ud] "(administration<root> / administration)"
[fourlang] "(administration<root> / administration)"

NN -> routine_NN
[string] routine
[tree] NN(routine)
[ud] "(routine<root> / routine)"
[fourlang] "(routine<root> / routine)"

NN -> pretext_NN
[string] pretext
[tree] NN(pretext)
[ud] "(pretext<root> / pretext)"
[fourlang] "(pretext<root> / pretext)"

NNS -> reporters_NNS
[string] reporters
[tree] NNS(reporters)
[ud] "(reporters<root> / reporters)"
[fourlang] "(reporters<root> / reporters)"

NNS -> justices_NNS
[string] justices
[tree] NNS(justices)
[ud] "(justices<root> / justices)"
[fourlang] "(justices<root> / justices)"

NN -> dollar_NN
[string] dollar
[tree] NN(dollar)
[ud] "(dollar<root> / dollar)"
[fourlang] "(dollar<root> / dollar)"

NNP -> Milne_NNP
[string] Milne
[tree] NNP(Milne)
[ud] "(Milne<root> / Milne)"
[fourlang] "(Milne<root> / Milne)"

VBP -> claim_VBP
[string] claim
[tree] VBP(claim)
[ud] "(claim<root> / claim)"
[fourlang] "(claim<root> / claim)"

NN -> banking_NN
[string] banking
[tree] NN(banking)
[ud] "(banking<root> / banking)"
[fourlang] "(banking<root> / banking)"

NNS -> parallels_NNS
[string] parallels
[tree] NNS(parallels)
[ud] "(parallels<root> / parallels)"
[fourlang] "(parallels<root> / parallels)"

NNP -> Grgich_NNP
[string] Grgich
[tree] NNP(Grgich)
[ud] "(Grgich<root> / Grgich)"
[fourlang] "(Grgich<root> / Grgich)"

NNS -> superiors_NNS
[string] superiors
[tree] NNS(superiors)
[ud] "(superiors<root> / superiors)"
[fourlang] "(superiors<root> / superiors)"

NNP -> LYNCH_NNP
[string] LYNCH
[tree] NNP(LYNCH)
[ud] "(LYNCH<root> / LYNCH)"
[fourlang] "(LYNCH<root> / LYNCH)"

VBZ -> has_VBZ
[string] has
[tree] VBZ(has)
[ud] "(has<root> / has)"
[fourlang] "(has<root> / has)"

VBN -> awarded_VBN
[string] awarded
[tree] VBN(awarded)
[ud] "(awarded<root> / awarded)"
[fourlang] "(awarded<root> / awarded)"

NNP -> NYSE_NNP
[string] NYSE
[tree] NNP(NYSE)
[ud] "(NYSE<root> / NYSE)"
[fourlang] "(NYSE<root> / NYSE)"

NNP -> Wood_NNP
[string] Wood
[tree] NNP(Wood)
[ud] "(Wood<root> / Wood)"
[fourlang] "(Wood<root> / Wood)"

NNS -> daughters_NNS
[string] daughters
[tree] NNS(daughters)
[ud] "(daughters<root> / daughters)"
[fourlang] "(daughters<root> / daughters)"

VBG -> plunging_VBG
[string] plunging
[tree] VBG(plunging)
[ud] "(plunging<root> / plunging)"
[fourlang] "(plunging<root> / plunging)"

NNP -> Feeding_NNP
[string] Feeding
[tree] NNP(Feeding)
[ud] "(Feeding<root> / Feeding)"
[fourlang] "(Feeding<root> / Feeding)"

IN -> under_IN
[string] under
[tree] IN(under)
[ud] "(under<root> / under)"
[fourlang] "(under<root> / under)"

VB -> mention_VB
[string] mention
[tree] VB(mention)
[ud] "(mention<root> / mention)"
[fourlang] "(mention<root> / mention)"

_NONE_ -> ASTERISKUASTERISK__NONE_
[string] ASTERISKUASTERISK
[tree] _NONE_(ASTERISKUASTERISK)
[ud] "(ASTERISKUASTERISK<root> / ASTERISKUASTERISK)"
[fourlang] "(ASTERISKUASTERISK<root> / ASTERISKUASTERISK)"

NNS -> votes_NNS
[string] votes
[tree] NNS(votes)
[ud] "(votes<root> / votes)"
[fourlang] "(votes<root> / votes)"

NN -> blessing_NN
[string] blessing
[tree] NN(blessing)
[ud] "(blessing<root> / blessing)"
[fourlang] "(blessing<root> / blessing)"

NN -> count_NN
[string] count
[tree] NN(count)
[ud] "(count<root> / count)"
[fourlang] "(count<root> / count)"

NN -> loss_NN
[string] loss
[tree] NN(loss)
[ud] "(loss<root> / loss)"
[fourlang] "(loss<root> / loss)"

NNP -> Class_NNP
[string] Class
[tree] NNP(Class)
[ud] "(Class<root> / Class)"
[fourlang] "(Class<root> / Class)"

DT -> Each_DT
[string] Each
[tree] DT(Each)
[ud] "(Each<root> / Each)"
[fourlang] "(Each<root> / Each)"

NN -> decade_NN
[string] decade
[tree] NN(decade)
[ud] "(decade<root> / decade)"
[fourlang] "(decade<root> / decade)"

CD -> DIGITDIGITPERIODDIGIT_CD
[string] DIGITDIGITPERIODDIGIT
[tree] CD(DIGITDIGITPERIODDIGIT)
[ud] "(DIGITDIGITPERIODDIGIT<root> / DIGITDIGITPERIODDIGIT)"
[fourlang] "(DIGITDIGITPERIODDIGIT<root> / DIGITDIGITPERIODDIGIT)"

NN -> textile_NN
[string] textile
[tree] NN(textile)
[ud] "(textile<root> / textile)"
[fourlang] "(textile<root> / textile)"

NNP -> Dick_NNP
[string] Dick
[tree] NNP(Dick)
[ud] "(Dick<root> / Dick)"
[fourlang] "(Dick<root> / Dick)"

NNP -> MORTGAGE_NNP
[string] MORTGAGE
[tree] NNP(MORTGAGE)
[ud] "(MORTGAGE<root> / MORTGAGE)"
[fourlang] "(MORTGAGE<root> / MORTGAGE)"

NN -> reflection_NN
[string] reflection
[tree] NN(reflection)
[ud] "(reflection<root> / reflection)"
[fourlang] "(reflection<root> / reflection)"

NN -> shipping_NN
[string] shipping
[tree] NN(shipping)
[ud] "(shipping<root> / shipping)"
[fourlang] "(shipping<root> / shipping)"

JJ -> pharmaceutical_JJ
[string] pharmaceutical
[tree] JJ(pharmaceutical)
[ud] "(pharmaceutical<root> / pharmaceutical)"
[fourlang] "(pharmaceutical<root> / pharmaceutical)"

NN -> Chinese_NN
[string] Chinese
[tree] NN(Chinese)
[ud] "(Chinese<root> / Chinese)"
[fourlang] "(Chinese<root> / Chinese)"

NNP -> Tiger_NNP
[string] Tiger
[tree] NNP(Tiger)
[ud] "(Tiger<root> / Tiger)"
[fourlang] "(Tiger<root> / Tiger)"

NN -> service_NN
[string] service
[tree] NN(service)
[ud] "(service<root> / service)"
[fourlang] "(service<root> / service)"

JJ -> mostHYPHENlikelyHYPHENsuccessor_JJ
[string] mostHYPHENlikelyHYPHENsuccessor
[tree] JJ(mostHYPHENlikelyHYPHENsuccessor)
[ud] "(mostHYPHENlikelyHYPHENsuccessor<root> / mostHYPHENlikelyHYPHENsuccessor)"
[fourlang] "(mostHYPHENlikelyHYPHENsuccessor<root> / mostHYPHENlikelyHYPHENsuccessor)"

NNP -> Johns_NNP
[string] Johns
[tree] NNP(Johns)
[ud] "(Johns<root> / Johns)"
[fourlang] "(Johns<root> / Johns)"

JJR -> smaller_JJR
[string] smaller
[tree] JJR(smaller)
[ud] "(smaller<root> / smaller)"
[fourlang] "(smaller<root> / smaller)"

NNS -> Lawmakers_NNS
[string] Lawmakers
[tree] NNS(Lawmakers)
[ud] "(Lawmakers<root> / Lawmakers)"
[fourlang] "(Lawmakers<root> / Lawmakers)"

NN -> letter_NN
[string] letter
[tree] NN(letter)
[ud] "(letter<root> / letter)"
[fourlang] "(letter<root> / letter)"

NN -> grower_NN
[string] grower
[tree] NN(grower)
[ud] "(grower<root> / grower)"
[fourlang] "(grower<root> / grower)"

JJ -> overHYPHENtheHYPHENcounter_JJ
[string] overHYPHENtheHYPHENcounter
[tree] JJ(overHYPHENtheHYPHENcounter)
[ud] "(overHYPHENtheHYPHENcounter<root> / overHYPHENtheHYPHENcounter)"
[fourlang] "(overHYPHENtheHYPHENcounter<root> / overHYPHENtheHYPHENcounter)"

JJ -> used_JJ
[string] used
[tree] JJ(used)
[ud] "(used<root> / used)"
[fourlang] "(used<root> / used)"

NN -> nothing_NN
[string] nothing
[tree] NN(nothing)
[ud] "(nothing<root> / nothing)"
[fourlang] "(nothing<root> / nothing)"

NN -> Heating_NN
[string] Heating
[tree] NN(Heating)
[ud] "(Heating<root> / Heating)"
[fourlang] "(Heating<root> / Heating)"

JJ -> hostile_JJ
[string] hostile
[tree] JJ(hostile)
[ud] "(hostile<root> / hostile)"
[fourlang] "(hostile<root> / hostile)"

NNP -> Chevrolet_NNP
[string] Chevrolet
[tree] NNP(Chevrolet)
[ud] "(Chevrolet<root> / Chevrolet)"
[fourlang] "(Chevrolet<root> / Chevrolet)"

NN -> salary_NN
[string] salary
[tree] NN(salary)
[ud] "(salary<root> / salary)"
[fourlang] "(salary<root> / salary)"

NN -> deposit_NN
[string] deposit
[tree] NN(deposit)
[ud] "(deposit<root> / deposit)"
[fourlang] "(deposit<root> / deposit)"

NNP -> Blue_NNP
[string] Blue
[tree] NNP(Blue)
[ud] "(Blue<root> / Blue)"
[fourlang] "(Blue<root> / Blue)"

NNS -> expenses_NNS
[string] expenses
[tree] NNS(expenses)
[ud] "(expenses<root> / expenses)"
[fourlang] "(expenses<root> / expenses)"

NNP -> Amsterdam_NNP
[string] Amsterdam
[tree] NNP(Amsterdam)
[ud] "(Amsterdam<root> / Amsterdam)"
[fourlang] "(Amsterdam<root> / Amsterdam)"

NNP -> Odyssey_NNP
[string] Odyssey
[tree] NNP(Odyssey)
[ud] "(Odyssey<root> / Odyssey)"
[fourlang] "(Odyssey<root> / Odyssey)"

NN -> fashion_NN
[string] fashion
[tree] NN(fashion)
[ud] "(fashion<root> / fashion)"
[fourlang] "(fashion<root> / fashion)"

NNS -> booklets_NNS
[string] booklets
[tree] NNS(booklets)
[ud] "(booklets<root> / booklets)"
[fourlang] "(booklets<root> / booklets)"

JJ -> automotiveHYPHENlighting_JJ
[string] automotiveHYPHENlighting
[tree] JJ(automotiveHYPHENlighting)
[ud] "(automotiveHYPHENlighting<root> / automotiveHYPHENlighting)"
[fourlang] "(automotiveHYPHENlighting<root> / automotiveHYPHENlighting)"

DT -> The_DT
[string] The
[tree] DT(The)
[ud] "(The<root> / The)"
[fourlang] "(The<root> / The)"

NN -> front_NN
[string] front
[tree] NN(front)
[ud] "(front<root> / front)"
[fourlang] "(front<root> / front)"

JJ -> stellar_JJ
[string] stellar
[tree] JJ(stellar)
[ud] "(stellar<root> / stellar)"
[fourlang] "(stellar<root> / stellar)"

JJ -> slow_JJ
[string] slow
[tree] JJ(slow)
[ud] "(slow<root> / slow)"
[fourlang] "(slow<root> / slow)"

JJ -> electronic_JJ
[string] electronic
[tree] JJ(electronic)
[ud] "(electronic<root> / electronic)"
[fourlang] "(electronic<root> / electronic)"

NNS -> essays_NNS
[string] essays
[tree] NNS(essays)
[ud] "(essays<root> / essays)"
[fourlang] "(essays<root> / essays)"

JJ -> Canadian_JJ
[string] Canadian
[tree] JJ(Canadian)
[ud] "(Canadian<root> / Canadian)"
[fourlang] "(Canadian<root> / Canadian)"

NNP -> Ed_NNP
[string] Ed
[tree] NNP(Ed)
[ud] "(Ed<root> / Ed)"
[fourlang] "(Ed<root> / Ed)"

NN -> amendment_NN
[string] amendment
[tree] NN(amendment)
[ud] "(amendment<root> / amendment)"
[fourlang] "(amendment<root> / amendment)"

NN -> severance_NN
[string] severance
[tree] NN(severance)
[ud] "(severance<root> / severance)"
[fourlang] "(severance<root> / severance)"

VBG -> saying_VBG
[string] saying
[tree] VBG(saying)
[ud] "(saying<root> / saying)"
[fourlang] "(saying<root> / saying)"

NN -> system_NN
[string] system
[tree] NN(system)
[ud] "(system<root> / system)"
[fourlang] "(system<root> / system)"

VBD -> owed_VBD
[string] owed
[tree] VBD(owed)
[ud] "(owed<root> / owed)"
[fourlang] "(owed<root> / owed)"

NN -> side_NN
[string] side
[tree] NN(side)
[ud] "(side<root> / side)"
[fourlang] "(side<root> / side)"

VBN -> answered_VBN
[string] answered
[tree] VBN(answered)
[ud] "(answered<root> / answered)"
[fourlang] "(answered<root> / answered)"

JJ -> facial_JJ
[string] facial
[tree] JJ(facial)
[ud] "(facial<root> / facial)"
[fourlang] "(facial<root> / facial)"

NNS -> pounds_NNS
[string] pounds
[tree] NNS(pounds)
[ud] "(pounds<root> / pounds)"
[fourlang] "(pounds<root> / pounds)"

NNP -> Mercantile_NNP
[string] Mercantile
[tree] NNP(Mercantile)
[ud] "(Mercantile<root> / Mercantile)"
[fourlang] "(Mercantile<root> / Mercantile)"

NN -> rancor_NN
[string] rancor
[tree] NN(rancor)
[ud] "(rancor<root> / rancor)"
[fourlang] "(rancor<root> / rancor)"

NN -> intention_NN
[string] intention
[tree] NN(intention)
[ud] "(intention<root> / intention)"
[fourlang] "(intention<root> / intention)"

NNP -> Circulations_NNP
[string] Circulations
[tree] NNP(Circulations)
[ud] "(Circulations<root> / Circulations)"
[fourlang] "(Circulations<root> / Circulations)"

NN -> art_NN
[string] art
[tree] NN(art)
[ud] "(art<root> / art)"
[fourlang] "(art<root> / art)"

NNP -> Hearst_NNP
[string] Hearst
[tree] NNP(Hearst)
[ud] "(Hearst<root> / Hearst)"
[fourlang] "(Hearst<root> / Hearst)"

JJ -> fixedHYPHENrate_JJ
[string] fixedHYPHENrate
[tree] JJ(fixedHYPHENrate)
[ud] "(fixedHYPHENrate<root> / fixedHYPHENrate)"
[fourlang] "(fixedHYPHENrate<root> / fixedHYPHENrate)"

NN -> institution_NN
[string] institution
[tree] NN(institution)
[ud] "(institution<root> / institution)"
[fourlang] "(institution<root> / institution)"

NNP -> Ana_NNP
[string] Ana
[tree] NNP(Ana)
[ud] "(Ana<root> / Ana)"
[fourlang] "(Ana<root> / Ana)"

VBG -> offering_VBG
[string] offering
[tree] VBG(offering)
[ud] "(offering<root> / offering)"
[fourlang] "(offering<root> / offering)"

NNS -> champions_NNS
[string] champions
[tree] NNS(champions)
[ud] "(champions<root> / champions)"
[fourlang] "(champions<root> / champions)"

NNS -> attractions_NNS
[string] attractions
[tree] NNS(attractions)
[ud] "(attractions<root> / attractions)"
[fourlang] "(attractions<root> / attractions)"

NNS -> institutions_NNS
[string] institutions
[tree] NNS(institutions)
[ud] "(institutions<root> / institutions)"
[fourlang] "(institutions<root> / institutions)"

NNS -> Germans_NNS
[string] Germans
[tree] NNS(Germans)
[ud] "(Germans<root> / Germans)"
[fourlang] "(Germans<root> / Germans)"

NNP -> SETP_NNP
[string] SETP
[tree] NNP(SETP)
[ud] "(SETP<root> / SETP)"
[fourlang] "(SETP<root> / SETP)"

NN -> sort_NN
[string] sort
[tree] NN(sort)
[ud] "(sort<root> / sort)"
[fourlang] "(sort<root> / sort)"

NNPS -> Toys_NNPS
[string] Toys
[tree] NNPS(Toys)
[ud] "(Toys<root> / Toys)"
[fourlang] "(Toys<root> / Toys)"

JJ -> outstanding_JJ
[string] outstanding
[tree] JJ(outstanding)
[ud] "(outstanding<root> / outstanding)"
[fourlang] "(outstanding<root> / outstanding)"

NNP -> NIH_NNP
[string] NIH
[tree] NNP(NIH)
[ud] "(NIH<root> / NIH)"
[fourlang] "(NIH<root> / NIH)"

NN -> bout_NN
[string] bout
[tree] NN(bout)
[ud] "(bout<root> / bout)"
[fourlang] "(bout<root> / bout)"

VB -> finance_VB
[string] finance
[tree] VB(finance)
[ud] "(finance<root> / finance)"
[fourlang] "(finance<root> / finance)"

JJ -> dutyHYPHENfree_JJ
[string] dutyHYPHENfree
[tree] JJ(dutyHYPHENfree)
[ud] "(dutyHYPHENfree<root> / dutyHYPHENfree)"
[fourlang] "(dutyHYPHENfree<root> / dutyHYPHENfree)"

JJ -> cornHYPHENbuying_JJ
[string] cornHYPHENbuying
[tree] JJ(cornHYPHENbuying)
[ud] "(cornHYPHENbuying<root> / cornHYPHENbuying)"
[fourlang] "(cornHYPHENbuying<root> / cornHYPHENbuying)"

JJ -> West_JJ
[string] West
[tree] JJ(West)
[ud] "(West<root> / West)"
[fourlang] "(West<root> / West)"

JJ -> due_JJ
[string] due
[tree] JJ(due)
[ud] "(due<root> / due)"
[fourlang] "(due<root> / due)"

NNS -> allegations_NNS
[string] allegations
[tree] NNS(allegations)
[ud] "(allegations<root> / allegations)"
[fourlang] "(allegations<root> / allegations)"

VBN -> harvested_VBN
[string] harvested
[tree] VBN(harvested)
[ud] "(harvested<root> / harvested)"
[fourlang] "(harvested<root> / harvested)"

NN -> torrent_NN
[string] torrent
[tree] NN(torrent)
[ud] "(torrent<root> / torrent)"
[fourlang] "(torrent<root> / torrent)"

NNP -> Austin_NNP
[string] Austin
[tree] NNP(Austin)
[ud] "(Austin<root> / Austin)"
[fourlang] "(Austin<root> / Austin)"

NNP -> Angola_NNP
[string] Angola
[tree] NNP(Angola)
[ud] "(Angola<root> / Angola)"
[fourlang] "(Angola<root> / Angola)"

VB -> hang_VB
[string] hang
[tree] VB(hang)
[ud] "(hang<root> / hang)"
[fourlang] "(hang<root> / hang)"

NN -> sale_NN
[string] sale
[tree] NN(sale)
[ud] "(sale<root> / sale)"
[fourlang] "(sale<root> / sale)"

NN -> property_NN
[string] property
[tree] NN(property)
[ud] "(property<root> / property)"
[fourlang] "(property<root> / property)"

VBN -> damaged_VBN
[string] damaged
[tree] VBN(damaged)
[ud] "(damaged<root> / damaged)"
[fourlang] "(damaged<root> / damaged)"

RB -> above_RB
[string] above
[tree] RB(above)
[ud] "(above<root> / above)"
[fourlang] "(above<root> / above)"

NNP -> FEDERAL_NNP
[string] FEDERAL
[tree] NNP(FEDERAL)
[ud] "(FEDERAL<root> / FEDERAL)"
[fourlang] "(FEDERAL<root> / FEDERAL)"

PDT -> half_PDT
[string] half
[tree] PDT(half)
[ud] "(half<root> / half)"
[fourlang] "(half<root> / half)"

NN -> reinvestment_NN
[string] reinvestment
[tree] NN(reinvestment)
[ud] "(reinvestment<root> / reinvestment)"
[fourlang] "(reinvestment<root> / reinvestment)"

NN -> rate_NN
[string] rate
[tree] NN(rate)
[ud] "(rate<root> / rate)"
[fourlang] "(rate<root> / rate)"

NN -> agenda_NN
[string] agenda
[tree] NN(agenda)
[ud] "(agenda<root> / agenda)"
[fourlang] "(agenda<root> / agenda)"

NNP -> Integra_NNP
[string] Integra
[tree] NNP(Integra)
[ud] "(Integra<root> / Integra)"
[fourlang] "(Integra<root> / Integra)"

NNP -> CORP_NNP
[string] CORP
[tree] NNP(CORP)
[ud] "(CORP<root> / CORP)"
[fourlang] "(CORP<root> / CORP)"

NNS -> clouds_NNS
[string] clouds
[tree] NNS(clouds)
[ud] "(clouds<root> / clouds)"
[fourlang] "(clouds<root> / clouds)"

NNP -> Roosevelt_NNP
[string] Roosevelt
[tree] NNP(Roosevelt)
[ud] "(Roosevelt<root> / Roosevelt)"
[fourlang] "(Roosevelt<root> / Roosevelt)"

NNP -> INTERHYPHENTEL_NNP
[string] INTERHYPHENTEL
[tree] NNP(INTERHYPHENTEL)
[ud] "(INTERHYPHENTEL<root> / INTERHYPHENTEL)"
[fourlang] "(INTERHYPHENTEL<root> / INTERHYPHENTEL)"

NN -> cake_NN
[string] cake
[tree] NN(cake)
[ud] "(cake<root> / cake)"
[fourlang] "(cake<root> / cake)"

NNP -> Ala_NNP
[string] Ala
[tree] NNP(Ala)
[ud] "(Ala<root> / Ala)"
[fourlang] "(Ala<root> / Ala)"

NN -> drawing_NN
[string] drawing
[tree] NN(drawing)
[ud] "(drawing<root> / drawing)"
[fourlang] "(drawing<root> / drawing)"

NN -> selfHYPHENesteem_NN
[string] selfHYPHENesteem
[tree] NN(selfHYPHENesteem)
[ud] "(selfHYPHENesteem<root> / selfHYPHENesteem)"
[fourlang] "(selfHYPHENesteem<root> / selfHYPHENesteem)"

NN -> blood_NN
[string] blood
[tree] NN(blood)
[ud] "(blood<root> / blood)"
[fourlang] "(blood<root> / blood)"

VBG -> leveling_VBG
[string] leveling
[tree] VBG(leveling)
[ud] "(leveling<root> / leveling)"
[fourlang] "(leveling<root> / leveling)"

JJ -> moreHYPHENefficient_JJ
[string] moreHYPHENefficient
[tree] JJ(moreHYPHENefficient)
[ud] "(moreHYPHENefficient<root> / moreHYPHENefficient)"
[fourlang] "(moreHYPHENefficient<root> / moreHYPHENefficient)"

NN -> PAPER_NN
[string] PAPER
[tree] NN(PAPER)
[ud] "(PAPER<root> / PAPER)"
[fourlang] "(PAPER<root> / PAPER)"

MD -> can_MD
[string] can
[tree] MD(can)
[ud] "(can<root> / can)"
[fourlang] "(can<root> / can)"

NNP -> Intecknings_NNP
[string] Intecknings
[tree] NNP(Intecknings)
[ud] "(Intecknings<root> / Intecknings)"
[fourlang] "(Intecknings<root> / Intecknings)"

NN -> doctrine_NN
[string] doctrine
[tree] NN(doctrine)
[ud] "(doctrine<root> / doctrine)"
[fourlang] "(doctrine<root> / doctrine)"

NN -> sulfurHYPHENdioxide_NN
[string] sulfurHYPHENdioxide
[tree] NN(sulfurHYPHENdioxide)
[ud] "(sulfurHYPHENdioxide<root> / sulfurHYPHENdioxide)"
[fourlang] "(sulfurHYPHENdioxide<root> / sulfurHYPHENdioxide)"

NN -> StockHYPHENindex_NN
[string] StockHYPHENindex
[tree] NN(StockHYPHENindex)
[ud] "(StockHYPHENindex<root> / StockHYPHENindex)"
[fourlang] "(StockHYPHENindex<root> / StockHYPHENindex)"

NN -> customer_NN
[string] customer
[tree] NN(customer)
[ud] "(customer<root> / customer)"
[fourlang] "(customer<root> / customer)"

NNS -> programs_NNS
[string] programs
[tree] NNS(programs)
[ud] "(programs<root> / programs)"
[fourlang] "(programs<root> / programs)"

NNP -> Poore_NNP
[string] Poore
[tree] NNP(Poore)
[ud] "(Poore<root> / Poore)"
[fourlang] "(Poore<root> / Poore)"

VBP -> study_VBP
[string] study
[tree] VBP(study)
[ud] "(study<root> / study)"
[fourlang] "(study<root> / study)"

NN -> speed_NN
[string] speed
[tree] NN(speed)
[ud] "(speed<root> / speed)"
[fourlang] "(speed<root> / speed)"

NNS -> earnings_NNS
[string] earnings
[tree] NNS(earnings)
[ud] "(earnings<root> / earnings)"
[fourlang] "(earnings<root> / earnings)"

VBG -> shrinking_VBG
[string] shrinking
[tree] VBG(shrinking)
[ud] "(shrinking<root> / shrinking)"
[fourlang] "(shrinking<root> / shrinking)"

NN -> man_NN
[string] man
[tree] NN(man)
[ud] "(man<root> / man)"
[fourlang] "(man<root> / man)"

RB -> usually_RB
[string] usually
[tree] RB(usually)
[ud] "(usually<root> / usually)"
[fourlang] "(usually<root> / usually)"

NNP -> MacDonald_NNP
[string] MacDonald
[tree] NNP(MacDonald)
[ud] "(MacDonald<root> / MacDonald)"
[fourlang] "(MacDonald<root> / MacDonald)"

RB -> no_RB
[string] no
[tree] RB(no)
[ud] "(no<root> / no)"
[fourlang] "(no<root> / no)"

NNP -> Wamre_NNP
[string] Wamre
[tree] NNP(Wamre)
[ud] "(Wamre<root> / Wamre)"
[fourlang] "(Wamre<root> / Wamre)"

NN -> trigger_NN
[string] trigger
[tree] NN(trigger)
[ud] "(trigger<root> / trigger)"
[fourlang] "(trigger<root> / trigger)"

NN -> expression_NN
[string] expression
[tree] NN(expression)
[ud] "(expression<root> / expression)"
[fourlang] "(expression<root> / expression)"

NN -> building_NN
[string] building
[tree] NN(building)
[ud] "(building<root> / building)"
[fourlang] "(building<root> / building)"

NNS -> compositions_NNS
[string] compositions
[tree] NNS(compositions)
[ud] "(compositions<root> / compositions)"
[fourlang] "(compositions<root> / compositions)"

PRP$ -> Its_PRP$
[string] Its
[tree] PRP$(Its)
[ud] "(Its<root> / Its)"
[fourlang] "(Its<root> / Its)"

VBG -> restructuring_VBG
[string] restructuring
[tree] VBG(restructuring)
[ud] "(restructuring<root> / restructuring)"
[fourlang] "(restructuring<root> / restructuring)"

VB -> begin_VB
[string] begin
[tree] VB(begin)
[ud] "(begin<root> / begin)"
[fourlang] "(begin<root> / begin)"

NN -> tender_NN
[string] tender
[tree] NN(tender)
[ud] "(tender<root> / tender)"
[fourlang] "(tender<root> / tender)"

NNS -> replies_NNS
[string] replies
[tree] NNS(replies)
[ud] "(replies<root> / replies)"
[fourlang] "(replies<root> / replies)"

JJ -> fat_JJ
[string] fat
[tree] JJ(fat)
[ud] "(fat<root> / fat)"
[fourlang] "(fat<root> / fat)"

NN -> disarray_NN
[string] disarray
[tree] NN(disarray)
[ud] "(disarray<root> / disarray)"
[fourlang] "(disarray<root> / disarray)"

JJ -> sensational_JJ
[string] sensational
[tree] JJ(sensational)
[ud] "(sensational<root> / sensational)"
[fourlang] "(sensational<root> / sensational)"

NN -> suspension_NN
[string] suspension
[tree] NN(suspension)
[ud] "(suspension<root> / suspension)"
[fourlang] "(suspension<root> / suspension)"

NNS -> millionaires_NNS
[string] millionaires
[tree] NNS(millionaires)
[ud] "(millionaires<root> / millionaires)"
[fourlang] "(millionaires<root> / millionaires)"

VBN -> become_VBN
[string] become
[tree] VBN(become)
[ud] "(become<root> / become)"
[fourlang] "(become<root> / become)"

NNS -> superconductors_NNS
[string] superconductors
[tree] NNS(superconductors)
[ud] "(superconductors<root> / superconductors)"
[fourlang] "(superconductors<root> / superconductors)"

NNS -> companies_NNS
[string] companies
[tree] NNS(companies)
[ud] "(companies<root> / companies)"
[fourlang] "(companies<root> / companies)"

NNP -> American_NNP
[string] American
[tree] NNP(American)
[ud] "(American<root> / American)"
[fourlang] "(American<root> / American)"

NN -> modification_NN
[string] modification
[tree] NN(modification)
[ud] "(modification<root> / modification)"
[fourlang] "(modification<root> / modification)"

JJR -> faster_JJR
[string] faster
[tree] JJR(faster)
[ud] "(faster<root> / faster)"
[fourlang] "(faster<root> / faster)"

VBN -> limited_VBN
[string] limited
[tree] VBN(limited)
[ud] "(limited<root> / limited)"
[fourlang] "(limited<root> / limited)"

JJ -> impetuous_JJ
[string] impetuous
[tree] JJ(impetuous)
[ud] "(impetuous<root> / impetuous)"
[fourlang] "(impetuous<root> / impetuous)"

JJ -> conventional_JJ
[string] conventional
[tree] JJ(conventional)
[ud] "(conventional<root> / conventional)"
[fourlang] "(conventional<root> / conventional)"

NNP -> Dorothy_NNP
[string] Dorothy
[tree] NNP(Dorothy)
[ud] "(Dorothy<root> / Dorothy)"
[fourlang] "(Dorothy<root> / Dorothy)"

IN -> because_IN
[string] because
[tree] IN(because)
[ud] "(because<root> / because)"
[fourlang] "(because<root> / because)"

NN -> list_NN
[string] list
[tree] NN(list)
[ud] "(list<root> / list)"
[fourlang] "(list<root> / list)"

DT -> Every_DT
[string] Every
[tree] DT(Every)
[ud] "(Every<root> / Every)"
[fourlang] "(Every<root> / Every)"

NN -> clearance_NN
[string] clearance
[tree] NN(clearance)
[ud] "(clearance<root> / clearance)"
[fourlang] "(clearance<root> / clearance)"

VBN -> converted_VBN
[string] converted
[tree] VBN(converted)
[ud] "(converted<root> / converted)"
[fourlang] "(converted<root> / converted)"

VBD -> offered_VBD
[string] offered
[tree] VBD(offered)
[ud] "(offered<root> / offered)"
[fourlang] "(offered<root> / offered)"

NNP -> McGrawHYPHENHill_NNP
[string] McGrawHYPHENHill
[tree] NNP(McGrawHYPHENHill)
[ud] "(McGrawHYPHENHill<root> / McGrawHYPHENHill)"
[fourlang] "(McGrawHYPHENHill<root> / McGrawHYPHENHill)"

JJ -> special_JJ
[string] special
[tree] JJ(special)
[ud] "(special<root> / special)"
[fourlang] "(special<root> / special)"

NNP -> Wild_NNP
[string] Wild
[tree] NNP(Wild)
[ud] "(Wild<root> / Wild)"
[fourlang] "(Wild<root> / Wild)"

NN -> corporation_NN
[string] corporation
[tree] NN(corporation)
[ud] "(corporation<root> / corporation)"
[fourlang] "(corporation<root> / corporation)"

NN -> deputy_NN
[string] deputy
[tree] NN(deputy)
[ud] "(deputy<root> / deputy)"
[fourlang] "(deputy<root> / deputy)"

NNP -> Southern_NNP
[string] Southern
[tree] NNP(Southern)
[ud] "(Southern<root> / Southern)"
[fourlang] "(Southern<root> / Southern)"

NN -> answer_NN
[string] answer
[tree] NN(answer)
[ud] "(answer<root> / answer)"
[fourlang] "(answer<root> / answer)"

NNP -> Marge_NNP
[string] Marge
[tree] NNP(Marge)
[ud] "(Marge<root> / Marge)"
[fourlang] "(Marge<root> / Marge)"

NNP -> Ross_NNP
[string] Ross
[tree] NNP(Ross)
[ud] "(Ross<root> / Ross)"
[fourlang] "(Ross<root> / Ross)"

JJ -> Third_JJ
[string] Third
[tree] JJ(Third)
[ud] "(Third<root> / Third)"
[fourlang] "(Third<root> / Third)"

NNS -> combines_NNS
[string] combines
[tree] NNS(combines)
[ud] "(combines<root> / combines)"
[fourlang] "(combines<root> / combines)"

NNP -> Cara_NNP
[string] Cara
[tree] NNP(Cara)
[ud] "(Cara<root> / Cara)"
[fourlang] "(Cara<root> / Cara)"

NNS -> prices_NNS
[string] prices
[tree] NNS(prices)
[ud] "(prices<root> / prices)"
[fourlang] "(prices<root> / prices)"

WP$ -> whose_WP$
[string] whose
[tree] WP$(whose)
[ud] "(whose<root> / whose)"
[fourlang] "(whose<root> / whose)"

JJ -> shareholderHYPHENrights_JJ
[string] shareholderHYPHENrights
[tree] JJ(shareholderHYPHENrights)
[ud] "(shareholderHYPHENrights<root> / shareholderHYPHENrights)"
[fourlang] "(shareholderHYPHENrights<root> / shareholderHYPHENrights)"

NNS -> rivals_NNS
[string] rivals
[tree] NNS(rivals)
[ud] "(rivals<root> / rivals)"
[fourlang] "(rivals<root> / rivals)"

JJ -> convertible_JJ
[string] convertible
[tree] JJ(convertible)
[ud] "(convertible<root> / convertible)"
[fourlang] "(convertible<root> / convertible)"

NNP -> Moscow_NNP
[string] Moscow
[tree] NNP(Moscow)
[ud] "(Moscow<root> / Moscow)"
[fourlang] "(Moscow<root> / Moscow)"

NNP -> Sabhavasu_NNP
[string] Sabhavasu
[tree] NNP(Sabhavasu)
[ud] "(Sabhavasu<root> / Sabhavasu)"
[fourlang] "(Sabhavasu<root> / Sabhavasu)"

NNS -> fatalities_NNS
[string] fatalities
[tree] NNS(fatalities)
[ud] "(fatalities<root> / fatalities)"
[fourlang] "(fatalities<root> / fatalities)"

NNP -> Petrus_NNP
[string] Petrus
[tree] NNP(Petrus)
[ud] "(Petrus<root> / Petrus)"
[fourlang] "(Petrus<root> / Petrus)"

NNP -> Danville_NNP
[string] Danville
[tree] NNP(Danville)
[ud] "(Danville<root> / Danville)"
[fourlang] "(Danville<root> / Danville)"

NN -> railcar_NN
[string] railcar
[tree] NN(railcar)
[ud] "(railcar<root> / railcar)"
[fourlang] "(railcar<root> / railcar)"

NNS -> questions_NNS
[string] questions
[tree] NNS(questions)
[ud] "(questions<root> / questions)"
[fourlang] "(questions<root> / questions)"

NNP -> Pat_NNP
[string] Pat
[tree] NNP(Pat)
[ud] "(Pat<root> / Pat)"
[fourlang] "(Pat<root> / Pat)"

NNP -> Moon_NNP
[string] Moon
[tree] NNP(Moon)
[ud] "(Moon<root> / Moon)"
[fourlang] "(Moon<root> / Moon)"

NN -> valuation_NN
[string] valuation
[tree] NN(valuation)
[ud] "(valuation<root> / valuation)"
[fourlang] "(valuation<root> / valuation)"

JJ -> afterHYPHENtax_JJ
[string] afterHYPHENtax
[tree] JJ(afterHYPHENtax)
[ud] "(afterHYPHENtax<root> / afterHYPHENtax)"
[fourlang] "(afterHYPHENtax<root> / afterHYPHENtax)"

VBG -> booming_VBG
[string] booming
[tree] VBG(booming)
[ud] "(booming<root> / booming)"
[fourlang] "(booming<root> / booming)"

JJS -> busiest_JJS
[string] busiest
[tree] JJS(busiest)
[ud] "(busiest<root> / busiest)"
[fourlang] "(busiest<root> / busiest)"

TO -> to_TO
[string] to
[tree] TO(to)
[ud] "(to<root> / to)"
[fourlang] "(to<root> / to)"

NN -> assumption_NN
[string] assumption
[tree] NN(assumption)
[ud] "(assumption<root> / assumption)"
[fourlang] "(assumption<root> / assumption)"

JJ -> excessive_JJ
[string] excessive
[tree] JJ(excessive)
[ud] "(excessive<root> / excessive)"
[fourlang] "(excessive<root> / excessive)"

VB -> bring_VB
[string] bring
[tree] VB(bring)
[ud] "(bring<root> / bring)"
[fourlang] "(bring<root> / bring)"

RB -> now_RB
[string] now
[tree] RB(now)
[ud] "(now<root> / now)"
[fourlang] "(now<root> / now)"

NNS -> figures_NNS
[string] figures
[tree] NNS(figures)
[ud] "(figures<root> / figures)"
[fourlang] "(figures<root> / figures)"

JJ -> buyHYPHENback_JJ
[string] buyHYPHENback
[tree] JJ(buyHYPHENback)
[ud] "(buyHYPHENback<root> / buyHYPHENback)"
[fourlang] "(buyHYPHENback<root> / buyHYPHENback)"

NNP -> Esso_NNP
[string] Esso
[tree] NNP(Esso)
[ud] "(Esso<root> / Esso)"
[fourlang] "(Esso<root> / Esso)"

NN -> son_NN
[string] son
[tree] NN(son)
[ud] "(son<root> / son)"
[fourlang] "(son<root> / son)"

NN -> strike_NN
[string] strike
[tree] NN(strike)
[ud] "(strike<root> / strike)"
[fourlang] "(strike<root> / strike)"

NN -> BMPHYPHENDIGIT_NN
[string] BMPHYPHENDIGIT
[tree] NN(BMPHYPHENDIGIT)
[ud] "(BMPHYPHENDIGIT<root> / BMPHYPHENDIGIT)"
[fourlang] "(BMPHYPHENDIGIT<root> / BMPHYPHENDIGIT)"

NN -> citation_NN
[string] citation
[tree] NN(citation)
[ud] "(citation<root> / citation)"
[fourlang] "(citation<root> / citation)"

JJ -> singleHYPHENdigit_JJ
[string] singleHYPHENdigit
[tree] JJ(singleHYPHENdigit)
[ud] "(singleHYPHENdigit<root> / singleHYPHENdigit)"
[fourlang] "(singleHYPHENdigit<root> / singleHYPHENdigit)"

JJ -> beneficial_JJ
[string] beneficial
[tree] JJ(beneficial)
[ud] "(beneficial<root> / beneficial)"
[fourlang] "(beneficial<root> / beneficial)"

NNP -> Chase_NNP
[string] Chase
[tree] NNP(Chase)
[ud] "(Chase<root> / Chase)"
[fourlang] "(Chase<root> / Chase)"

VBD -> surged_VBD
[string] surged
[tree] VBD(surged)
[ud] "(surged<root> / surged)"
[fourlang] "(surged<root> / surged)"

NNS -> Critics_NNS
[string] Critics
[tree] NNS(Critics)
[ud] "(Critics<root> / Critics)"
[fourlang] "(Critics<root> / Critics)"

WP -> who_WP
[string] who
[tree] WP(who)
[ud] "(who<root> / who)"
[fourlang] "(who<root> / who)"

NN -> player_NN
[string] player
[tree] NN(player)
[ud] "(player<root> / player)"
[fourlang] "(player<root> / player)"

RB -> early_RB
[string] early
[tree] RB(early)
[ud] "(early<root> / early)"
[fourlang] "(early<root> / early)"

NNS -> churches_NNS
[string] churches
[tree] NNS(churches)
[ud] "(churches<root> / churches)"
[fourlang] "(churches<root> / churches)"

JJ -> scientific_JJ
[string] scientific
[tree] JJ(scientific)
[ud] "(scientific<root> / scientific)"
[fourlang] "(scientific<root> / scientific)"

VBG -> featuring_VBG
[string] featuring
[tree] VBG(featuring)
[ud] "(featuring<root> / featuring)"
[fourlang] "(featuring<root> / featuring)"

NNS -> exchanges_NNS
[string] exchanges
[tree] NNS(exchanges)
[ud] "(exchanges<root> / exchanges)"
[fourlang] "(exchanges<root> / exchanges)"

JJ -> retentive_JJ
[string] retentive
[tree] JJ(retentive)
[ud] "(retentive<root> / retentive)"
[fourlang] "(retentive<root> / retentive)"

NN -> portion_NN
[string] portion
[tree] NN(portion)
[ud] "(portion<root> / portion)"
[fourlang] "(portion<root> / portion)"

JJ -> straight_JJ
[string] straight
[tree] JJ(straight)
[ud] "(straight<root> / straight)"
[fourlang] "(straight<root> / straight)"

NN -> accord_NN
[string] accord
[tree] NN(accord)
[ud] "(accord<root> / accord)"
[fourlang] "(accord<root> / accord)"

NN -> application_NN
[string] application
[tree] NN(application)
[ud] "(application<root> / application)"
[fourlang] "(application<root> / application)"

NNP -> Peter_NNP
[string] Peter
[tree] NNP(Peter)
[ud] "(Peter<root> / Peter)"
[fourlang] "(Peter<root> / Peter)"

JJ -> British_JJ
[string] British
[tree] JJ(British)
[ud] "(British<root> / British)"
[fourlang] "(British<root> / British)"

NN -> nickname_NN
[string] nickname
[tree] NN(nickname)
[ud] "(nickname<root> / nickname)"
[fourlang] "(nickname<root> / nickname)"

NNP -> Sandifer_NNP
[string] Sandifer
[tree] NNP(Sandifer)
[ud] "(Sandifer<root> / Sandifer)"
[fourlang] "(Sandifer<root> / Sandifer)"

NN -> Evidence_NN
[string] Evidence
[tree] NN(Evidence)
[ud] "(Evidence<root> / Evidence)"
[fourlang] "(Evidence<root> / Evidence)"

NNP -> Terrace_NNP
[string] Terrace
[tree] NNP(Terrace)
[ud] "(Terrace<root> / Terrace)"
[fourlang] "(Terrace<root> / Terrace)"

NN -> slew_NN
[string] slew
[tree] NN(slew)
[ud] "(slew<root> / slew)"
[fourlang] "(slew<root> / slew)"

JJ -> cyclical_JJ
[string] cyclical
[tree] JJ(cyclical)
[ud] "(cyclical<root> / cyclical)"
[fourlang] "(cyclical<root> / cyclical)"

VB -> advertise_VB
[string] advertise
[tree] VB(advertise)
[ud] "(advertise<root> / advertise)"
[fourlang] "(advertise<root> / advertise)"

NNS -> recommendations_NNS
[string] recommendations
[tree] NNS(recommendations)
[ud] "(recommendations<root> / recommendations)"
[fourlang] "(recommendations<root> / recommendations)"

NNP -> Cancer_NNP
[string] Cancer
[tree] NNP(Cancer)
[ud] "(Cancer<root> / Cancer)"
[fourlang] "(Cancer<root> / Cancer)"

JJ -> collective_JJ
[string] collective
[tree] JJ(collective)
[ud] "(collective<root> / collective)"
[fourlang] "(collective<root> / collective)"

NNS -> goblins_NNS
[string] goblins
[tree] NNS(goblins)
[ud] "(goblins<root> / goblins)"
[fourlang] "(goblins<root> / goblins)"

NN -> chunk_NN
[string] chunk
[tree] NN(chunk)
[ud] "(chunk<root> / chunk)"
[fourlang] "(chunk<root> / chunk)"

NNP -> Carl_NNP
[string] Carl
[tree] NNP(Carl)
[ud] "(Carl<root> / Carl)"
[fourlang] "(Carl<root> / Carl)"

NNS -> shortages_NNS
[string] shortages
[tree] NNS(shortages)
[ud] "(shortages<root> / shortages)"
[fourlang] "(shortages<root> / shortages)"

CD -> DIGITPERIODDIGITDIGITDIGITDIGIT_CD
[string] DIGITPERIODDIGITDIGITDIGITDIGIT
[tree] CD(DIGITPERIODDIGITDIGITDIGITDIGIT)
[ud] "(DIGITPERIODDIGITDIGITDIGITDIGIT<root> / DIGITPERIODDIGITDIGITDIGITDIGIT)"
[fourlang] "(DIGITPERIODDIGITDIGITDIGITDIGIT<root> / DIGITPERIODDIGITDIGITDIGITDIGIT)"

NN -> control_NN
[string] control
[tree] NN(control)
[ud] "(control<root> / control)"
[fourlang] "(control<root> / control)"

RB -> much_RB
[string] much
[tree] RB(much)
[ud] "(much<root> / much)"
[fourlang] "(much<root> / much)"

NNS -> prerogatives_NNS
[string] prerogatives
[tree] NNS(prerogatives)
[ud] "(prerogatives<root> / prerogatives)"
[fourlang] "(prerogatives<root> / prerogatives)"

NN -> oblivion_NN
[string] oblivion
[tree] NN(oblivion)
[ud] "(oblivion<root> / oblivion)"
[fourlang] "(oblivion<root> / oblivion)"

RB -> even_RB
[string] even
[tree] RB(even)
[ud] "(even<root> / even)"
[fourlang] "(even<root> / even)"

JJ -> Numerous_JJ
[string] Numerous
[tree] JJ(Numerous)
[ud] "(Numerous<root> / Numerous)"
[fourlang] "(Numerous<root> / Numerous)"

NNP -> Leon_NNP
[string] Leon
[tree] NNP(Leon)
[ud] "(Leon<root> / Leon)"
[fourlang] "(Leon<root> / Leon)"

NNS -> critics_NNS
[string] critics
[tree] NNS(critics)
[ud] "(critics<root> / critics)"
[fourlang] "(critics<root> / critics)"

NNP -> Crown_NNP
[string] Crown
[tree] NNP(Crown)
[ud] "(Crown<root> / Crown)"
[fourlang] "(Crown<root> / Crown)"

JJ -> negotiable_JJ
[string] negotiable
[tree] JJ(negotiable)
[ud] "(negotiable<root> / negotiable)"
[fourlang] "(negotiable<root> / negotiable)"

VBN -> interrogated_VBN
[string] interrogated
[tree] VBN(interrogated)
[ud] "(interrogated<root> / interrogated)"
[fourlang] "(interrogated<root> / interrogated)"

NNP -> B_NNP
[string] B
[tree] NNP(B)
[ud] "(B<root> / B)"
[fourlang] "(B<root> / B)"

JJ -> sixth_JJ
[string] sixth
[tree] JJ(sixth)
[ud] "(sixth<root> / sixth)"
[fourlang] "(sixth<root> / sixth)"

VB -> equip_VB
[string] equip
[tree] VB(equip)
[ud] "(equip<root> / equip)"
[fourlang] "(equip<root> / equip)"

JJ -> incomplete_JJ
[string] incomplete
[tree] JJ(incomplete)
[ud] "(incomplete<root> / incomplete)"
[fourlang] "(incomplete<root> / incomplete)"

VBG -> Performing_VBG
[string] Performing
[tree] VBG(Performing)
[ud] "(Performing<root> / Performing)"
[fourlang] "(Performing<root> / Performing)"

NN -> rally_NN
[string] rally
[tree] NN(rally)
[ud] "(rally<root> / rally)"
[fourlang] "(rally<root> / rally)"

NN -> circle_NN
[string] circle
[tree] NN(circle)
[ud] "(circle<root> / circle)"
[fourlang] "(circle<root> / circle)"

VBN -> renewed_VBN
[string] renewed
[tree] VBN(renewed)
[ud] "(renewed<root> / renewed)"
[fourlang] "(renewed<root> / renewed)"

NNS -> Exports_NNS
[string] Exports
[tree] NNS(Exports)
[ud] "(Exports<root> / Exports)"
[fourlang] "(Exports<root> / Exports)"

NN -> mainland_NN
[string] mainland
[tree] NN(mainland)
[ud] "(mainland<root> / mainland)"
[fourlang] "(mainland<root> / mainland)"

NN -> fan_NN
[string] fan
[tree] NN(fan)
[ud] "(fan<root> / fan)"
[fourlang] "(fan<root> / fan)"

NNP -> Alzheimer_NNP
[string] Alzheimer
[tree] NNP(Alzheimer)
[ud] "(Alzheimer<root> / Alzheimer)"
[fourlang] "(Alzheimer<root> / Alzheimer)"

NNP -> Industries_NNP
[string] Industries
[tree] NNP(Industries)
[ud] "(Industries<root> / Industries)"
[fourlang] "(Industries<root> / Industries)"

NN -> Composer_NN
[string] Composer
[tree] NN(Composer)
[ud] "(Composer<root> / Composer)"
[fourlang] "(Composer<root> / Composer)"

NNP -> PS_NNP
[string] PS
[tree] NNP(PS)
[ud] "(PS<root> / PS)"
[fourlang] "(PS<root> / PS)"

NN -> boost_NN
[string] boost
[tree] NN(boost)
[ud] "(boost<root> / boost)"
[fourlang] "(boost<root> / boost)"

NN -> ticket_NN
[string] ticket
[tree] NN(ticket)
[ud] "(ticket<root> / ticket)"
[fourlang] "(ticket<root> / ticket)"

NN -> floor_NN
[string] floor
[tree] NN(floor)
[ud] "(floor<root> / floor)"
[fourlang] "(floor<root> / floor)"

NNP -> BPERIOD_NNP
[string] BPERIOD
[tree] NNP(BPERIOD)
[ud] "(BPERIOD<root> / BPERIOD)"
[fourlang] "(BPERIOD<root> / BPERIOD)"

JJ -> such_JJ
[string] such
[tree] JJ(such)
[ud] "(such<root> / such)"
[fourlang] "(such<root> / such)"

NN -> violence_NN
[string] violence
[tree] NN(violence)
[ud] "(violence<root> / violence)"
[fourlang] "(violence<root> / violence)"

VBP -> take_VBP
[string] take
[tree] VBP(take)
[ud] "(take<root> / take)"
[fourlang] "(take<root> / take)"

NN -> Volume_NN
[string] Volume
[tree] NN(Volume)
[ud] "(Volume<root> / Volume)"
[fourlang] "(Volume<root> / Volume)"

VBD -> sold_VBD
[string] sold
[tree] VBD(sold)
[ud] "(sold<root> / sold)"
[fourlang] "(sold<root> / sold)"

NN -> disaster_NN
[string] disaster
[tree] NN(disaster)
[ud] "(disaster<root> / disaster)"
[fourlang] "(disaster<root> / disaster)"

VBD -> posted_VBD
[string] posted
[tree] VBD(posted)
[ud] "(posted<root> / posted)"
[fourlang] "(posted<root> / posted)"

VBN -> increased_VBN
[string] increased
[tree] VBN(increased)
[ud] "(increased<root> / increased)"
[fourlang] "(increased<root> / increased)"

JJ -> gloomy_JJ
[string] gloomy
[tree] JJ(gloomy)
[ud] "(gloomy<root> / gloomy)"
[fourlang] "(gloomy<root> / gloomy)"

NNP -> Veraldi_NNP
[string] Veraldi
[tree] NNP(Veraldi)
[ud] "(Veraldi<root> / Veraldi)"
[fourlang] "(Veraldi<root> / Veraldi)"

RB -> up_RB
[string] up
[tree] RB(up)
[ud] "(up<root> / up)"
[fourlang] "(up<root> / up)"

NNP -> Runkel_NNP
[string] Runkel
[tree] NNP(Runkel)
[ud] "(Runkel<root> / Runkel)"
[fourlang] "(Runkel<root> / Runkel)"

JJ -> lousy_JJ
[string] lousy
[tree] JJ(lousy)
[ud] "(lousy<root> / lousy)"
[fourlang] "(lousy<root> / lousy)"

NN -> series_NN
[string] series
[tree] NN(series)
[ud] "(series<root> / series)"
[fourlang] "(series<root> / series)"

DT -> AN_DT
[string] AN
[tree] DT(AN)
[ud] "(AN<root> / AN)"
[fourlang] "(AN<root> / AN)"

NNP -> Judie_NNP
[string] Judie
[tree] NNP(Judie)
[ud] "(Judie<root> / Judie)"
[fourlang] "(Judie<root> / Judie)"

JJ -> rateHYPHENsensitive_JJ
[string] rateHYPHENsensitive
[tree] JJ(rateHYPHENsensitive)
[ud] "(rateHYPHENsensitive<root> / rateHYPHENsensitive)"
[fourlang] "(rateHYPHENsensitive<root> / rateHYPHENsensitive)"

NN -> network_NN
[string] network
[tree] NN(network)
[ud] "(network<root> / network)"
[fourlang] "(network<root> / network)"

NN -> sigh_NN
[string] sigh
[tree] NN(sigh)
[ud] "(sigh<root> / sigh)"
[fourlang] "(sigh<root> / sigh)"

VBG -> executing_VBG
[string] executing
[tree] VBG(executing)
[ud] "(executing<root> / executing)"
[fourlang] "(executing<root> / executing)"

JJ -> ArbitrageHYPHENrelated_JJ
[string] ArbitrageHYPHENrelated
[tree] JJ(ArbitrageHYPHENrelated)
[ud] "(ArbitrageHYPHENrelated<root> / ArbitrageHYPHENrelated)"
[fourlang] "(ArbitrageHYPHENrelated<root> / ArbitrageHYPHENrelated)"

NNS -> deposits_NNS
[string] deposits
[tree] NNS(deposits)
[ud] "(deposits<root> / deposits)"
[fourlang] "(deposits<root> / deposits)"

JJR -> earlier_JJR
[string] earlier
[tree] JJR(earlier)
[ud] "(earlier<root> / earlier)"
[fourlang] "(earlier<root> / earlier)"

CD -> DIGITPERIODDIGITDIGIT_CD
[string] DIGITPERIODDIGITDIGIT
[tree] CD(DIGITPERIODDIGITDIGIT)
[ud] "(DIGITPERIODDIGITDIGIT<root> / DIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITPERIODDIGITDIGIT<root> / DIGITPERIODDIGITDIGIT)"

JJ -> preHYPHENDIGITDIGITDIGITDIGIT_JJ
[string] preHYPHENDIGITDIGITDIGITDIGIT
[tree] JJ(preHYPHENDIGITDIGITDIGITDIGIT)
[ud] "(preHYPHENDIGITDIGITDIGITDIGIT<root> / preHYPHENDIGITDIGITDIGITDIGIT)"
[fourlang] "(preHYPHENDIGITDIGITDIGITDIGIT<root> / preHYPHENDIGITDIGITDIGITDIGIT)"

DT -> This_DT
[string] This
[tree] DT(This)
[ud] "(This<root> / This)"
[fourlang] "(This<root> / This)"

JJ -> dry_JJ
[string] dry
[tree] JJ(dry)
[ud] "(dry<root> / dry)"
[fourlang] "(dry<root> / dry)"

VBG -> permitting_VBG
[string] permitting
[tree] VBG(permitting)
[ud] "(permitting<root> / permitting)"
[fourlang] "(permitting<root> / permitting)"

VBG -> working_VBG
[string] working
[tree] VBG(working)
[ud] "(working<root> / working)"
[fourlang] "(working<root> / working)"

JJ -> successful_JJ
[string] successful
[tree] JJ(successful)
[ud] "(successful<root> / successful)"
[fourlang] "(successful<root> / successful)"

WP -> what_WP
[string] what
[tree] WP(what)
[ud] "(what<root> / what)"
[fourlang] "(what<root> / what)"

NN -> sticker_NN
[string] sticker
[tree] NN(sticker)
[ud] "(sticker<root> / sticker)"
[fourlang] "(sticker<root> / sticker)"

NNS -> shows_NNS
[string] shows
[tree] NNS(shows)
[ud] "(shows<root> / shows)"
[fourlang] "(shows<root> / shows)"

NN -> iota_NN
[string] iota
[tree] NN(iota)
[ud] "(iota<root> / iota)"
[fourlang] "(iota<root> / iota)"

JJS -> cheapest_JJS
[string] cheapest
[tree] JJS(cheapest)
[ud] "(cheapest<root> / cheapest)"
[fourlang] "(cheapest<root> / cheapest)"

NNP -> Baltimore_NNP
[string] Baltimore
[tree] NNP(Baltimore)
[ud] "(Baltimore<root> / Baltimore)"
[fourlang] "(Baltimore<root> / Baltimore)"

NNS -> appointments_NNS
[string] appointments
[tree] NNS(appointments)
[ud] "(appointments<root> / appointments)"
[fourlang] "(appointments<root> / appointments)"

NNP -> OTC_NNP
[string] OTC
[tree] NNP(OTC)
[ud] "(OTC<root> / OTC)"
[fourlang] "(OTC<root> / OTC)"

NN -> instrument_NN
[string] instrument
[tree] NN(instrument)
[ud] "(instrument<root> / instrument)"
[fourlang] "(instrument<root> / instrument)"

LS -> a_LS
[string] a
[tree] LS(a)
[ud] "(a<root> / a)"
[fourlang] "(a<root> / a)"

NNP -> Gary_NNP
[string] Gary
[tree] NNP(Gary)
[ud] "(Gary<root> / Gary)"
[fourlang] "(Gary<root> / Gary)"

NN -> slope_NN
[string] slope
[tree] NN(slope)
[ud] "(slope<root> / slope)"
[fourlang] "(slope<root> / slope)"

VBN -> invested_VBN
[string] invested
[tree] VBN(invested)
[ud] "(invested<root> / invested)"
[fourlang] "(invested<root> / invested)"

NNP -> Marshall_NNP
[string] Marshall
[tree] NNP(Marshall)
[ud] "(Marshall<root> / Marshall)"
[fourlang] "(Marshall<root> / Marshall)"

NNS -> landfills_NNS
[string] landfills
[tree] NNS(landfills)
[ud] "(landfills<root> / landfills)"
[fourlang] "(landfills<root> / landfills)"

JJ -> competitive_JJ
[string] competitive
[tree] JJ(competitive)
[ud] "(competitive<root> / competitive)"
[fourlang] "(competitive<root> / competitive)"

JJ -> brief_JJ
[string] brief
[tree] JJ(brief)
[ud] "(brief<root> / brief)"
[fourlang] "(brief<root> / brief)"

NN -> government_NN
[string] government
[tree] NN(government)
[ud] "(government<root> / government)"
[fourlang] "(government<root> / government)"

VBN -> reclaimed_VBN
[string] reclaimed
[tree] VBN(reclaimed)
[ud] "(reclaimed<root> / reclaimed)"
[fourlang] "(reclaimed<root> / reclaimed)"

JJ -> fourHYPHENday_JJ
[string] fourHYPHENday
[tree] JJ(fourHYPHENday)
[ud] "(fourHYPHENday<root> / fourHYPHENday)"
[fourlang] "(fourHYPHENday<root> / fourHYPHENday)"

VBN -> produced_VBN
[string] produced
[tree] VBN(produced)
[ud] "(produced<root> / produced)"
[fourlang] "(produced<root> / produced)"

VBN -> priced_VBN
[string] priced
[tree] VBN(priced)
[ud] "(priced<root> / priced)"
[fourlang] "(priced<root> / priced)"

NNP -> Chapman_NNP
[string] Chapman
[tree] NNP(Chapman)
[ud] "(Chapman<root> / Chapman)"
[fourlang] "(Chapman<root> / Chapman)"

VBN -> fashioned_VBN
[string] fashioned
[tree] VBN(fashioned)
[ud] "(fashioned<root> / fashioned)"
[fourlang] "(fashioned<root> / fashioned)"

NN -> treatment_NN
[string] treatment
[tree] NN(treatment)
[ud] "(treatment<root> / treatment)"
[fourlang] "(treatment<root> / treatment)"

JJ -> substantial_JJ
[string] substantial
[tree] JJ(substantial)
[ud] "(substantial<root> / substantial)"
[fourlang] "(substantial<root> / substantial)"

CD -> one_CD
[string] one
[tree] CD(one)
[ud] "(one<root> / one)"
[fourlang] "(one<root> / one)"

NNP -> Mindy_NNP
[string] Mindy
[tree] NNP(Mindy)
[ud] "(Mindy<root> / Mindy)"
[fourlang] "(Mindy<root> / Mindy)"

NN -> agreement_NN
[string] agreement
[tree] NN(agreement)
[ud] "(agreement<root> / agreement)"
[fourlang] "(agreement<root> / agreement)"

JJ -> highHYPHENpriced_JJ
[string] highHYPHENpriced
[tree] JJ(highHYPHENpriced)
[ud] "(highHYPHENpriced<root> / highHYPHENpriced)"
[fourlang] "(highHYPHENpriced<root> / highHYPHENpriced)"

NN -> clause_NN
[string] clause
[tree] NN(clause)
[ud] "(clause<root> / clause)"
[fourlang] "(clause<root> / clause)"

NNS -> memories_NNS
[string] memories
[tree] NNS(memories)
[ud] "(memories<root> / memories)"
[fourlang] "(memories<root> / memories)"

NNS -> twoHYPHENsevenths_NNS
[string] twoHYPHENsevenths
[tree] NNS(twoHYPHENsevenths)
[ud] "(twoHYPHENsevenths<root> / twoHYPHENsevenths)"
[fourlang] "(twoHYPHENsevenths<root> / twoHYPHENsevenths)"

NNS -> disorders_NNS
[string] disorders
[tree] NNS(disorders)
[ud] "(disorders<root> / disorders)"
[fourlang] "(disorders<root> / disorders)"

NN -> vortex_NN
[string] vortex
[tree] NN(vortex)
[ud] "(vortex<root> / vortex)"
[fourlang] "(vortex<root> / vortex)"

NN -> shelf_NN
[string] shelf
[tree] NN(shelf)
[ud] "(shelf<root> / shelf)"
[fourlang] "(shelf<root> / shelf)"

NN -> adviser_NN
[string] adviser
[tree] NN(adviser)
[ud] "(adviser<root> / adviser)"
[fourlang] "(adviser<root> / adviser)"

NN -> subcommittee_NN
[string] subcommittee
[tree] NN(subcommittee)
[ud] "(subcommittee<root> / subcommittee)"
[fourlang] "(subcommittee<root> / subcommittee)"

VBN -> spooked_VBN
[string] spooked
[tree] VBN(spooked)
[ud] "(spooked<root> / spooked)"
[fourlang] "(spooked<root> / spooked)"

NN -> homelessness_NN
[string] homelessness
[tree] NN(homelessness)
[ud] "(homelessness<root> / homelessness)"
[fourlang] "(homelessness<root> / homelessness)"

NNS -> officers_NNS
[string] officers
[tree] NNS(officers)
[ud] "(officers<root> / officers)"
[fourlang] "(officers<root> / officers)"

NNP -> Borough_NNP
[string] Borough
[tree] NNP(Borough)
[ud] "(Borough<root> / Borough)"
[fourlang] "(Borough<root> / Borough)"

JJ -> underlying_JJ
[string] underlying
[tree] JJ(underlying)
[ud] "(underlying<root> / underlying)"
[fourlang] "(underlying<root> / underlying)"

NNS -> blocks_NNS
[string] blocks
[tree] NNS(blocks)
[ud] "(blocks<root> / blocks)"
[fourlang] "(blocks<root> / blocks)"

NN -> showing_NN
[string] showing
[tree] NN(showing)
[ud] "(showing<root> / showing)"
[fourlang] "(showing<root> / showing)"

NNS -> Attorneys_NNS
[string] Attorneys
[tree] NNS(Attorneys)
[ud] "(Attorneys<root> / Attorneys)"
[fourlang] "(Attorneys<root> / Attorneys)"

NN -> habit_NN
[string] habit
[tree] NN(habit)
[ud] "(habit<root> / habit)"
[fourlang] "(habit<root> / habit)"

RB -> essentially_RB
[string] essentially
[tree] RB(essentially)
[ud] "(essentially<root> / essentially)"
[fourlang] "(essentially<root> / essentially)"

NNP -> IllPERIOD_NNP
[string] IllPERIOD
[tree] NNP(IllPERIOD)
[ud] "(IllPERIOD<root> / IllPERIOD)"
[fourlang] "(IllPERIOD<root> / IllPERIOD)"

NNS -> innuendoes_NNS
[string] innuendoes
[tree] NNS(innuendoes)
[ud] "(innuendoes<root> / innuendoes)"
[fourlang] "(innuendoes<root> / innuendoes)"

VBG -> maintaining_VBG
[string] maintaining
[tree] VBG(maintaining)
[ud] "(maintaining<root> / maintaining)"
[fourlang] "(maintaining<root> / maintaining)"

NN -> Yesterday_NN
[string] Yesterday
[tree] NN(Yesterday)
[ud] "(Yesterday<root> / Yesterday)"
[fourlang] "(Yesterday<root> / Yesterday)"

NNS -> Programs_NNS
[string] Programs
[tree] NNS(Programs)
[ud] "(Programs<root> / Programs)"
[fourlang] "(Programs<root> / Programs)"

NN -> breed_NN
[string] breed
[tree] NN(breed)
[ud] "(breed<root> / breed)"
[fourlang] "(breed<root> / breed)"

JJ -> slack_JJ
[string] slack
[tree] JJ(slack)
[ud] "(slack<root> / slack)"
[fourlang] "(slack<root> / slack)"

NNP -> Acquisition_NNP
[string] Acquisition
[tree] NNP(Acquisition)
[ud] "(Acquisition<root> / Acquisition)"
[fourlang] "(Acquisition<root> / Acquisition)"

NN -> process_NN
[string] process
[tree] NN(process)
[ud] "(process<root> / process)"
[fourlang] "(process<root> / process)"

NNPS -> RATES_NNPS
[string] RATES
[tree] NNPS(RATES)
[ud] "(RATES<root> / RATES)"
[fourlang] "(RATES<root> / RATES)"

JJ -> petulant_JJ
[string] petulant
[tree] JJ(petulant)
[ud] "(petulant<root> / petulant)"
[fourlang] "(petulant<root> / petulant)"

JJ -> very_JJ
[string] very
[tree] JJ(very)
[ud] "(very<root> / very)"
[fourlang] "(very<root> / very)"

RB -> Some_RB
[string] Some
[tree] RB(Some)
[ud] "(Some<root> / Some)"
[fourlang] "(Some<root> / Some)"

NNS -> tactics_NNS
[string] tactics
[tree] NNS(tactics)
[ud] "(tactics<root> / tactics)"
[fourlang] "(tactics<root> / tactics)"

CD -> DIGITDIGITs_CD
[string] DIGITDIGITs
[tree] CD(DIGITDIGITs)
[ud] "(DIGITDIGITs<root> / DIGITDIGITs)"
[fourlang] "(DIGITDIGITs<root> / DIGITDIGITs)"

NNP -> Savin_NNP
[string] Savin
[tree] NNP(Savin)
[ud] "(Savin<root> / Savin)"
[fourlang] "(Savin<root> / Savin)"

VBN -> floated_VBN
[string] floated
[tree] VBN(floated)
[ud] "(floated<root> / floated)"
[fourlang] "(floated<root> / floated)"

NNS -> vacations_NNS
[string] vacations
[tree] NNS(vacations)
[ud] "(vacations<root> / vacations)"
[fourlang] "(vacations<root> / vacations)"

JJ -> currentHYPHENcarrying_JJ
[string] currentHYPHENcarrying
[tree] JJ(currentHYPHENcarrying)
[ud] "(currentHYPHENcarrying<root> / currentHYPHENcarrying)"
[fourlang] "(currentHYPHENcarrying<root> / currentHYPHENcarrying)"

NNP -> Korea_NNP
[string] Korea
[tree] NNP(Korea)
[ud] "(Korea<root> / Korea)"
[fourlang] "(Korea<root> / Korea)"

RB -> Just_RB
[string] Just
[tree] RB(Just)
[ud] "(Just<root> / Just)"
[fourlang] "(Just<root> / Just)"

NNP -> Imhoff_NNP
[string] Imhoff
[tree] NNP(Imhoff)
[ud] "(Imhoff<root> / Imhoff)"
[fourlang] "(Imhoff<root> / Imhoff)"

NNS -> declines_NNS
[string] declines
[tree] NNS(declines)
[ud] "(declines<root> / declines)"
[fourlang] "(declines<root> / declines)"

NNP -> NPERIODJ_NNP
[string] NPERIODJ
[tree] NNP(NPERIODJ)
[ud] "(NPERIODJ<root> / NPERIODJ)"
[fourlang] "(NPERIODJ<root> / NPERIODJ)"

NNP -> Bankruptcy_NNP
[string] Bankruptcy
[tree] NNP(Bankruptcy)
[ud] "(Bankruptcy<root> / Bankruptcy)"
[fourlang] "(Bankruptcy<root> / Bankruptcy)"

NN -> worker_NN
[string] worker
[tree] NN(worker)
[ud] "(worker<root> / worker)"
[fourlang] "(worker<root> / worker)"

NNP -> Have_NNP
[string] Have
[tree] NNP(Have)
[ud] "(Have<root> / Have)"
[fourlang] "(Have<root> / Have)"

NN -> production_NN
[string] production
[tree] NN(production)
[ud] "(production<root> / production)"
[fourlang] "(production<root> / production)"

NNP -> Viacom_NNP
[string] Viacom
[tree] NNP(Viacom)
[ud] "(Viacom<root> / Viacom)"
[fourlang] "(Viacom<root> / Viacom)"

NN -> reputation_NN
[string] reputation
[tree] NN(reputation)
[ud] "(reputation<root> / reputation)"
[fourlang] "(reputation<root> / reputation)"

JJ -> foldable_JJ
[string] foldable
[tree] JJ(foldable)
[ud] "(foldable<root> / foldable)"
[fourlang] "(foldable<root> / foldable)"

VBZ -> protects_VBZ
[string] protects
[tree] VBZ(protects)
[ud] "(protects<root> / protects)"
[fourlang] "(protects<root> / protects)"

NNP -> Fannie_NNP
[string] Fannie
[tree] NNP(Fannie)
[ud] "(Fannie<root> / Fannie)"
[fourlang] "(Fannie<root> / Fannie)"

VBD -> worked_VBD
[string] worked
[tree] VBD(worked)
[ud] "(worked<root> / worked)"
[fourlang] "(worked<root> / worked)"

NN -> shipyard_NN
[string] shipyard
[tree] NN(shipyard)
[ud] "(shipyard<root> / shipyard)"
[fourlang] "(shipyard<root> / shipyard)"

NNS -> relations_NNS
[string] relations
[tree] NNS(relations)
[ud] "(relations<root> / relations)"
[fourlang] "(relations<root> / relations)"

NN -> complaint_NN
[string] complaint
[tree] NN(complaint)
[ud] "(complaint<root> / complaint)"
[fourlang] "(complaint<root> / complaint)"

RP -> over_RP
[string] over
[tree] RP(over)
[ud] "(over<root> / over)"
[fourlang] "(over<root> / over)"

VBD -> had_VBD
[string] had
[tree] VBD(had)
[ud] "(had<root> / had)"
[fourlang] "(had<root> / had)"

JJ -> traditional_JJ
[string] traditional
[tree] JJ(traditional)
[ud] "(traditional<root> / traditional)"
[fourlang] "(traditional<root> / traditional)"

NNP -> Fang_NNP
[string] Fang
[tree] NNP(Fang)
[ud] "(Fang<root> / Fang)"
[fourlang] "(Fang<root> / Fang)"

MD -> wo_MD
[string] wo
[tree] MD(wo)
[ud] "(wo<root> / wo)"
[fourlang] "(wo<root> / wo)"

NN -> case_NN
[string] case
[tree] NN(case)
[ud] "(case<root> / case)"
[fourlang] "(case<root> / case)"

JJS -> Most_JJS
[string] Most
[tree] JJS(Most)
[ud] "(Most<root> / Most)"
[fourlang] "(Most<root> / Most)"

NNP -> Akio_NNP
[string] Akio
[tree] NNP(Akio)
[ud] "(Akio<root> / Akio)"
[fourlang] "(Akio<root> / Akio)"

CC -> and_CC
[string] and
[tree] CC(and)
[ud] "(and<root> / and)"
[fourlang] "(and<root> / and)"

NNS -> duties_NNS
[string] duties
[tree] NNS(duties)
[ud] "(duties<root> / duties)"
[fourlang] "(duties<root> / duties)"

NN -> performance_NN
[string] performance
[tree] NN(performance)
[ud] "(performance<root> / performance)"
[fourlang] "(performance<root> / performance)"

VBD -> made_VBD
[string] made
[tree] VBD(made)
[ud] "(made<root> / made)"
[fourlang] "(made<root> / made)"

NNS -> witnesses_NNS
[string] witnesses
[tree] NNS(witnesses)
[ud] "(witnesses<root> / witnesses)"
[fourlang] "(witnesses<root> / witnesses)"

JJ -> dollarHYPHENdenominated_JJ
[string] dollarHYPHENdenominated
[tree] JJ(dollarHYPHENdenominated)
[ud] "(dollarHYPHENdenominated<root> / dollarHYPHENdenominated)"
[fourlang] "(dollarHYPHENdenominated<root> / dollarHYPHENdenominated)"

NN -> belt_NN
[string] belt
[tree] NN(belt)
[ud] "(belt<root> / belt)"
[fourlang] "(belt<root> / belt)"

NNP -> Energy_NNP
[string] Energy
[tree] NNP(Energy)
[ud] "(Energy<root> / Energy)"
[fourlang] "(Energy<root> / Energy)"

DT -> half_DT
[string] half
[tree] DT(half)
[ud] "(half<root> / half)"
[fourlang] "(half<root> / half)"

NN -> size_NN
[string] size
[tree] NN(size)
[ud] "(size<root> / size)"
[fourlang] "(size<root> / size)"

JJ -> hardHYPHENcharging_JJ
[string] hardHYPHENcharging
[tree] JJ(hardHYPHENcharging)
[ud] "(hardHYPHENcharging<root> / hardHYPHENcharging)"
[fourlang] "(hardHYPHENcharging<root> / hardHYPHENcharging)"

NN -> dairy_NN
[string] dairy
[tree] NN(dairy)
[ud] "(dairy<root> / dairy)"
[fourlang] "(dairy<root> / dairy)"

NNS -> dealers_NNS
[string] dealers
[tree] NNS(dealers)
[ud] "(dealers<root> / dealers)"
[fourlang] "(dealers<root> / dealers)"

NN -> Legislation_NN
[string] Legislation
[tree] NN(Legislation)
[ud] "(Legislation<root> / Legislation)"
[fourlang] "(Legislation<root> / Legislation)"

NNP -> Joseph_NNP
[string] Joseph
[tree] NNP(Joseph)
[ud] "(Joseph<root> / Joseph)"
[fourlang] "(Joseph<root> / Joseph)"

NNS -> expectations_NNS
[string] expectations
[tree] NNS(expectations)
[ud] "(expectations<root> / expectations)"
[fourlang] "(expectations<root> / expectations)"

NN -> right_NN
[string] right
[tree] NN(right)
[ud] "(right<root> / right)"
[fourlang] "(right<root> / right)"

JJ -> governmentHYPHENfunded_JJ
[string] governmentHYPHENfunded
[tree] JJ(governmentHYPHENfunded)
[ud] "(governmentHYPHENfunded<root> / governmentHYPHENfunded)"
[fourlang] "(governmentHYPHENfunded<root> / governmentHYPHENfunded)"

NNS -> purchasers_NNS
[string] purchasers
[tree] NNS(purchasers)
[ud] "(purchasers<root> / purchasers)"
[fourlang] "(purchasers<root> / purchasers)"

NN -> boom_NN
[string] boom
[tree] NN(boom)
[ud] "(boom<root> / boom)"
[fourlang] "(boom<root> / boom)"

NNP -> GMAC_NNP
[string] GMAC
[tree] NNP(GMAC)
[ud] "(GMAC<root> / GMAC)"
[fourlang] "(GMAC<root> / GMAC)"

NN -> len_NN
[string] len
[tree] NN(len)
[ud] "(len<root> / len)"
[fourlang] "(len<root> / len)"

RB -> badly_RB
[string] badly
[tree] RB(badly)
[ud] "(badly<root> / badly)"
[fourlang] "(badly<root> / badly)"

NN -> discrimination_NN
[string] discrimination
[tree] NN(discrimination)
[ud] "(discrimination<root> / discrimination)"
[fourlang] "(discrimination<root> / discrimination)"

POS -> SQ_POS
[string] SQ
[tree] POS(SQ)
[ud] "(SQ<root> / SQ)"
[fourlang] "(SQ<root> / SQ)"

NNS -> accounts_NNS
[string] accounts
[tree] NNS(accounts)
[ud] "(accounts<root> / accounts)"
[fourlang] "(accounts<root> / accounts)"

NN -> result_NN
[string] result
[tree] NN(result)
[ud] "(result<root> / result)"
[fourlang] "(result<root> / result)"

JJ -> separate_JJ
[string] separate
[tree] JJ(separate)
[ud] "(separate<root> / separate)"
[fourlang] "(separate<root> / separate)"

NNP -> Exchange_NNP
[string] Exchange
[tree] NNP(Exchange)
[ud] "(Exchange<root> / Exchange)"
[fourlang] "(Exchange<root> / Exchange)"

VB -> regulate_VB
[string] regulate
[tree] VB(regulate)
[ud] "(regulate<root> / regulate)"
[fourlang] "(regulate<root> / regulate)"

JJ -> preHYPHENapproved_JJ
[string] preHYPHENapproved
[tree] JJ(preHYPHENapproved)
[ud] "(preHYPHENapproved<root> / preHYPHENapproved)"
[fourlang] "(preHYPHENapproved<root> / preHYPHENapproved)"

JJR -> younger_JJR
[string] younger
[tree] JJR(younger)
[ud] "(younger<root> / younger)"
[fourlang] "(younger<root> / younger)"

NN -> unavailability_NN
[string] unavailability
[tree] NN(unavailability)
[ud] "(unavailability<root> / unavailability)"
[fourlang] "(unavailability<root> / unavailability)"

JJ -> equityHYPHENpurchase_JJ
[string] equityHYPHENpurchase
[tree] JJ(equityHYPHENpurchase)
[ud] "(equityHYPHENpurchase<root> / equityHYPHENpurchase)"
[fourlang] "(equityHYPHENpurchase<root> / equityHYPHENpurchase)"

IN -> against_IN
[string] against
[tree] IN(against)
[ud] "(against<root> / against)"
[fourlang] "(against<root> / against)"

JJ -> recipient_JJ
[string] recipient
[tree] JJ(recipient)
[ud] "(recipient<root> / recipient)"
[fourlang] "(recipient<root> / recipient)"

NNP -> BPERIODAPERIODT_NNP
[string] BPERIODAPERIODT
[tree] NNP(BPERIODAPERIODT)
[ud] "(BPERIODAPERIODT<root> / BPERIODAPERIODT)"
[fourlang] "(BPERIODAPERIODT<root> / BPERIODAPERIODT)"

NN -> slide_NN
[string] slide
[tree] NN(slide)
[ud] "(slide<root> / slide)"
[fourlang] "(slide<root> / slide)"

NN -> face_NN
[string] face
[tree] NN(face)
[ud] "(face<root> / face)"
[fourlang] "(face<root> / face)"

NN -> charge_NN
[string] charge
[tree] NN(charge)
[ud] "(charge<root> / charge)"
[fourlang] "(charge<root> / charge)"

NNS -> Policies_NNS
[string] Policies
[tree] NNS(Policies)
[ud] "(Policies<root> / Policies)"
[fourlang] "(Policies<root> / Policies)"

JJ -> major_JJ
[string] major
[tree] JJ(major)
[ud] "(major<root> / major)"
[fourlang] "(major<root> / major)"

NNP -> Commission_NNP
[string] Commission
[tree] NNP(Commission)
[ud] "(Commission<root> / Commission)"
[fourlang] "(Commission<root> / Commission)"

CD -> SeptPERIODDIGITDIGIT_CD
[string] SeptPERIODDIGITDIGIT
[tree] CD(SeptPERIODDIGITDIGIT)
[ud] "(SeptPERIODDIGITDIGIT<root> / SeptPERIODDIGITDIGIT)"
[fourlang] "(SeptPERIODDIGITDIGIT<root> / SeptPERIODDIGITDIGIT)"

NN -> Grain_NN
[string] Grain
[tree] NN(Grain)
[ud] "(Grain<root> / Grain)"
[fourlang] "(Grain<root> / Grain)"

NN -> task_NN
[string] task
[tree] NN(task)
[ud] "(task<root> / task)"
[fourlang] "(task<root> / task)"

VBN -> filed_VBN
[string] filed
[tree] VBN(filed)
[ud] "(filed<root> / filed)"
[fourlang] "(filed<root> / filed)"

NNS -> packages_NNS
[string] packages
[tree] NNS(packages)
[ud] "(packages<root> / packages)"
[fourlang] "(packages<root> / packages)"

NNP -> Cluff_NNP
[string] Cluff
[tree] NNP(Cluff)
[ud] "(Cluff<root> / Cluff)"
[fourlang] "(Cluff<root> / Cluff)"

NN -> deficit_NN
[string] deficit
[tree] NN(deficit)
[ud] "(deficit<root> / deficit)"
[fourlang] "(deficit<root> / deficit)"

NN -> backdrop_NN
[string] backdrop
[tree] NN(backdrop)
[ud] "(backdrop<root> / backdrop)"
[fourlang] "(backdrop<root> / backdrop)"

JJ -> right_JJ
[string] right
[tree] JJ(right)
[ud] "(right<root> / right)"
[fourlang] "(right<root> / right)"

NN -> freeHYPHENenterprise_NN
[string] freeHYPHENenterprise
[tree] NN(freeHYPHENenterprise)
[ud] "(freeHYPHENenterprise<root> / freeHYPHENenterprise)"
[fourlang] "(freeHYPHENenterprise<root> / freeHYPHENenterprise)"

NNP -> Susan_NNP
[string] Susan
[tree] NNP(Susan)
[ud] "(Susan<root> / Susan)"
[fourlang] "(Susan<root> / Susan)"

NNS -> commodities_NNS
[string] commodities
[tree] NNS(commodities)
[ud] "(commodities<root> / commodities)"
[fourlang] "(commodities<root> / commodities)"

NN -> history_NN
[string] history
[tree] NN(history)
[ud] "(history<root> / history)"
[fourlang] "(history<root> / history)"

NNS -> acts_NNS
[string] acts
[tree] NNS(acts)
[ud] "(acts<root> / acts)"
[fourlang] "(acts<root> / acts)"

NNP -> Industrial_NNP
[string] Industrial
[tree] NNP(Industrial)
[ud] "(Industrial<root> / Industrial)"
[fourlang] "(Industrial<root> / Industrial)"

NNP -> NPERIODVPERIOD_NNP
[string] NPERIODVPERIOD
[tree] NNP(NPERIODVPERIOD)
[ud] "(NPERIODVPERIOD<root> / NPERIODVPERIOD)"
[fourlang] "(NPERIODVPERIOD<root> / NPERIODVPERIOD)"

NN -> ability_NN
[string] ability
[tree] NN(ability)
[ud] "(ability<root> / ability)"
[fourlang] "(ability<root> / ability)"

NNP -> Valhi_NNP
[string] Valhi
[tree] NNP(Valhi)
[ud] "(Valhi<root> / Valhi)"
[fourlang] "(Valhi<root> / Valhi)"

NNP -> Pratt_NNP
[string] Pratt
[tree] NNP(Pratt)
[ud] "(Pratt<root> / Pratt)"
[fourlang] "(Pratt<root> / Pratt)"

NNS -> EURODOLLARS_NNS
[string] EURODOLLARS
[tree] NNS(EURODOLLARS)
[ud] "(EURODOLLARS<root> / EURODOLLARS)"
[fourlang] "(EURODOLLARS<root> / EURODOLLARS)"

NNS -> wafers_NNS
[string] wafers
[tree] NNS(wafers)
[ud] "(wafers<root> / wafers)"
[fourlang] "(wafers<root> / wafers)"

NNP -> Gottlieb_NNP
[string] Gottlieb
[tree] NNP(Gottlieb)
[ud] "(Gottlieb<root> / Gottlieb)"
[fourlang] "(Gottlieb<root> / Gottlieb)"

NNP -> Georgetown_NNP
[string] Georgetown
[tree] NNP(Georgetown)
[ud] "(Georgetown<root> / Georgetown)"
[fourlang] "(Georgetown<root> / Georgetown)"

PUNCT -> QUE_PUNCT
[string] QUE
[tree] PUNCT(QUE)
[ud] "(QUE<root> / QUE)"
[fourlang] "(QUE<root> / QUE)"

NNP -> Safety_NNP
[string] Safety
[tree] NNP(Safety)
[ud] "(Safety<root> / Safety)"
[fourlang] "(Safety<root> / Safety)"

NN -> duo_NN
[string] duo
[tree] NN(duo)
[ud] "(duo<root> / duo)"
[fourlang] "(duo<root> / duo)"

VBG -> underperforming_VBG
[string] underperforming
[tree] VBG(underperforming)
[ud] "(underperforming<root> / underperforming)"
[fourlang] "(underperforming<root> / underperforming)"

NNP -> Beige_NNP
[string] Beige
[tree] NNP(Beige)
[ud] "(Beige<root> / Beige)"
[fourlang] "(Beige<root> / Beige)"

NNS -> children_NNS
[string] children
[tree] NNS(children)
[ud] "(children<root> / children)"
[fourlang] "(children<root> / children)"

NN -> procurement_NN
[string] procurement
[tree] NN(procurement)
[ud] "(procurement<root> / procurement)"
[fourlang] "(procurement<root> / procurement)"

NNP -> Alfred_NNP
[string] Alfred
[tree] NNP(Alfred)
[ud] "(Alfred<root> / Alfred)"
[fourlang] "(Alfred<root> / Alfred)"

JJ -> technical_JJ
[string] technical
[tree] JJ(technical)
[ud] "(technical<root> / technical)"
[fourlang] "(technical<root> / technical)"

PRP -> It_PRP
[string] It
[tree] PRP(It)
[ud] "(It<root> / It)"
[fourlang] "(It<root> / It)"

JJ -> offHYPHENyear_JJ
[string] offHYPHENyear
[tree] JJ(offHYPHENyear)
[ud] "(offHYPHENyear<root> / offHYPHENyear)"
[fourlang] "(offHYPHENyear<root> / offHYPHENyear)"

VBN -> sent_VBN
[string] sent
[tree] VBN(sent)
[ud] "(sent<root> / sent)"
[fourlang] "(sent<root> / sent)"

NN -> damage_NN
[string] damage
[tree] NN(damage)
[ud] "(damage<root> / damage)"
[fourlang] "(damage<root> / damage)"

JJ -> stark_JJ
[string] stark
[tree] JJ(stark)
[ud] "(stark<root> / stark)"
[fourlang] "(stark<root> / stark)"

NN -> court_NN
[string] court
[tree] NN(court)
[ud] "(court<root> / court)"
[fourlang] "(court<root> / court)"

NN -> marketplace_NN
[string] marketplace
[tree] NN(marketplace)
[ud] "(marketplace<root> / marketplace)"
[fourlang] "(marketplace<root> / marketplace)"

NN -> career_NN
[string] career
[tree] NN(career)
[ud] "(career<root> / career)"
[fourlang] "(career<root> / career)"

NNP -> Electric_NNP
[string] Electric
[tree] NNP(Electric)
[ud] "(Electric<root> / Electric)"
[fourlang] "(Electric<root> / Electric)"

NN -> pension_NN
[string] pension
[tree] NN(pension)
[ud] "(pension<root> / pension)"
[fourlang] "(pension<root> / pension)"

JJ -> recent_JJ
[string] recent
[tree] JJ(recent)
[ud] "(recent<root> / recent)"
[fourlang] "(recent<root> / recent)"

NN -> power_NN
[string] power
[tree] NN(power)
[ud] "(power<root> / power)"
[fourlang] "(power<root> / power)"

JJ -> slippery_JJ
[string] slippery
[tree] JJ(slippery)
[ud] "(slippery<root> / slippery)"
[fourlang] "(slippery<root> / slippery)"

NN -> specialist_NN
[string] specialist
[tree] NN(specialist)
[ud] "(specialist<root> / specialist)"
[fourlang] "(specialist<root> / specialist)"

NN -> bank_NN
[string] bank
[tree] NN(bank)
[ud] "(bank<root> / bank)"
[fourlang] "(bank<root> / bank)"

NNP -> Boca_NNP
[string] Boca
[tree] NNP(Boca)
[ud] "(Boca<root> / Boca)"
[fourlang] "(Boca<root> / Boca)"

JJ -> diverse_JJ
[string] diverse
[tree] JJ(diverse)
[ud] "(diverse<root> / diverse)"
[fourlang] "(diverse<root> / diverse)"

NNP -> Russell_NNP
[string] Russell
[tree] NNP(Russell)
[ud] "(Russell<root> / Russell)"
[fourlang] "(Russell<root> / Russell)"

VB -> make_VB
[string] make
[tree] VB(make)
[ud] "(make<root> / make)"
[fourlang] "(make<root> / make)"

JJ -> rigid_JJ
[string] rigid
[tree] JJ(rigid)
[ud] "(rigid<root> / rigid)"
[fourlang] "(rigid<root> / rigid)"

JJ -> significant_JJ
[string] significant
[tree] JJ(significant)
[ud] "(significant<root> / significant)"
[fourlang] "(significant<root> / significant)"

NN -> renewal_NN
[string] renewal
[tree] NN(renewal)
[ud] "(renewal<root> / renewal)"
[fourlang] "(renewal<root> / renewal)"

NNP -> Carolina_NNP
[string] Carolina
[tree] NNP(Carolina)
[ud] "(Carolina<root> / Carolina)"
[fourlang] "(Carolina<root> / Carolina)"

JJ -> rear_JJ
[string] rear
[tree] JJ(rear)
[ud] "(rear<root> / rear)"
[fourlang] "(rear<root> / rear)"

JJ -> excess_JJ
[string] excess
[tree] JJ(excess)
[ud] "(excess<root> / excess)"
[fourlang] "(excess<root> / excess)"

NNP -> Motor_NNP
[string] Motor
[tree] NNP(Motor)
[ud] "(Motor<root> / Motor)"
[fourlang] "(Motor<root> / Motor)"

RB -> fully_RB
[string] fully
[tree] RB(fully)
[ud] "(fully<root> / fully)"
[fourlang] "(fully<root> / fully)"

NNS -> scores_NNS
[string] scores
[tree] NNS(scores)
[ud] "(scores<root> / scores)"
[fourlang] "(scores<root> / scores)"

NN -> sign_NN
[string] sign
[tree] NN(sign)
[ud] "(sign<root> / sign)"
[fourlang] "(sign<root> / sign)"

NNP -> Lucille_NNP
[string] Lucille
[tree] NNP(Lucille)
[ud] "(Lucille<root> / Lucille)"
[fourlang] "(Lucille<root> / Lucille)"

JJ -> Basic_JJ
[string] Basic
[tree] JJ(Basic)
[ud] "(Basic<root> / Basic)"
[fourlang] "(Basic<root> / Basic)"

JJ -> firstHYPHENrate_JJ
[string] firstHYPHENrate
[tree] JJ(firstHYPHENrate)
[ud] "(firstHYPHENrate<root> / firstHYPHENrate)"
[fourlang] "(firstHYPHENrate<root> / firstHYPHENrate)"

NNP -> Henderson_NNP
[string] Henderson
[tree] NNP(Henderson)
[ud] "(Henderson<root> / Henderson)"
[fourlang] "(Henderson<root> / Henderson)"

JJ -> whiteHYPHENcollar_JJ
[string] whiteHYPHENcollar
[tree] JJ(whiteHYPHENcollar)
[ud] "(whiteHYPHENcollar<root> / whiteHYPHENcollar)"
[fourlang] "(whiteHYPHENcollar<root> / whiteHYPHENcollar)"

JJ -> local_JJ
[string] local
[tree] JJ(local)
[ud] "(local<root> / local)"
[fourlang] "(local<root> / local)"

NNP -> GatesHYPHENWarren_NNP
[string] GatesHYPHENWarren
[tree] NNP(GatesHYPHENWarren)
[ud] "(GatesHYPHENWarren<root> / GatesHYPHENWarren)"
[fourlang] "(GatesHYPHENWarren<root> / GatesHYPHENWarren)"

JJ -> tasty_JJ
[string] tasty
[tree] JJ(tasty)
[ud] "(tasty<root> / tasty)"
[fourlang] "(tasty<root> / tasty)"

JJ -> public_JJ
[string] public
[tree] JJ(public)
[ud] "(public<root> / public)"
[fourlang] "(public<root> / public)"

VBZ -> uses_VBZ
[string] uses
[tree] VBZ(uses)
[ud] "(uses<root> / uses)"
[fourlang] "(uses<root> / uses)"

JJ -> former_JJ
[string] former
[tree] JJ(former)
[ud] "(former<root> / former)"
[fourlang] "(former<root> / former)"

NN -> amount_NN
[string] amount
[tree] NN(amount)
[ud] "(amount<root> / amount)"
[fourlang] "(amount<root> / amount)"

VBG -> coming_VBG
[string] coming
[tree] VBG(coming)
[ud] "(coming<root> / coming)"
[fourlang] "(coming<root> / coming)"

VBG -> sounding_VBG
[string] sounding
[tree] VBG(sounding)
[ud] "(sounding<root> / sounding)"
[fourlang] "(sounding<root> / sounding)"

NNS -> hospitals_NNS
[string] hospitals
[tree] NNS(hospitals)
[ud] "(hospitals<root> / hospitals)"
[fourlang] "(hospitals<root> / hospitals)"

NN -> lot_NN
[string] lot
[tree] NN(lot)
[ud] "(lot<root> / lot)"
[fourlang] "(lot<root> / lot)"

VBN -> preferred_VBN
[string] preferred
[tree] VBN(preferred)
[ud] "(preferred<root> / preferred)"
[fourlang] "(preferred<root> / preferred)"

NN -> cash_NN
[string] cash
[tree] NN(cash)
[ud] "(cash<root> / cash)"
[fourlang] "(cash<root> / cash)"

NN -> mother_NN
[string] mother
[tree] NN(mother)
[ud] "(mother<root> / mother)"
[fourlang] "(mother<root> / mother)"

JJ -> composite_JJ
[string] composite
[tree] JJ(composite)
[ud] "(composite<root> / composite)"
[fourlang] "(composite<root> / composite)"

NNP -> Nylev_NNP
[string] Nylev
[tree] NNP(Nylev)
[ud] "(Nylev<root> / Nylev)"
[fourlang] "(Nylev<root> / Nylev)"

NNP -> Computer_NNP
[string] Computer
[tree] NNP(Computer)
[ud] "(Computer<root> / Computer)"
[fourlang] "(Computer<root> / Computer)"

NNP -> Village_NNP
[string] Village
[tree] NNP(Village)
[ud] "(Village<root> / Village)"
[fourlang] "(Village<root> / Village)"

NN -> ruling_NN
[string] ruling
[tree] NN(ruling)
[ud] "(ruling<root> / ruling)"
[fourlang] "(ruling<root> / ruling)"

NN -> space_NN
[string] space
[tree] NN(space)
[ud] "(space<root> / space)"
[fourlang] "(space<root> / space)"

NNS -> roofs_NNS
[string] roofs
[tree] NNS(roofs)
[ud] "(roofs<root> / roofs)"
[fourlang] "(roofs<root> / roofs)"

JJ -> marketHYPHENbased_JJ
[string] marketHYPHENbased
[tree] JJ(marketHYPHENbased)
[ud] "(marketHYPHENbased<root> / marketHYPHENbased)"
[fourlang] "(marketHYPHENbased<root> / marketHYPHENbased)"

NNP -> ConnPERIOD_NNP
[string] ConnPERIOD
[tree] NNP(ConnPERIOD)
[ud] "(ConnPERIOD<root> / ConnPERIOD)"
[fourlang] "(ConnPERIOD<root> / ConnPERIOD)"

VBZ -> follows_VBZ
[string] follows
[tree] VBZ(follows)
[ud] "(follows<root> / follows)"
[fourlang] "(follows<root> / follows)"

JJ -> white_JJ
[string] white
[tree] JJ(white)
[ud] "(white<root> / white)"
[fourlang] "(white<root> / white)"

VBZ -> eliminates_VBZ
[string] eliminates
[tree] VBZ(eliminates)
[ud] "(eliminates<root> / eliminates)"
[fourlang] "(eliminates<root> / eliminates)"

NN -> load_NN
[string] load
[tree] NN(load)
[ud] "(load<root> / load)"
[fourlang] "(load<root> / load)"

NN -> asbestos_NN
[string] asbestos
[tree] NN(asbestos)
[ud] "(asbestos<root> / asbestos)"
[fourlang] "(asbestos<root> / asbestos)"

VBZ -> awards_VBZ
[string] awards
[tree] VBZ(awards)
[ud] "(awards<root> / awards)"
[fourlang] "(awards<root> / awards)"

NN -> drop_NN
[string] drop
[tree] NN(drop)
[ud] "(drop<root> / drop)"
[fourlang] "(drop<root> / drop)"

JJ -> civil_JJ
[string] civil
[tree] JJ(civil)
[ud] "(civil<root> / civil)"
[fourlang] "(civil<root> / civil)"

NN -> Spending_NN
[string] Spending
[tree] NN(Spending)
[ud] "(Spending<root> / Spending)"
[fourlang] "(Spending<root> / Spending)"

NNP -> Co_NNP
[string] Co
[tree] NNP(Co)
[ud] "(Co<root> / Co)"
[fourlang] "(Co<root> / Co)"

NNS -> objectives_NNS
[string] objectives
[tree] NNS(objectives)
[ud] "(objectives<root> / objectives)"
[fourlang] "(objectives<root> / objectives)"

NNS -> hands_NNS
[string] hands
[tree] NNS(hands)
[ud] "(hands<root> / hands)"
[fourlang] "(hands<root> / hands)"

NN -> light_NN
[string] light
[tree] NN(light)
[ud] "(light<root> / light)"
[fourlang] "(light<root> / light)"

NN -> everyone_NN
[string] everyone
[tree] NN(everyone)
[ud] "(everyone<root> / everyone)"
[fourlang] "(everyone<root> / everyone)"

NNP -> Ellis_NNP
[string] Ellis
[tree] NNP(Ellis)
[ud] "(Ellis<root> / Ellis)"
[fourlang] "(Ellis<root> / Ellis)"

VBG -> regulating_VBG
[string] regulating
[tree] VBG(regulating)
[ud] "(regulating<root> / regulating)"
[fourlang] "(regulating<root> / regulating)"

NN -> type_NN
[string] type
[tree] NN(type)
[ud] "(type<root> / type)"
[fourlang] "(type<root> / type)"

NNP -> CIA_NNP
[string] CIA
[tree] NNP(CIA)
[ud] "(CIA<root> / CIA)"
[fourlang] "(CIA<root> / CIA)"

NN -> editorial_NN
[string] editorial
[tree] NN(editorial)
[ud] "(editorial<root> / editorial)"
[fourlang] "(editorial<root> / editorial)"

RB -> virtually_RB
[string] virtually
[tree] RB(virtually)
[ud] "(virtually<root> / virtually)"
[fourlang] "(virtually<root> / virtually)"

NN -> one_NN_W
[string] one
[tree] NN(one)
[ud] "(one<root> / one)"
[fourlang] "(one<root> / one)"

NN -> variety_NN
[string] variety
[tree] NN(variety)
[ud] "(variety<root> / variety)"
[fourlang] "(variety<root> / variety)"

NNS -> sponsors_NNS
[string] sponsors
[tree] NNS(sponsors)
[ud] "(sponsors<root> / sponsors)"
[fourlang] "(sponsors<root> / sponsors)"

NN -> note_NN
[string] note
[tree] NN(note)
[ud] "(note<root> / note)"
[fourlang] "(note<root> / note)"

NNP -> Takashima_NNP
[string] Takashima
[tree] NNP(Takashima)
[ud] "(Takashima<root> / Takashima)"
[fourlang] "(Takashima<root> / Takashima)"

NN -> Syndicate_NN
[string] Syndicate
[tree] NN(Syndicate)
[ud] "(Syndicate<root> / Syndicate)"
[fourlang] "(Syndicate<root> / Syndicate)"

NNP -> LIBOR_NNP
[string] LIBOR
[tree] NNP(LIBOR)
[ud] "(LIBOR<root> / LIBOR)"
[fourlang] "(LIBOR<root> / LIBOR)"

NNP -> Fracturing_NNP
[string] Fracturing
[tree] NNP(Fracturing)
[ud] "(Fracturing<root> / Fracturing)"
[fourlang] "(Fracturing<root> / Fracturing)"

NN -> platinum_NN
[string] platinum
[tree] NN(platinum)
[ud] "(platinum<root> / platinum)"
[fourlang] "(platinum<root> / platinum)"

NNS -> traders_NNS
[string] traders
[tree] NNS(traders)
[ud] "(traders<root> / traders)"
[fourlang] "(traders<root> / traders)"

NN -> diamond_NN
[string] diamond
[tree] NN(diamond)
[ud] "(diamond<root> / diamond)"
[fourlang] "(diamond<root> / diamond)"

NN -> EXCHANGE_NN
[string] EXCHANGE
[tree] NN(EXCHANGE)
[ud] "(EXCHANGE<root> / EXCHANGE)"
[fourlang] "(EXCHANGE<root> / EXCHANGE)"

NNP -> Madison_NNP
[string] Madison
[tree] NNP(Madison)
[ud] "(Madison<root> / Madison)"
[fourlang] "(Madison<root> / Madison)"

NNP -> Giuliani_NNP
[string] Giuliani
[tree] NNP(Giuliani)
[ud] "(Giuliani<root> / Giuliani)"
[fourlang] "(Giuliani<root> / Giuliani)"

NNP -> Stevens_NNP
[string] Stevens
[tree] NNP(Stevens)
[ud] "(Stevens<root> / Stevens)"
[fourlang] "(Stevens<root> / Stevens)"

JJ -> central_JJ
[string] central
[tree] JJ(central)
[ud] "(central<root> / central)"
[fourlang] "(central<root> / central)"

JJ -> military_JJ
[string] military
[tree] JJ(military)
[ud] "(military<root> / military)"
[fourlang] "(military<root> / military)"

NNP -> Jay_NNP
[string] Jay
[tree] NNP(Jay)
[ud] "(Jay<root> / Jay)"
[fourlang] "(Jay<root> / Jay)"

NN -> WAR_NN
[string] WAR
[tree] NN(WAR)
[ud] "(WAR<root> / WAR)"
[fourlang] "(WAR<root> / WAR)"

NN -> F_NN
[string] F
[tree] NN(F)
[ud] "(F<root> / F)"
[fourlang] "(F<root> / F)"

NNS -> subsidiaries_NNS
[string] subsidiaries
[tree] NNS(subsidiaries)
[ud] "(subsidiaries<root> / subsidiaries)"
[fourlang] "(subsidiaries<root> / subsidiaries)"

NN -> pipe_NN
[string] pipe
[tree] NN(pipe)
[ud] "(pipe<root> / pipe)"
[fourlang] "(pipe<root> / pipe)"

NNS -> violations_NNS
[string] violations
[tree] NNS(violations)
[ud] "(violations<root> / violations)"
[fourlang] "(violations<root> / violations)"

JJ -> simultaneous_JJ
[string] simultaneous
[tree] JJ(simultaneous)
[ud] "(simultaneous<root> / simultaneous)"
[fourlang] "(simultaneous<root> / simultaneous)"

NN -> businessman_NN
[string] businessman
[tree] NN(businessman)
[ud] "(businessman<root> / businessman)"
[fourlang] "(businessman<root> / businessman)"

NNP -> San_NNP
[string] San
[tree] NNP(San)
[ud] "(San<root> / San)"
[fourlang] "(San<root> / San)"

NNP -> Chamber_NNP
[string] Chamber
[tree] NNP(Chamber)
[ud] "(Chamber<root> / Chamber)"
[fourlang] "(Chamber<root> / Chamber)"

NN -> motion_NN
[string] motion
[tree] NN(motion)
[ud] "(motion<root> / motion)"
[fourlang] "(motion<root> / motion)"

NNP -> Lake_NNP
[string] Lake
[tree] NNP(Lake)
[ud] "(Lake<root> / Lake)"
[fourlang] "(Lake<root> / Lake)"

NNP -> Heatherington_NNP
[string] Heatherington
[tree] NNP(Heatherington)
[ud] "(Heatherington<root> / Heatherington)"
[fourlang] "(Heatherington<root> / Heatherington)"

NN -> clothing_NN
[string] clothing
[tree] NN(clothing)
[ud] "(clothing<root> / clothing)"
[fourlang] "(clothing<root> / clothing)"

NNS -> dozens_NNS
[string] dozens
[tree] NNS(dozens)
[ud] "(dozens<root> / dozens)"
[fourlang] "(dozens<root> / dozens)"

_NONE_ -> ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT__NONE_
[string] ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT
[tree] _NONE_(ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT)
[ud] "(ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT<root> / ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT)"
[fourlang] "(ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT<root> / ASTERISKTASTERISKHYPHENDIGITDIGITDIGIT)"

VBN -> listed_VBN
[string] listed
[tree] VBN(listed)
[ud] "(listed<root> / listed)"
[fourlang] "(listed<root> / listed)"

VBD -> hit_VBD
[string] hit
[tree] VBD(hit)
[ud] "(hit<root> / hit)"
[fourlang] "(hit<root> / hit)"

JJ -> industrial_JJ
[string] industrial
[tree] JJ(industrial)
[ud] "(industrial<root> / industrial)"
[fourlang] "(industrial<root> / industrial)"

NNP -> City_NNP
[string] City
[tree] NNP(City)
[ud] "(City<root> / City)"
[fourlang] "(City<root> / City)"

DT -> An_DT
[string] An
[tree] DT(An)
[ud] "(An<root> / An)"
[fourlang] "(An<root> / An)"

VBN -> stated_VBN
[string] stated
[tree] VBN(stated)
[ud] "(stated<root> / stated)"
[fourlang] "(stated<root> / stated)"

VBN -> fizzled_VBN
[string] fizzled
[tree] VBN(fizzled)
[ud] "(fizzled<root> / fizzled)"
[fourlang] "(fizzled<root> / fizzled)"

NN -> penetration_NN
[string] penetration
[tree] NN(penetration)
[ud] "(penetration<root> / penetration)"
[fourlang] "(penetration<root> / penetration)"

NNP -> Zealand_NNP
[string] Zealand
[tree] NNP(Zealand)
[ud] "(Zealand<root> / Zealand)"
[fourlang] "(Zealand<root> / Zealand)"

JJ -> unfair_JJ
[string] unfair
[tree] JJ(unfair)
[ud] "(unfair<root> / unfair)"
[fourlang] "(unfair<root> / unfair)"

RB -> often_RB
[string] often
[tree] RB(often)
[ud] "(often<root> / often)"
[fourlang] "(often<root> / often)"

NNS -> tissues_NNS
[string] tissues
[tree] NNS(tissues)
[ud] "(tissues<root> / tissues)"
[fourlang] "(tissues<root> / tissues)"

NN -> proteinHYPHENDIGIT_NN
[string] proteinHYPHENDIGIT
[tree] NN(proteinHYPHENDIGIT)
[ud] "(proteinHYPHENDIGIT<root> / proteinHYPHENDIGIT)"
[fourlang] "(proteinHYPHENDIGIT<root> / proteinHYPHENDIGIT)"

VBZ -> heads_VBZ
[string] heads
[tree] VBZ(heads)
[ud] "(heads<root> / heads)"
[fourlang] "(heads<root> / heads)"

NN -> spectrum_NN
[string] spectrum
[tree] NN(spectrum)
[ud] "(spectrum<root> / spectrum)"
[fourlang] "(spectrum<root> / spectrum)"

NNP -> KPERIOD_NNP
[string] KPERIOD
[tree] NNP(KPERIOD)
[ud] "(KPERIOD<root> / KPERIOD)"
[fourlang] "(KPERIOD<root> / KPERIOD)"

NN -> obligation_NN
[string] obligation
[tree] NN(obligation)
[ud] "(obligation<root> / obligation)"
[fourlang] "(obligation<root> / obligation)"

VBG -> seeking_VBG
[string] seeking
[tree] VBG(seeking)
[ud] "(seeking<root> / seeking)"
[fourlang] "(seeking<root> / seeking)"

NN -> surprise_NN
[string] surprise
[tree] NN(surprise)
[ud] "(surprise<root> / surprise)"
[fourlang] "(surprise<root> / surprise)"

VBD -> helped_VBD
[string] helped
[tree] VBD(helped)
[ud] "(helped<root> / helped)"
[fourlang] "(helped<root> / helped)"

NNP -> Missouri_NNP
[string] Missouri
[tree] NNP(Missouri)
[ud] "(Missouri<root> / Missouri)"
[fourlang] "(Missouri<root> / Missouri)"

NN -> aspect_NN
[string] aspect
[tree] NN(aspect)
[ud] "(aspect<root> / aspect)"
[fourlang] "(aspect<root> / aspect)"

NNS -> Corporations_NNS
[string] Corporations
[tree] NNS(Corporations)
[ud] "(Corporations<root> / Corporations)"
[fourlang] "(Corporations<root> / Corporations)"

NNS -> constraints_NNS
[string] constraints
[tree] NNS(constraints)
[ud] "(constraints<root> / constraints)"
[fourlang] "(constraints<root> / constraints)"

NNP -> Weisfield_NNP
[string] Weisfield
[tree] NNP(Weisfield)
[ud] "(Weisfield<root> / Weisfield)"
[fourlang] "(Weisfield<root> / Weisfield)"

IN -> within_IN
[string] within
[tree] IN(within)
[ud] "(within<root> / within)"
[fourlang] "(within<root> / within)"

NN -> university_NN
[string] university
[tree] NN(university)
[ud] "(university<root> / university)"
[fourlang] "(university<root> / university)"

NNS -> warnings_NNS
[string] warnings
[tree] NNS(warnings)
[ud] "(warnings<root> / warnings)"
[fourlang] "(warnings<root> / warnings)"

NN -> Speculation_NN
[string] Speculation
[tree] NN(Speculation)
[ud] "(Speculation<root> / Speculation)"
[fourlang] "(Speculation<root> / Speculation)"

NNP -> Guard_NNP
[string] Guard
[tree] NNP(Guard)
[ud] "(Guard<root> / Guard)"
[fourlang] "(Guard<root> / Guard)"

CD -> Nine_CD
[string] Nine
[tree] CD(Nine)
[ud] "(Nine<root> / Nine)"
[fourlang] "(Nine<root> / Nine)"

NNP -> Olympic_NNP
[string] Olympic
[tree] NNP(Olympic)
[ud] "(Olympic<root> / Olympic)"
[fourlang] "(Olympic<root> / Olympic)"

NNS -> contributions_NNS
[string] contributions
[tree] NNS(contributions)
[ud] "(contributions<root> / contributions)"
[fourlang] "(contributions<root> / contributions)"

JJ -> housingHYPHENassistance_JJ
[string] housingHYPHENassistance
[tree] JJ(housingHYPHENassistance)
[ud] "(housingHYPHENassistance<root> / housingHYPHENassistance)"
[fourlang] "(housingHYPHENassistance<root> / housingHYPHENassistance)"

NN -> indication_NN
[string] indication
[tree] NN(indication)
[ud] "(indication<root> / indication)"
[fourlang] "(indication<root> / indication)"

NNP -> Tyre_NNP
[string] Tyre
[tree] NNP(Tyre)
[ud] "(Tyre<root> / Tyre)"
[fourlang] "(Tyre<root> / Tyre)"

JJ -> multiHYPHENcrystal_JJ
[string] multiHYPHENcrystal
[tree] JJ(multiHYPHENcrystal)
[ud] "(multiHYPHENcrystal<root> / multiHYPHENcrystal)"
[fourlang] "(multiHYPHENcrystal<root> / multiHYPHENcrystal)"

JJ -> strong_JJ
[string] strong
[tree] JJ(strong)
[ud] "(strong<root> / strong)"
[fourlang] "(strong<root> / strong)"

NNS -> rulings_NNS
[string] rulings
[tree] NNS(rulings)
[ud] "(rulings<root> / rulings)"
[fourlang] "(rulings<root> / rulings)"

NNS -> advocates_NNS
[string] advocates
[tree] NNS(advocates)
[ud] "(advocates<root> / advocates)"
[fourlang] "(advocates<root> / advocates)"

NNP -> Scannell_NNP
[string] Scannell
[tree] NNP(Scannell)
[ud] "(Scannell<root> / Scannell)"
[fourlang] "(Scannell<root> / Scannell)"

IN -> like_IN
[string] like
[tree] IN(like)
[ud] "(like<root> / like)"
[fourlang] "(like<root> / like)"

NN -> experience_NN
[string] experience
[tree] NN(experience)
[ud] "(experience<root> / experience)"
[fourlang] "(experience<root> / experience)"

JJ -> first_JJ
[string] first
[tree] JJ(first)
[ud] "(first<root> / first)"
[fourlang] "(first<root> / first)"

NNS -> tons_NNS
[string] tons
[tree] NNS(tons)
[ud] "(tons<root> / tons)"
[fourlang] "(tons<root> / tons)"

VBN -> diluted_VBN
[string] diluted
[tree] VBN(diluted)
[ud] "(diluted<root> / diluted)"
[fourlang] "(diluted<root> / diluted)"

JJ -> official_JJ
[string] official
[tree] JJ(official)
[ud] "(official<root> / official)"
[fourlang] "(official<root> / official)"

NN -> situation_NN
[string] situation
[tree] NN(situation)
[ud] "(situation<root> / situation)"
[fourlang] "(situation<root> / situation)"

JJ -> sportsHYPHENoriented_JJ
[string] sportsHYPHENoriented
[tree] JJ(sportsHYPHENoriented)
[ud] "(sportsHYPHENoriented<root> / sportsHYPHENoriented)"
[fourlang] "(sportsHYPHENoriented<root> / sportsHYPHENoriented)"

NN -> study_NN
[string] study
[tree] NN(study)
[ud] "(study<root> / study)"
[fourlang] "(study<root> / study)"

NNP -> Pickens_NNP
[string] Pickens
[tree] NNP(Pickens)
[ud] "(Pickens<root> / Pickens)"
[fourlang] "(Pickens<root> / Pickens)"

NN -> number_NN
[string] number
[tree] NN(number)
[ud] "(number<root> / number)"
[fourlang] "(number<root> / number)"

RB -> hopefully_RB
[string] hopefully
[tree] RB(hopefully)
[ud] "(hopefully<root> / hopefully)"
[fourlang] "(hopefully<root> / hopefully)"

JJ -> primary_JJ
[string] primary
[tree] JJ(primary)
[ud] "(primary<root> / primary)"
[fourlang] "(primary<root> / primary)"

VBG -> guarding_VBG
[string] guarding
[tree] VBG(guarding)
[ud] "(guarding<root> / guarding)"
[fourlang] "(guarding<root> / guarding)"

NN -> vow_NN
[string] vow
[tree] NN(vow)
[ud] "(vow<root> / vow)"
[fourlang] "(vow<root> / vow)"

NNS -> functions_NNS
[string] functions
[tree] NNS(functions)
[ud] "(functions<root> / functions)"
[fourlang] "(functions<root> / functions)"

VBP -> include_VBP
[string] include
[tree] VBP(include)
[ud] "(include<root> / include)"
[fourlang] "(include<root> / include)"

NNP -> Mayland_NNP
[string] Mayland
[tree] NNP(Mayland)
[ud] "(Mayland<root> / Mayland)"
[fourlang] "(Mayland<root> / Mayland)"

NN -> bottom_NN
[string] bottom
[tree] NN(bottom)
[ud] "(bottom<root> / bottom)"
[fourlang] "(bottom<root> / bottom)"

NNP -> Timex_NNP
[string] Timex
[tree] NNP(Timex)
[ud] "(Timex<root> / Timex)"
[fourlang] "(Timex<root> / Timex)"

CD -> DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT_CD
[string] DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT
[tree] CD(DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT<root> / DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT<root> / DIGITDIGITDIGITDIGITHYPHENDIGITDIGIT)"

NNP -> Jamaica_NNP
[string] Jamaica
[tree] NNP(Jamaica)
[ud] "(Jamaica<root> / Jamaica)"
[fourlang] "(Jamaica<root> / Jamaica)"

JJR -> sharper_JJR
[string] sharper
[tree] JJR(sharper)
[ud] "(sharper<root> / sharper)"
[fourlang] "(sharper<root> / sharper)"

NNS -> Pictures_NNS
[string] Pictures
[tree] NNS(Pictures)
[ud] "(Pictures<root> / Pictures)"
[fourlang] "(Pictures<root> / Pictures)"

NNP -> Cambridge_NNP
[string] Cambridge
[tree] NNP(Cambridge)
[ud] "(Cambridge<root> / Cambridge)"
[fourlang] "(Cambridge<root> / Cambridge)"

NNS -> pressures_NNS
[string] pressures
[tree] NNS(pressures)
[ud] "(pressures<root> / pressures)"
[fourlang] "(pressures<root> / pressures)"

NNP -> Goldinger_NNP
[string] Goldinger
[tree] NNP(Goldinger)
[ud] "(Goldinger<root> / Goldinger)"
[fourlang] "(Goldinger<root> / Goldinger)"

_RRB_ -> HYPHENRRBHYPHEN__RRB_
[string] HYPHENRRBHYPHEN
[tree] _RRB_(HYPHENRRBHYPHEN)
[ud] "(HYPHENRRBHYPHEN<root> / HYPHENRRBHYPHEN)"
[fourlang] "(HYPHENRRBHYPHEN<root> / HYPHENRRBHYPHEN)"

JJ -> secondary_JJ
[string] secondary
[tree] JJ(secondary)
[ud] "(secondary<root> / secondary)"
[fourlang] "(secondary<root> / secondary)"

NNP -> Reames_NNP
[string] Reames
[tree] NNP(Reames)
[ud] "(Reames<root> / Reames)"
[fourlang] "(Reames<root> / Reames)"

NNP -> United_NNP
[string] United
[tree] NNP(United)
[ud] "(United<root> / United)"
[fourlang] "(United<root> / United)"

NNS -> implications_NNS
[string] implications
[tree] NNS(implications)
[ud] "(implications<root> / implications)"
[fourlang] "(implications<root> / implications)"

NNP -> Filter_NNP
[string] Filter
[tree] NNP(Filter)
[ud] "(Filter<root> / Filter)"
[fourlang] "(Filter<root> / Filter)"

NNP -> Petersen_NNP
[string] Petersen
[tree] NNP(Petersen)
[ud] "(Petersen<root> / Petersen)"
[fourlang] "(Petersen<root> / Petersen)"

JJ -> Domestic_JJ
[string] Domestic
[tree] JJ(Domestic)
[ud] "(Domestic<root> / Domestic)"
[fourlang] "(Domestic<root> / Domestic)"

JJ -> lifeHYPHENofHYPHENcontract_JJ
[string] lifeHYPHENofHYPHENcontract
[tree] JJ(lifeHYPHENofHYPHENcontract)
[ud] "(lifeHYPHENofHYPHENcontract<root> / lifeHYPHENofHYPHENcontract)"
[fourlang] "(lifeHYPHENofHYPHENcontract<root> / lifeHYPHENofHYPHENcontract)"

NNP -> Thomas_NNP
[string] Thomas
[tree] NNP(Thomas)
[ud] "(Thomas<root> / Thomas)"
[fourlang] "(Thomas<root> / Thomas)"

JJ -> uncomplaining_JJ
[string] uncomplaining
[tree] JJ(uncomplaining)
[ud] "(uncomplaining<root> / uncomplaining)"
[fourlang] "(uncomplaining<root> / uncomplaining)"

IN -> on_IN
[string] on
[tree] IN(on)
[ud] "(on<root> / on)"
[fourlang] "(on<root> / on)"

PRP -> they_PRP
[string] they
[tree] PRP(they)
[ud] "(they<root> / they)"
[fourlang] "(they<root> / they)"

NN -> district_NN
[string] district
[tree] NN(district)
[ud] "(district<root> / district)"
[fourlang] "(district<root> / district)"

NN -> goal_NN
[string] goal
[tree] NN(goal)
[ud] "(goal<root> / goal)"
[fourlang] "(goal<root> / goal)"

NNS -> Documents_NNS
[string] Documents
[tree] NNS(Documents)
[ud] "(Documents<root> / Documents)"
[fourlang] "(Documents<root> / Documents)"

NNS -> customers_NNS
[string] customers
[tree] NNS(customers)
[ud] "(customers<root> / customers)"
[fourlang] "(customers<root> / customers)"

NNP -> Patrick_NNP
[string] Patrick
[tree] NNP(Patrick)
[ud] "(Patrick<root> / Patrick)"
[fourlang] "(Patrick<root> / Patrick)"

NN -> cheating_NN
[string] cheating
[tree] NN(cheating)
[ud] "(cheating<root> / cheating)"
[fourlang] "(cheating<root> / cheating)"

NN -> widget_NN
[string] widget
[tree] NN(widget)
[ud] "(widget<root> / widget)"
[fourlang] "(widget<root> / widget)"

NNP -> Tuesday_NNP
[string] Tuesday
[tree] NNP(Tuesday)
[ud] "(Tuesday<root> / Tuesday)"
[fourlang] "(Tuesday<root> / Tuesday)"

CD -> Three_CD
[string] Three
[tree] CD(Three)
[ud] "(Three<root> / Three)"
[fourlang] "(Three<root> / Three)"

NN -> commodity_NN
[string] commodity
[tree] NN(commodity)
[ud] "(commodity<root> / commodity)"
[fourlang] "(commodity<root> / commodity)"

NNS -> practices_NNS
[string] practices
[tree] NNS(practices)
[ud] "(practices<root> / practices)"
[fourlang] "(practices<root> / practices)"

NNP -> Garrison_NNP
[string] Garrison
[tree] NNP(Garrison)
[ud] "(Garrison<root> / Garrison)"
[fourlang] "(Garrison<root> / Garrison)"

NN -> trafficking_NN
[string] trafficking
[tree] NN(trafficking)
[ud] "(trafficking<root> / trafficking)"
[fourlang] "(trafficking<root> / trafficking)"

NN -> TV_NN
[string] TV
[tree] NN(TV)
[ud] "(TV<root> / TV)"
[fourlang] "(TV<root> / TV)"

JJ -> humble_JJ
[string] humble
[tree] JJ(humble)
[ud] "(humble<root> / humble)"
[fourlang] "(humble<root> / humble)"

NNP -> Braidwood_NNP
[string] Braidwood
[tree] NNP(Braidwood)
[ud] "(Braidwood<root> / Braidwood)"
[fourlang] "(Braidwood<root> / Braidwood)"

NN -> majority_NN
[string] majority
[tree] NN(majority)
[ud] "(majority<root> / majority)"
[fourlang] "(majority<root> / majority)"

NNP -> NPERIODCPERIOD_NNP
[string] NPERIODCPERIOD
[tree] NNP(NPERIODCPERIOD)
[ud] "(NPERIODCPERIOD<root> / NPERIODCPERIOD)"
[fourlang] "(NPERIODCPERIOD<root> / NPERIODCPERIOD)"

NNS -> citations_NNS
[string] citations
[tree] NNS(citations)
[ud] "(citations<root> / citations)"
[fourlang] "(citations<root> / citations)"

NN -> Railroad_NN
[string] Railroad
[tree] NN(Railroad)
[ud] "(Railroad<root> / Railroad)"
[fourlang] "(Railroad<root> / Railroad)"

NN -> cancer_NN
[string] cancer
[tree] NN(cancer)
[ud] "(cancer<root> / cancer)"
[fourlang] "(cancer<root> / cancer)"

NN -> mistake_NN
[string] mistake
[tree] NN(mistake)
[ud] "(mistake<root> / mistake)"
[fourlang] "(mistake<root> / mistake)"

NNP -> Atlantic_NNP
[string] Atlantic
[tree] NNP(Atlantic)
[ud] "(Atlantic<root> / Atlantic)"
[fourlang] "(Atlantic<root> / Atlantic)"

VB -> report_VB
[string] report
[tree] VB(report)
[ud] "(report<root> / report)"
[fourlang] "(report<root> / report)"

NNS -> Auctions_NNS
[string] Auctions
[tree] NNS(Auctions)
[ud] "(Auctions<root> / Auctions)"
[fourlang] "(Auctions<root> / Auctions)"

VBG -> controlling_VBG
[string] controlling
[tree] VBG(controlling)
[ud] "(controlling<root> / controlling)"
[fourlang] "(controlling<root> / controlling)"

NNP -> Birmingham_NNP
[string] Birmingham
[tree] NNP(Birmingham)
[ud] "(Birmingham<root> / Birmingham)"
[fourlang] "(Birmingham<root> / Birmingham)"

NNP -> Hahn_NNP
[string] Hahn
[tree] NNP(Hahn)
[ud] "(Hahn<root> / Hahn)"
[fourlang] "(Hahn<root> / Hahn)"

NNS -> rankings_NNS
[string] rankings
[tree] NNS(rankings)
[ud] "(rankings<root> / rankings)"
[fourlang] "(rankings<root> / rankings)"

NN -> introduction_NN
[string] introduction
[tree] NN(introduction)
[ud] "(introduction<root> / introduction)"
[fourlang] "(introduction<root> / introduction)"

RB -> downward_RB
[string] downward
[tree] RB(downward)
[ud] "(downward<root> / downward)"
[fourlang] "(downward<root> / downward)"

NN -> look_NN
[string] look
[tree] NN(look)
[ud] "(look<root> / look)"
[fourlang] "(look<root> / look)"

NN -> campaign_NN
[string] campaign
[tree] NN(campaign)
[ud] "(campaign<root> / campaign)"
[fourlang] "(campaign<root> / campaign)"

JJ -> incredible_JJ
[string] incredible
[tree] JJ(incredible)
[ud] "(incredible<root> / incredible)"
[fourlang] "(incredible<root> / incredible)"

NN -> use_NN
[string] use
[tree] NN(use)
[ud] "(use<root> / use)"
[fourlang] "(use<root> / use)"

RB -> derisively_RB
[string] derisively
[tree] RB(derisively)
[ud] "(derisively<root> / derisively)"
[fourlang] "(derisively<root> / derisively)"

JJ -> LondonHYPHENbased_JJ
[string] LondonHYPHENbased
[tree] JJ(LondonHYPHENbased)
[ud] "(LondonHYPHENbased<root> / LondonHYPHENbased)"
[fourlang] "(LondonHYPHENbased<root> / LondonHYPHENbased)"

NNS -> advertisers_NNS
[string] advertisers
[tree] NNS(advertisers)
[ud] "(advertisers<root> / advertisers)"
[fourlang] "(advertisers<root> / advertisers)"

NNP -> Gerard_NNP
[string] Gerard
[tree] NNP(Gerard)
[ud] "(Gerard<root> / Gerard)"
[fourlang] "(Gerard<root> / Gerard)"

NN -> handling_NN
[string] handling
[tree] NN(handling)
[ud] "(handling<root> / handling)"
[fourlang] "(handling<root> / handling)"

NNS -> swings_NNS
[string] swings
[tree] NNS(swings)
[ud] "(swings<root> / swings)"
[fourlang] "(swings<root> / swings)"

NNS -> sidelines_NNS
[string] sidelines
[tree] NNS(sidelines)
[ud] "(sidelines<root> / sidelines)"
[fourlang] "(sidelines<root> / sidelines)"

JJ -> only_JJ
[string] only
[tree] JJ(only)
[ud] "(only<root> / only)"
[fourlang] "(only<root> / only)"

VB -> step_VB
[string] step
[tree] VB(step)
[ud] "(step<root> / step)"
[fourlang] "(step<root> / step)"

NN -> certin_NN
[string] certin
[tree] NN(certin)
[ud] "(certin<root> / certin)"
[fourlang] "(certin<root> / certin)"

JJ -> detailed_JJ
[string] detailed
[tree] JJ(detailed)
[ud] "(detailed<root> / detailed)"
[fourlang] "(detailed<root> / detailed)"

NN -> address_NN
[string] address
[tree] NN(address)
[ud] "(address<root> / address)"
[fourlang] "(address<root> / address)"

NN -> sugar_NN
[string] sugar
[tree] NN(sugar)
[ud] "(sugar<root> / sugar)"
[fourlang] "(sugar<root> / sugar)"

NN -> default_NN
[string] default
[tree] NN(default)
[ud] "(default<root> / default)"
[fourlang] "(default<root> / default)"

NN -> surge_NN
[string] surge
[tree] NN(surge)
[ud] "(surge<root> / surge)"
[fourlang] "(surge<root> / surge)"

NNP -> Brent_NNP
[string] Brent
[tree] NNP(Brent)
[ud] "(Brent<root> / Brent)"
[fourlang] "(Brent<root> / Brent)"

NNP -> Reagan_NNP
[string] Reagan
[tree] NNP(Reagan)
[ud] "(Reagan<root> / Reagan)"
[fourlang] "(Reagan<root> / Reagan)"

JJ -> stateHYPHENowned_JJ
[string] stateHYPHENowned
[tree] JJ(stateHYPHENowned)
[ud] "(stateHYPHENowned<root> / stateHYPHENowned)"
[fourlang] "(stateHYPHENowned<root> / stateHYPHENowned)"

VBD -> produced_VBD
[string] produced
[tree] VBD(produced)
[ud] "(produced<root> / produced)"
[fourlang] "(produced<root> / produced)"

JJ -> BHYPHENDIGITB_JJ
[string] BHYPHENDIGITB
[tree] JJ(BHYPHENDIGITB)
[ud] "(BHYPHENDIGITB<root> / BHYPHENDIGITB)"
[fourlang] "(BHYPHENDIGITB<root> / BHYPHENDIGITB)"

NNP -> MPERIODDPERIOD_NNP
[string] MPERIODDPERIOD
[tree] NNP(MPERIODDPERIOD)
[ud] "(MPERIODDPERIOD<root> / MPERIODDPERIOD)"
[fourlang] "(MPERIODDPERIOD<root> / MPERIODDPERIOD)"

NNP -> Roederer_NNP
[string] Roederer
[tree] NNP(Roederer)
[ud] "(Roederer<root> / Roederer)"
[fourlang] "(Roederer<root> / Roederer)"

NN -> employee_NN
[string] employee
[tree] NN(employee)
[ud] "(employee<root> / employee)"
[fourlang] "(employee<root> / employee)"

NN -> chronicle_NN
[string] chronicle
[tree] NN(chronicle)
[ud] "(chronicle<root> / chronicle)"
[fourlang] "(chronicle<root> / chronicle)"

NNS -> Thousands_NNS
[string] Thousands
[tree] NNS(Thousands)
[ud] "(Thousands<root> / Thousands)"
[fourlang] "(Thousands<root> / Thousands)"

NNS -> jobs_NNS
[string] jobs
[tree] NNS(jobs)
[ud] "(jobs<root> / jobs)"
[fourlang] "(jobs<root> / jobs)"

NNS -> taxes_NNS
[string] taxes
[tree] NNS(taxes)
[ud] "(taxes<root> / taxes)"
[fourlang] "(taxes<root> / taxes)"

VBP -> cause_VBP
[string] cause
[tree] VBP(cause)
[ud] "(cause<root> / cause)"
[fourlang] "(cause<root> / cause)"

NN -> malnutrition_NN
[string] malnutrition
[tree] NN(malnutrition)
[ud] "(malnutrition<root> / malnutrition)"
[fourlang] "(malnutrition<root> / malnutrition)"

VBN -> caught_VBN
[string] caught
[tree] VBN(caught)
[ud] "(caught<root> / caught)"
[fourlang] "(caught<root> / caught)"

JJ -> sufficient_JJ
[string] sufficient
[tree] JJ(sufficient)
[ud] "(sufficient<root> / sufficient)"
[fourlang] "(sufficient<root> / sufficient)"

NNP -> Britta_NNP
[string] Britta
[tree] NNP(Britta)
[ud] "(Britta<root> / Britta)"
[fourlang] "(Britta<root> / Britta)"

NNP -> Shearson_NNP
[string] Shearson
[tree] NNP(Shearson)
[ud] "(Shearson<root> / Shearson)"
[fourlang] "(Shearson<root> / Shearson)"

NN -> doubt_NN
[string] doubt
[tree] NN(doubt)
[ud] "(doubt<root> / doubt)"
[fourlang] "(doubt<root> / doubt)"

NN -> bonus_NN
[string] bonus
[tree] NN(bonus)
[ud] "(bonus<root> / bonus)"
[fourlang] "(bonus<root> / bonus)"

NNP -> Sachs_NNP
[string] Sachs
[tree] NNP(Sachs)
[ud] "(Sachs<root> / Sachs)"
[fourlang] "(Sachs<root> / Sachs)"

NN -> good_NN
[string] good
[tree] NN(good)
[ud] "(good<root> / good)"
[fourlang] "(good<root> / good)"

VBN -> involved_VBN
[string] involved
[tree] VBN(involved)
[ud] "(involved<root> / involved)"
[fourlang] "(involved<root> / involved)"

NNP -> Neil_NNP
[string] Neil
[tree] NNP(Neil)
[ud] "(Neil<root> / Neil)"
[fourlang] "(Neil<root> / Neil)"

CD -> Fifteen_CD
[string] Fifteen
[tree] CD(Fifteen)
[ud] "(Fifteen<root> / Fifteen)"
[fourlang] "(Fifteen<root> / Fifteen)"

NNP -> OSHA_NNP
[string] OSHA
[tree] NNP(OSHA)
[ud] "(OSHA<root> / OSHA)"
[fourlang] "(OSHA<root> / OSHA)"

NN -> compromise_NN
[string] compromise
[tree] NN(compromise)
[ud] "(compromise<root> / compromise)"
[fourlang] "(compromise<root> / compromise)"

NNP -> James_NNP
[string] James
[tree] NNP(James)
[ud] "(James<root> / James)"
[fourlang] "(James<root> / James)"

JJ -> DIGITDIGITHYPHENday_JJ
[string] DIGITDIGITHYPHENday
[tree] JJ(DIGITDIGITHYPHENday)
[ud] "(DIGITDIGITHYPHENday<root> / DIGITDIGITHYPHENday)"
[fourlang] "(DIGITDIGITHYPHENday<root> / DIGITDIGITHYPHENday)"

NNP -> Santa_NNP
[string] Santa
[tree] NNP(Santa)
[ud] "(Santa<root> / Santa)"
[fourlang] "(Santa<root> / Santa)"

NN -> decline_NN
[string] decline
[tree] NN(decline)
[ud] "(decline<root> / decline)"
[fourlang] "(decline<root> / decline)"

NNP -> Poor_NNP
[string] Poor
[tree] NNP(Poor)
[ud] "(Poor<root> / Poor)"
[fourlang] "(Poor<root> / Poor)"

NN -> peak_NN
[string] peak
[tree] NN(peak)
[ud] "(peak<root> / peak)"
[fourlang] "(peak<root> / peak)"

NN -> marketing_NN
[string] marketing
[tree] NN(marketing)
[ud] "(marketing<root> / marketing)"
[fourlang] "(marketing<root> / marketing)"

NN -> dialogue_NN
[string] dialogue
[tree] NN(dialogue)
[ud] "(dialogue<root> / dialogue)"
[fourlang] "(dialogue<root> / dialogue)"

JJ -> marketHYPHENshare_JJ
[string] marketHYPHENshare
[tree] JJ(marketHYPHENshare)
[ud] "(marketHYPHENshare<root> / marketHYPHENshare)"
[fourlang] "(marketHYPHENshare<root> / marketHYPHENshare)"

PRP -> himself_PRP
[string] himself
[tree] PRP(himself)
[ud] "(himself<root> / himself)"
[fourlang] "(himself<root> / himself)"

JJS -> largest_JJS
[string] largest
[tree] JJS(largest)
[ud] "(largest<root> / largest)"
[fourlang] "(largest<root> / largest)"

NNP -> Barnum_NNP
[string] Barnum
[tree] NNP(Barnum)
[ud] "(Barnum<root> / Barnum)"
[fourlang] "(Barnum<root> / Barnum)"

RB -> exclusively_RB
[string] exclusively
[tree] RB(exclusively)
[ud] "(exclusively<root> / exclusively)"
[fourlang] "(exclusively<root> / exclusively)"

NN -> patent_NN
[string] patent
[tree] NN(patent)
[ud] "(patent<root> / patent)"
[fourlang] "(patent<root> / patent)"

NN -> scheme_NN
[string] scheme
[tree] NN(scheme)
[ud] "(scheme<root> / scheme)"
[fourlang] "(scheme<root> / scheme)"

NN -> Test_NN
[string] Test
[tree] NN(Test)
[ud] "(Test<root> / Test)"
[fourlang] "(Test<root> / Test)"

NNP -> Baum_NNP
[string] Baum
[tree] NNP(Baum)
[ud] "(Baum<root> / Baum)"
[fourlang] "(Baum<root> / Baum)"

VBD -> resigned_VBD
[string] resigned
[tree] VBD(resigned)
[ud] "(resigned<root> / resigned)"
[fourlang] "(resigned<root> / resigned)"

NN -> Guarantee_NN
[string] Guarantee
[tree] NN(Guarantee)
[ud] "(Guarantee<root> / Guarantee)"
[fourlang] "(Guarantee<root> / Guarantee)"

NN -> version_NN
[string] version
[tree] NN(version)
[ud] "(version<root> / version)"
[fourlang] "(version<root> / version)"

NNS -> tests_NNS
[string] tests
[tree] NNS(tests)
[ud] "(tests<root> / tests)"
[fourlang] "(tests<root> / tests)"

NNS -> cutbacks_NNS
[string] cutbacks
[tree] NNS(cutbacks)
[ud] "(cutbacks<root> / cutbacks)"
[fourlang] "(cutbacks<root> / cutbacks)"

NNP -> Sheep_NNP
[string] Sheep
[tree] NNP(Sheep)
[ud] "(Sheep<root> / Sheep)"
[fourlang] "(Sheep<root> / Sheep)"

VBG -> growing_VBG
[string] growing
[tree] VBG(growing)
[ud] "(growing<root> / growing)"
[fourlang] "(growing<root> / growing)"

JJ -> various_JJ
[string] various
[tree] JJ(various)
[ud] "(various<root> / various)"
[fourlang] "(various<root> / various)"

JJ -> overseas_JJ
[string] overseas
[tree] JJ(overseas)
[ud] "(overseas<root> / overseas)"
[fourlang] "(overseas<root> / overseas)"

VBP -> SQre_VBP
[string] SQre
[tree] VBP(SQre)
[ud] "(SQre<root> / SQre)"
[fourlang] "(SQre<root> / SQre)"

VBZ -> Earns_VBZ
[string] Earns
[tree] VBZ(Earns)
[ud] "(Earns<root> / Earns)"
[fourlang] "(Earns<root> / Earns)"

NN -> piracy_NN
[string] piracy
[tree] NN(piracy)
[ud] "(piracy<root> / piracy)"
[fourlang] "(piracy<root> / piracy)"

IN -> in_IN
[string] in
[tree] IN(in)
[ud] "(in<root> / in)"
[fourlang] "(in<root> / in)"

DT -> all_DT
[string] all
[tree] DT(all)
[ud] "(all<root> / all)"
[fourlang] "(all<root> / all)"

NN -> integration_NN
[string] integration
[tree] NN(integration)
[ud] "(integration<root> / integration)"
[fourlang] "(integration<root> / integration)"

NNS -> districts_NNS
[string] districts
[tree] NNS(districts)
[ud] "(districts<root> / districts)"
[fourlang] "(districts<root> / districts)"

JJ -> mature_JJ
[string] mature
[tree] JJ(mature)
[ud] "(mature<root> / mature)"
[fourlang] "(mature<root> / mature)"

NNS -> managers_NNS
[string] managers
[tree] NNS(managers)
[ud] "(managers<root> / managers)"
[fourlang] "(managers<root> / managers)"

NNS -> shares_NNS
[string] shares
[tree] NNS(shares)
[ud] "(shares<root> / shares)"
[fourlang] "(shares<root> / shares)"

JJR -> Higher_JJR
[string] Higher
[tree] JJR(Higher)
[ud] "(Higher<root> / Higher)"
[fourlang] "(Higher<root> / Higher)"

NN -> arbitrage_NN
[string] arbitrage
[tree] NN(arbitrage)
[ud] "(arbitrage<root> / arbitrage)"
[fourlang] "(arbitrage<root> / arbitrage)"

NNS -> dolls_NNS
[string] dolls
[tree] NNS(dolls)
[ud] "(dolls<root> / dolls)"
[fourlang] "(dolls<root> / dolls)"

NN -> challenge_NN
[string] challenge
[tree] NN(challenge)
[ud] "(challenge<root> / challenge)"
[fourlang] "(challenge<root> / challenge)"

VB -> run_VB
[string] run
[tree] VB(run)
[ud] "(run<root> / run)"
[fourlang] "(run<root> / run)"

NNS -> Orders_NNS
[string] Orders
[tree] NNS(Orders)
[ud] "(Orders<root> / Orders)"
[fourlang] "(Orders<root> / Orders)"

JJ -> common_JJ
[string] common
[tree] JJ(common)
[ud] "(common<root> / common)"
[fourlang] "(common<root> / common)"

NNP -> Mississippi_NNP
[string] Mississippi
[tree] NNP(Mississippi)
[ud] "(Mississippi<root> / Mississippi)"
[fourlang] "(Mississippi<root> / Mississippi)"

JJ -> unloaded_JJ
[string] unloaded
[tree] JJ(unloaded)
[ud] "(unloaded<root> / unloaded)"
[fourlang] "(unloaded<root> / unloaded)"

NN -> show_NN
[string] show
[tree] NN(show)
[ud] "(show<root> / show)"
[fourlang] "(show<root> / show)"

NN -> preparation_NN
[string] preparation
[tree] NN(preparation)
[ud] "(preparation<root> / preparation)"
[fourlang] "(preparation<root> / preparation)"

NNS -> drawbacks_NNS
[string] drawbacks
[tree] NNS(drawbacks)
[ud] "(drawbacks<root> / drawbacks)"
[fourlang] "(drawbacks<root> / drawbacks)"

NNS -> metals_NNS
[string] metals
[tree] NNS(metals)
[ud] "(metals<root> / metals)"
[fourlang] "(metals<root> / metals)"

NNP -> Murray_NNP
[string] Murray
[tree] NNP(Murray)
[ud] "(Murray<root> / Murray)"
[fourlang] "(Murray<root> / Murray)"

NNP -> Minister_NNP
[string] Minister
[tree] NNP(Minister)
[ud] "(Minister<root> / Minister)"
[fourlang] "(Minister<root> / Minister)"

VBG -> trading_VBG
[string] trading
[tree] VBG(trading)
[ud] "(trading<root> / trading)"
[fourlang] "(trading<root> / trading)"

VB -> reduce_VB
[string] reduce
[tree] VB(reduce)
[ud] "(reduce<root> / reduce)"
[fourlang] "(reduce<root> / reduce)"

NN -> Symbol_NN
[string] Symbol
[tree] NN(Symbol)
[ud] "(Symbol<root> / Symbol)"
[fourlang] "(Symbol<root> / Symbol)"

NNP -> Taurus_NNP
[string] Taurus
[tree] NNP(Taurus)
[ud] "(Taurus<root> / Taurus)"
[fourlang] "(Taurus<root> / Taurus)"

CD -> DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT_CD
[string] DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT
[tree] CD(DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"

NNS -> stages_NNS
[string] stages
[tree] NNS(stages)
[ud] "(stages<root> / stages)"
[fourlang] "(stages<root> / stages)"

NN -> leap_NN
[string] leap
[tree] NN(leap)
[ud] "(leap<root> / leap)"
[fourlang] "(leap<root> / leap)"

NNS -> mortgages_NNS
[string] mortgages
[tree] NNS(mortgages)
[ud] "(mortgages<root> / mortgages)"
[fourlang] "(mortgages<root> / mortgages)"

PRP -> yourself_PRP
[string] yourself
[tree] PRP(yourself)
[ud] "(yourself<root> / yourself)"
[fourlang] "(yourself<root> / yourself)"

NNP -> Harold_NNP
[string] Harold
[tree] NNP(Harold)
[ud] "(Harold<root> / Harold)"
[fourlang] "(Harold<root> / Harold)"

NNP -> Cincinnati_NNP
[string] Cincinnati
[tree] NNP(Cincinnati)
[ud] "(Cincinnati<root> / Cincinnati)"
[fourlang] "(Cincinnati<root> / Cincinnati)"

NN -> takeover_NN
[string] takeover
[tree] NN(takeover)
[ud] "(takeover<root> / takeover)"
[fourlang] "(takeover<root> / takeover)"

NNP -> Telegraph_NNP
[string] Telegraph
[tree] NNP(Telegraph)
[ud] "(Telegraph<root> / Telegraph)"
[fourlang] "(Telegraph<root> / Telegraph)"

NN -> word_NN
[string] word
[tree] NN(word)
[ud] "(word<root> / word)"
[fourlang] "(word<root> / word)"

NN -> PERCENT_NN
[string] PERCENT
[tree] NN(PERCENT)
[ud] "(PERCENT<root> / PERCENT)"
[fourlang] "(PERCENT<root> / PERCENT)"

VBP -> flush_VBP
[string] flush
[tree] VBP(flush)
[ud] "(flush<root> / flush)"
[fourlang] "(flush<root> / flush)"

JJ -> nationwide_JJ
[string] nationwide
[tree] JJ(nationwide)
[ud] "(nationwide<root> / nationwide)"
[fourlang] "(nationwide<root> / nationwide)"

JJ -> sevenHYPHENyear_JJ
[string] sevenHYPHENyear
[tree] JJ(sevenHYPHENyear)
[ud] "(sevenHYPHENyear<root> / sevenHYPHENyear)"
[fourlang] "(sevenHYPHENyear<root> / sevenHYPHENyear)"

NN -> proviso_NN
[string] proviso
[tree] NN(proviso)
[ud] "(proviso<root> / proviso)"
[fourlang] "(proviso<root> / proviso)"

NN -> car_NN
[string] car
[tree] NN(car)
[ud] "(car<root> / car)"
[fourlang] "(car<root> / car)"

JJ -> prime_JJ
[string] prime
[tree] JJ(prime)
[ud] "(prime<root> / prime)"
[fourlang] "(prime<root> / prime)"

JJ -> questionable_JJ
[string] questionable
[tree] JJ(questionable)
[ud] "(questionable<root> / questionable)"
[fourlang] "(questionable<root> / questionable)"

VB -> support_VB
[string] support
[tree] VB(support)
[ud] "(support<root> / support)"
[fourlang] "(support<root> / support)"

RB -> together_RB
[string] together
[tree] RB(together)
[ud] "(together<root> / together)"
[fourlang] "(together<root> / together)"

VB -> produce_VB
[string] produce
[tree] VB(produce)
[ud] "(produce<root> / produce)"
[fourlang] "(produce<root> / produce)"

NNS -> semesters_NNS
[string] semesters
[tree] NNS(semesters)
[ud] "(semesters<root> / semesters)"
[fourlang] "(semesters<root> / semesters)"

NN -> weakening_NN
[string] weakening
[tree] NN(weakening)
[ud] "(weakening<root> / weakening)"
[fourlang] "(weakening<root> / weakening)"

VBN -> spurred_VBN
[string] spurred
[tree] VBN(spurred)
[ud] "(spurred<root> / spurred)"
[fourlang] "(spurred<root> / spurred)"

NN -> lesson_NN
[string] lesson
[tree] NN(lesson)
[ud] "(lesson<root> / lesson)"
[fourlang] "(lesson<root> / lesson)"

NN -> powerhouse_NN
[string] powerhouse
[tree] NN(powerhouse)
[ud] "(powerhouse<root> / powerhouse)"
[fourlang] "(powerhouse<root> / powerhouse)"

JJ -> political_JJ
[string] political
[tree] JJ(political)
[ud] "(political<root> / political)"
[fourlang] "(political<root> / political)"

NN -> program_NN
[string] program
[tree] NN(program)
[ud] "(program<root> / program)"
[fourlang] "(program<root> / program)"

NN -> plenty_NN
[string] plenty
[tree] NN(plenty)
[ud] "(plenty<root> / plenty)"
[fourlang] "(plenty<root> / plenty)"

NN -> marrow_NN
[string] marrow
[tree] NN(marrow)
[ud] "(marrow<root> / marrow)"
[fourlang] "(marrow<root> / marrow)"

NN -> hook_NN
[string] hook
[tree] NN(hook)
[ud] "(hook<root> / hook)"
[fourlang] "(hook<root> / hook)"

NNS -> moneymakers_NNS
[string] moneymakers
[tree] NNS(moneymakers)
[ud] "(moneymakers<root> / moneymakers)"
[fourlang] "(moneymakers<root> / moneymakers)"

JJ -> disagreeable_JJ
[string] disagreeable
[tree] JJ(disagreeable)
[ud] "(disagreeable<root> / disagreeable)"
[fourlang] "(disagreeable<root> / disagreeable)"

NNS -> youngsters_NNS
[string] youngsters
[tree] NNS(youngsters)
[ud] "(youngsters<root> / youngsters)"
[fourlang] "(youngsters<root> / youngsters)"

NNS -> protests_NNS
[string] protests
[tree] NNS(protests)
[ud] "(protests<root> / protests)"
[fourlang] "(protests<root> / protests)"

NN -> attack_NN
[string] attack
[tree] NN(attack)
[ud] "(attack<root> / attack)"
[fourlang] "(attack<root> / attack)"

NNPS -> Securities_NNPS
[string] Securities
[tree] NNPS(Securities)
[ud] "(Securities<root> / Securities)"
[fourlang] "(Securities<root> / Securities)"

NNP -> Anthony_NNP
[string] Anthony
[tree] NNP(Anthony)
[ud] "(Anthony<root> / Anthony)"
[fourlang] "(Anthony<root> / Anthony)"

VBZ -> makes_VBZ
[string] makes
[tree] VBZ(makes)
[ud] "(makes<root> / makes)"
[fourlang] "(makes<root> / makes)"

NN -> lack_NN
[string] lack
[tree] NN(lack)
[ud] "(lack<root> / lack)"
[fourlang] "(lack<root> / lack)"

NNS -> COMPUTERS_NNS
[string] COMPUTERS
[tree] NNS(COMPUTERS)
[ud] "(COMPUTERS<root> / COMPUTERS)"
[fourlang] "(COMPUTERS<root> / COMPUTERS)"

JJ -> undiplomatic_JJ
[string] undiplomatic
[tree] JJ(undiplomatic)
[ud] "(undiplomatic<root> / undiplomatic)"
[fourlang] "(undiplomatic<root> / undiplomatic)"

NN -> sense_NN
[string] sense
[tree] NN(sense)
[ud] "(sense<root> / sense)"
[fourlang] "(sense<root> / sense)"

NNS -> indexers_NNS
[string] indexers
[tree] NNS(indexers)
[ud] "(indexers<root> / indexers)"
[fourlang] "(indexers<root> / indexers)"

MD -> must_MD
[string] must
[tree] MD(must)
[ud] "(must<root> / must)"
[fourlang] "(must<root> / must)"

NNP -> Nelms_NNP
[string] Nelms
[tree] NNP(Nelms)
[ud] "(Nelms<root> / Nelms)"
[fourlang] "(Nelms<root> / Nelms)"

NNPS -> Republicans_NNPS
[string] Republicans
[tree] NNPS(Republicans)
[ud] "(Republicans<root> / Republicans)"
[fourlang] "(Republicans<root> / Republicans)"

JJ -> DIGITDIGITDIGITHYPHENstock_JJ
[string] DIGITDIGITDIGITHYPHENstock
[tree] JJ(DIGITDIGITDIGITHYPHENstock)
[ud] "(DIGITDIGITDIGITHYPHENstock<root> / DIGITDIGITDIGITHYPHENstock)"
[fourlang] "(DIGITDIGITDIGITHYPHENstock<root> / DIGITDIGITDIGITHYPHENstock)"

RB -> fast_RB
[string] fast
[tree] RB(fast)
[ud] "(fast<root> / fast)"
[fourlang] "(fast<root> / fast)"

VBN -> instituted_VBN
[string] instituted
[tree] VBN(instituted)
[ud] "(instituted<root> / instituted)"
[fourlang] "(instituted<root> / instituted)"

DT -> both_DT
[string] both
[tree] DT(both)
[ud] "(both<root> / both)"
[fourlang] "(both<root> / both)"

NNS -> consumers_NNS
[string] consumers
[tree] NNS(consumers)
[ud] "(consumers<root> / consumers)"
[fourlang] "(consumers<root> / consumers)"

NNS -> applications_NNS
[string] applications
[tree] NNS(applications)
[ud] "(applications<root> / applications)"
[fourlang] "(applications<root> / applications)"

VBG -> prevailing_VBG
[string] prevailing
[tree] VBG(prevailing)
[ud] "(prevailing<root> / prevailing)"
[fourlang] "(prevailing<root> / prevailing)"

NNP -> Community_NNP
[string] Community
[tree] NNP(Community)
[ud] "(Community<root> / Community)"
[fourlang] "(Community<root> / Community)"

_NONE_ -> ASTERISKHYPHENDIGIT__NONE_
[string] ASTERISKHYPHENDIGIT
[tree] _NONE_(ASTERISKHYPHENDIGIT)
[ud] "(ASTERISKHYPHENDIGIT<root> / ASTERISKHYPHENDIGIT)"
[fourlang] "(ASTERISKHYPHENDIGIT<root> / ASTERISKHYPHENDIGIT)"

NNP -> George_NNP
[string] George
[tree] NNP(George)
[ud] "(George<root> / George)"
[fourlang] "(George<root> / George)"

RB -> continuingly_RB
[string] continuingly
[tree] RB(continuingly)
[ud] "(continuingly<root> / continuingly)"
[fourlang] "(continuingly<root> / continuingly)"

JJ -> fifthHYPHENlargest_JJ
[string] fifthHYPHENlargest
[tree] JJ(fifthHYPHENlargest)
[ud] "(fifthHYPHENlargest<root> / fifthHYPHENlargest)"
[fourlang] "(fifthHYPHENlargest<root> / fifthHYPHENlargest)"

JJR -> savvier_JJR
[string] savvier
[tree] JJR(savvier)
[ud] "(savvier<root> / savvier)"
[fourlang] "(savvier<root> / savvier)"

NNS -> avenues_NNS
[string] avenues
[tree] NNS(avenues)
[ud] "(avenues<root> / avenues)"
[fourlang] "(avenues<root> / avenues)"

NN -> city_NN
[string] city
[tree] NN(city)
[ud] "(city<root> / city)"
[fourlang] "(city<root> / city)"

NN -> dispute_NN
[string] dispute
[tree] NN(dispute)
[ud] "(dispute<root> / dispute)"
[fourlang] "(dispute<root> / dispute)"

JJ -> equal_JJ
[string] equal
[tree] JJ(equal)
[ud] "(equal<root> / equal)"
[fourlang] "(equal<root> / equal)"

NNP -> DiLoreto_NNP
[string] DiLoreto
[tree] NNP(DiLoreto)
[ud] "(DiLoreto<root> / DiLoreto)"
[fourlang] "(DiLoreto<root> / DiLoreto)"

VBP -> appeal_VBP
[string] appeal
[tree] VBP(appeal)
[ud] "(appeal<root> / appeal)"
[fourlang] "(appeal<root> / appeal)"

PDT -> Such_PDT
[string] Such
[tree] PDT(Such)
[ud] "(Such<root> / Such)"
[fourlang] "(Such<root> / Such)"

NN -> yen_NN
[string] yen
[tree] NN(yen)
[ud] "(yen<root> / yen)"
[fourlang] "(yen<root> / yen)"

NNP -> TRANSPLANT_NNP
[string] TRANSPLANT
[tree] NNP(TRANSPLANT)
[ud] "(TRANSPLANT<root> / TRANSPLANT)"
[fourlang] "(TRANSPLANT<root> / TRANSPLANT)"

NN -> litigation_NN
[string] litigation
[tree] NN(litigation)
[ud] "(litigation<root> / litigation)"
[fourlang] "(litigation<root> / litigation)"

VBG -> having_VBG
[string] having
[tree] VBG(having)
[ud] "(having<root> / having)"
[fourlang] "(having<root> / having)"

NN -> desktop_NN
[string] desktop
[tree] NN(desktop)
[ud] "(desktop<root> / desktop)"
[fourlang] "(desktop<root> / desktop)"

NNP -> Taiwan_NNP
[string] Taiwan
[tree] NNP(Taiwan)
[ud] "(Taiwan<root> / Taiwan)"
[fourlang] "(Taiwan<root> / Taiwan)"

NN -> impact_NN
[string] impact
[tree] NN(impact)
[ud] "(impact<root> / impact)"
[fourlang] "(impact<root> / impact)"

VBG -> avoiding_VBG
[string] avoiding
[tree] VBG(avoiding)
[ud] "(avoiding<root> / avoiding)"
[fourlang] "(avoiding<root> / avoiding)"

RB -> unfairly_RB
[string] unfairly
[tree] RB(unfairly)
[ud] "(unfairly<root> / unfairly)"
[fourlang] "(unfairly<root> / unfairly)"

NN -> singleHYPHENfamily_NN
[string] singleHYPHENfamily
[tree] NN(singleHYPHENfamily)
[ud] "(singleHYPHENfamily<root> / singleHYPHENfamily)"
[fourlang] "(singleHYPHENfamily<root> / singleHYPHENfamily)"

NN -> gold_NN
[string] gold
[tree] NN(gold)
[ud] "(gold<root> / gold)"
[fourlang] "(gold<root> / gold)"

NNS -> talks_NNS
[string] talks
[tree] NNS(talks)
[ud] "(talks<root> / talks)"
[fourlang] "(talks<root> / talks)"

JJ -> normal_JJ
[string] normal
[tree] JJ(normal)
[ud] "(normal<root> / normal)"
[fourlang] "(normal<root> / normal)"

NNP -> Don_NNP
[string] Don
[tree] NNP(Don)
[ud] "(Don<root> / Don)"
[fourlang] "(Don<root> / Don)"

NNP -> Lane_NNP
[string] Lane
[tree] NNP(Lane)
[ud] "(Lane<root> / Lane)"
[fourlang] "(Lane<root> / Lane)"

NN -> astonishment_NN
[string] astonishment
[tree] NN(astonishment)
[ud] "(astonishment<root> / astonishment)"
[fourlang] "(astonishment<root> / astonishment)"

VBN -> closed_VBN
[string] closed
[tree] VBN(closed)
[ud] "(closed<root> / closed)"
[fourlang] "(closed<root> / closed)"

NNP -> CPERIODJPERIODBPERIOD_NNP
[string] CPERIODJPERIODBPERIOD
[tree] NNP(CPERIODJPERIODBPERIOD)
[ud] "(CPERIODJPERIODBPERIOD<root> / CPERIODJPERIODBPERIOD)"
[fourlang] "(CPERIODJPERIODBPERIOD<root> / CPERIODJPERIODBPERIOD)"

VBG -> raising_VBG
[string] raising
[tree] VBG(raising)
[ud] "(raising<root> / raising)"
[fourlang] "(raising<root> / raising)"

NNS -> ends_NNS
[string] ends
[tree] NNS(ends)
[ud] "(ends<root> / ends)"
[fourlang] "(ends<root> / ends)"

NN -> flap_NN
[string] flap
[tree] NN(flap)
[ud] "(flap<root> / flap)"
[fourlang] "(flap<root> / flap)"

NN -> abortion_NN
[string] abortion
[tree] NN(abortion)
[ud] "(abortion<root> / abortion)"
[fourlang] "(abortion<root> / abortion)"

NNP -> Vinken_NNP
[string] Vinken
[tree] NNP(Vinken)
[ud] "(Vinken<root> / Vinken)"
[fourlang] "(Vinken<root> / Vinken)"

NNP -> Northeast_NNP
[string] Northeast
[tree] NNP(Northeast)
[ud] "(Northeast<root> / Northeast)"
[fourlang] "(Northeast<root> / Northeast)"

VBG -> financing_VBG
[string] financing
[tree] VBG(financing)
[ud] "(financing<root> / financing)"
[fourlang] "(financing<root> / financing)"

JJ -> explanatory_JJ
[string] explanatory
[tree] JJ(explanatory)
[ud] "(explanatory<root> / explanatory)"
[fourlang] "(explanatory<root> / explanatory)"

NN -> dismay_NN
[string] dismay
[tree] NN(dismay)
[ud] "(dismay<root> / dismay)"
[fourlang] "(dismay<root> / dismay)"

NNP -> Boston_NNP
[string] Boston
[tree] NNP(Boston)
[ud] "(Boston<root> / Boston)"
[fourlang] "(Boston<root> / Boston)"

NNP -> Mitsubishi_NNP
[string] Mitsubishi
[tree] NNP(Mitsubishi)
[ud] "(Mitsubishi<root> / Mitsubishi)"
[fourlang] "(Mitsubishi<root> / Mitsubishi)"

NNS -> growths_NNS
[string] growths
[tree] NNS(growths)
[ud] "(growths<root> / growths)"
[fourlang] "(growths<root> / growths)"

VBN -> known_VBN
[string] known
[tree] VBN(known)
[ud] "(known<root> / known)"
[fourlang] "(known<root> / known)"

NN -> step_NN
[string] step
[tree] NN(step)
[ud] "(step<root> / step)"
[fourlang] "(step<root> / step)"

NN -> startHYPHENup_NN
[string] startHYPHENup
[tree] NN(startHYPHENup)
[ud] "(startHYPHENup<root> / startHYPHENup)"
[fourlang] "(startHYPHENup<root> / startHYPHENup)"

NN -> NoPERIOD_NN
[string] NoPERIOD
[tree] NN(NoPERIOD)
[ud] "(NoPERIOD<root> / NoPERIOD)"
[fourlang] "(NoPERIOD<root> / NoPERIOD)"

NN -> working_NN
[string] working
[tree] NN(working)
[ud] "(working<root> / working)"
[fourlang] "(working<root> / working)"

NNS -> markdowns_NNS
[string] markdowns
[tree] NNS(markdowns)
[ud] "(markdowns<root> / markdowns)"
[fourlang] "(markdowns<root> / markdowns)"

JJ -> principal_JJ
[string] principal
[tree] JJ(principal)
[ud] "(principal<root> / principal)"
[fourlang] "(principal<root> / principal)"

NNS -> signals_NNS
[string] signals
[tree] NNS(signals)
[ud] "(signals<root> / signals)"
[fourlang] "(signals<root> / signals)"

NN -> testing_NN
[string] testing
[tree] NN(testing)
[ud] "(testing<root> / testing)"
[fourlang] "(testing<root> / testing)"

NNS -> gains_NNS
[string] gains
[tree] NNS(gains)
[ud] "(gains<root> / gains)"
[fourlang] "(gains<root> / gains)"

NNS -> acquisitions_NNS
[string] acquisitions
[tree] NNS(acquisitions)
[ud] "(acquisitions<root> / acquisitions)"
[fourlang] "(acquisitions<root> / acquisitions)"

NNP -> NewsHYPHENAmerican_NNP
[string] NewsHYPHENAmerican
[tree] NNP(NewsHYPHENAmerican)
[ud] "(NewsHYPHENAmerican<root> / NewsHYPHENAmerican)"
[fourlang] "(NewsHYPHENAmerican<root> / NewsHYPHENAmerican)"

VBD -> was_VBD
[string] was
[tree] VBD(was)
[ud] "(was<root> / was)"
[fourlang] "(was<root> / was)"

NNP -> Ringers_NNP
[string] Ringers
[tree] NNP(Ringers)
[ud] "(Ringers<root> / Ringers)"
[fourlang] "(Ringers<root> / Ringers)"

NNP -> Lehman_NNP
[string] Lehman
[tree] NNP(Lehman)
[ud] "(Lehman<root> / Lehman)"
[fourlang] "(Lehman<root> / Lehman)"

NNP -> Webb_NNP
[string] Webb
[tree] NNP(Webb)
[ud] "(Webb<root> / Webb)"
[fourlang] "(Webb<root> / Webb)"

NNP -> Securities_NNP
[string] Securities
[tree] NNP(Securities)
[ud] "(Securities<root> / Securities)"
[fourlang] "(Securities<root> / Securities)"

VBP -> provide_VBP
[string] provide
[tree] VBP(provide)
[ud] "(provide<root> / provide)"
[fourlang] "(provide<root> / provide)"

CD -> six_CD
[string] six
[tree] CD(six)
[ud] "(six<root> / six)"
[fourlang] "(six<root> / six)"

NNS -> doctors_NNS
[string] doctors
[tree] NNS(doctors)
[ud] "(doctors<root> / doctors)"
[fourlang] "(doctors<root> / doctors)"

JJ -> serious_JJ
[string] serious
[tree] JJ(serious)
[ud] "(serious<root> / serious)"
[fourlang] "(serious<root> / serious)"

VBG -> selling_VBG
[string] selling
[tree] VBG(selling)
[ud] "(selling<root> / selling)"
[fourlang] "(selling<root> / selling)"

RB -> in_RB
[string] in
[tree] RB(in)
[ud] "(in<root> / in)"
[fourlang] "(in<root> / in)"

NN -> news_NN
[string] news
[tree] NN(news)
[ud] "(news<root> / news)"
[fourlang] "(news<root> / news)"

NNS -> developments_NNS
[string] developments
[tree] NNS(developments)
[ud] "(developments<root> / developments)"
[fourlang] "(developments<root> / developments)"

NNP -> Campbell_NNP
[string] Campbell
[tree] NNP(Campbell)
[ud] "(Campbell<root> / Campbell)"
[fourlang] "(Campbell<root> / Campbell)"

NNP -> Heidelberg_NNP
[string] Heidelberg
[tree] NNP(Heidelberg)
[ud] "(Heidelberg<root> / Heidelberg)"
[fourlang] "(Heidelberg<root> / Heidelberg)"

NNP -> California_NNP
[string] California
[tree] NNP(California)
[ud] "(California<root> / California)"
[fourlang] "(California<root> / California)"

NNS -> Gilts_NNS
[string] Gilts
[tree] NNS(Gilts)
[ud] "(Gilts<root> / Gilts)"
[fourlang] "(Gilts<root> / Gilts)"

NN -> board_NN
[string] board
[tree] NN(board)
[ud] "(board<root> / board)"
[fourlang] "(board<root> / board)"

VBP -> import_VBP
[string] import
[tree] VBP(import)
[ud] "(import<root> / import)"
[fourlang] "(import<root> / import)"

JJ -> mental_JJ
[string] mental
[tree] JJ(mental)
[ud] "(mental<root> / mental)"
[fourlang] "(mental<root> / mental)"

NNS -> letters_NNS
[string] letters
[tree] NNS(letters)
[ud] "(letters<root> / letters)"
[fourlang] "(letters<root> / letters)"

NN -> ban_NN
[string] ban
[tree] NN(ban)
[ud] "(ban<root> / ban)"
[fourlang] "(ban<root> / ban)"

NN -> glass_NN
[string] glass
[tree] NN(glass)
[ud] "(glass<root> / glass)"
[fourlang] "(glass<root> / glass)"

VBG -> making_VBG
[string] making
[tree] VBG(making)
[ud] "(making<root> / making)"
[fourlang] "(making<root> / making)"

NNS -> proponents_NNS
[string] proponents
[tree] NNS(proponents)
[ud] "(proponents<root> / proponents)"
[fourlang] "(proponents<root> / proponents)"

NNP -> Standard_NNP
[string] Standard
[tree] NNP(Standard)
[ud] "(Standard<root> / Standard)"
[fourlang] "(Standard<root> / Standard)"

CD -> seven_CD
[string] seven
[tree] CD(seven)
[ud] "(seven<root> / seven)"
[fourlang] "(seven<root> / seven)"

NN -> evening_NN
[string] evening
[tree] NN(evening)
[ud] "(evening<root> / evening)"
[fourlang] "(evening<root> / evening)"

NN -> shareholder_NN
[string] shareholder
[tree] NN(shareholder)
[ud] "(shareholder<root> / shareholder)"
[fourlang] "(shareholder<root> / shareholder)"

CD -> DIGITBSLPERDIGITDIGIT_CD
[string] DIGITBSLPERDIGITDIGIT
[tree] CD(DIGITBSLPERDIGITDIGIT)
[ud] "(DIGITBSLPERDIGITDIGIT<root> / DIGITBSLPERDIGITDIGIT)"
[fourlang] "(DIGITBSLPERDIGITDIGIT<root> / DIGITBSLPERDIGITDIGIT)"

NNP -> MichPERIOD_NNP
[string] MichPERIOD
[tree] NNP(MichPERIOD)
[ud] "(MichPERIOD<root> / MichPERIOD)"
[fourlang] "(MichPERIOD<root> / MichPERIOD)"

NN -> deluge_NN
[string] deluge
[tree] NN(deluge)
[ud] "(deluge<root> / deluge)"
[fourlang] "(deluge<root> / deluge)"

NNP -> CorpPERIOD_NNP
[string] CorpPERIOD
[tree] NNP(CorpPERIOD)
[ud] "(CorpPERIOD<root> / CorpPERIOD)"
[fourlang] "(CorpPERIOD<root> / CorpPERIOD)"

NNP -> Stronach_NNP
[string] Stronach
[tree] NNP(Stronach)
[ud] "(Stronach<root> / Stronach)"
[fourlang] "(Stronach<root> / Stronach)"

JJ -> blue_JJ
[string] blue
[tree] JJ(blue)
[ud] "(blue<root> / blue)"
[fourlang] "(blue<root> / blue)"

NNP -> Champagne_NNP
[string] Champagne
[tree] NNP(Champagne)
[ud] "(Champagne<root> / Champagne)"
[fourlang] "(Champagne<root> / Champagne)"

JJR -> happier_JJR
[string] happier
[tree] JJR(happier)
[ud] "(happier<root> / happier)"
[fourlang] "(happier<root> / happier)"

NNP -> Satrum_NNP
[string] Satrum
[tree] NNP(Satrum)
[ud] "(Satrum<root> / Satrum)"
[fourlang] "(Satrum<root> / Satrum)"

NNP -> Stores_NNP
[string] Stores
[tree] NNP(Stores)
[ud] "(Stores<root> / Stores)"
[fourlang] "(Stores<root> / Stores)"

NN -> factory_NN
[string] factory
[tree] NN(factory)
[ud] "(factory<root> / factory)"
[fourlang] "(factory<root> / factory)"

JJ -> depositary_JJ
[string] depositary
[tree] JJ(depositary)
[ud] "(depositary<root> / depositary)"
[fourlang] "(depositary<root> / depositary)"

JJ -> highHYPHENtech_JJ
[string] highHYPHENtech
[tree] JJ(highHYPHENtech)
[ud] "(highHYPHENtech<root> / highHYPHENtech)"
[fourlang] "(highHYPHENtech<root> / highHYPHENtech)"

NN -> transplantation_NN
[string] transplantation
[tree] NN(transplantation)
[ud] "(transplantation<root> / transplantation)"
[fourlang] "(transplantation<root> / transplantation)"

NNS -> payouts_NNS
[string] payouts
[tree] NNS(payouts)
[ud] "(payouts<root> / payouts)"
[fourlang] "(payouts<root> / payouts)"

NN -> slump_NN
[string] slump
[tree] NN(slump)
[ud] "(slump<root> / slump)"
[fourlang] "(slump<root> / slump)"

NNS -> goods_NNS
[string] goods
[tree] NNS(goods)
[ud] "(goods<root> / goods)"
[fourlang] "(goods<root> / goods)"

NNP -> DaiHYPHENIchi_NNP
[string] DaiHYPHENIchi
[tree] NNP(DaiHYPHENIchi)
[ud] "(DaiHYPHENIchi<root> / DaiHYPHENIchi)"
[fourlang] "(DaiHYPHENIchi<root> / DaiHYPHENIchi)"

NNP -> Debt_NNP
[string] Debt
[tree] NNP(Debt)
[ud] "(Debt<root> / Debt)"
[fourlang] "(Debt<root> / Debt)"

NNP -> Turkey_NNP
[string] Turkey
[tree] NNP(Turkey)
[ud] "(Turkey<root> / Turkey)"
[fourlang] "(Turkey<root> / Turkey)"

NNP -> INTERPUBLIC_NNP
[string] INTERPUBLIC
[tree] NNP(INTERPUBLIC)
[ud] "(INTERPUBLIC<root> / INTERPUBLIC)"
[fourlang] "(INTERPUBLIC<root> / INTERPUBLIC)"

NN -> recession_NN
[string] recession
[tree] NN(recession)
[ud] "(recession<root> / recession)"
[fourlang] "(recession<root> / recession)"

NNP -> POP_NNP
[string] POP
[tree] NNP(POP)
[ud] "(POP<root> / POP)"
[fourlang] "(POP<root> / POP)"

JJ -> antiHYPHENdumping_JJ
[string] antiHYPHENdumping
[tree] JJ(antiHYPHENdumping)
[ud] "(antiHYPHENdumping<root> / antiHYPHENdumping)"
[fourlang] "(antiHYPHENdumping<root> / antiHYPHENdumping)"

NN -> courage_NN
[string] courage
[tree] NN(courage)
[ud] "(courage<root> / courage)"
[fourlang] "(courage<root> / courage)"

NN -> law_NN
[string] law
[tree] NN(law)
[ud] "(law<root> / law)"
[fourlang] "(law<root> / law)"

NNP -> Driscoll_NNP
[string] Driscoll
[tree] NNP(Driscoll)
[ud] "(Driscoll<root> / Driscoll)"
[fourlang] "(Driscoll<root> / Driscoll)"

NNS -> findings_NNS
[string] findings
[tree] NNS(findings)
[ud] "(findings<root> / findings)"
[fourlang] "(findings<root> / findings)"

NNP -> Sierra_NNP
[string] Sierra
[tree] NNP(Sierra)
[ud] "(Sierra<root> / Sierra)"
[fourlang] "(Sierra<root> / Sierra)"

NN -> yield_NN
[string] yield
[tree] NN(yield)
[ud] "(yield<root> / yield)"
[fourlang] "(yield<root> / yield)"

NNP -> Curry_NNP
[string] Curry
[tree] NNP(Curry)
[ud] "(Curry<root> / Curry)"
[fourlang] "(Curry<root> / Curry)"

DT -> These_DT
[string] These
[tree] DT(These)
[ud] "(These<root> / These)"
[fourlang] "(These<root> / These)"

JJ -> metropolitan_JJ
[string] metropolitan
[tree] JJ(metropolitan)
[ud] "(metropolitan<root> / metropolitan)"
[fourlang] "(metropolitan<root> / metropolitan)"

NNS -> transplants_NNS
[string] transplants
[tree] NNS(transplants)
[ud] "(transplants<root> / transplants)"
[fourlang] "(transplants<root> / transplants)"

RB -> earlier_RB
[string] earlier
[tree] RB(earlier)
[ud] "(earlier<root> / earlier)"
[fourlang] "(earlier<root> / earlier)"

NNP -> Warrenton_NNP
[string] Warrenton
[tree] NNP(Warrenton)
[ud] "(Warrenton<root> / Warrenton)"
[fourlang] "(Warrenton<root> / Warrenton)"

NNS -> expenditures_NNS
[string] expenditures
[tree] NNS(expenditures)
[ud] "(expenditures<root> / expenditures)"
[fourlang] "(expenditures<root> / expenditures)"

NNS -> practitioners_NNS
[string] practitioners
[tree] NNS(practitioners)
[ud] "(practitioners<root> / practitioners)"
[fourlang] "(practitioners<root> / practitioners)"

NNP -> Moleculon_NNP
[string] Moleculon
[tree] NNP(Moleculon)
[ud] "(Moleculon<root> / Moleculon)"
[fourlang] "(Moleculon<root> / Moleculon)"

IN -> over_IN
[string] over
[tree] IN(over)
[ud] "(over<root> / over)"
[fourlang] "(over<root> / over)"

NN -> chance_NN
[string] chance
[tree] NN(chance)
[ud] "(chance<root> / chance)"
[fourlang] "(chance<root> / chance)"

DT -> the_DT
[string] the
[tree] DT(the)
[ud] "(the<root> / the)"
[fourlang] "(the<root> / the)"

JJ -> average_JJ
[string] average
[tree] JJ(average)
[ud] "(average<root> / average)"
[fourlang] "(average<root> / average)"

NNP -> Carney_NNP
[string] Carney
[tree] NNP(Carney)
[ud] "(Carney<root> / Carney)"
[fourlang] "(Carney<root> / Carney)"

NNS -> others_NNS
[string] others
[tree] NNS(others)
[ud] "(others<root> / others)"
[fourlang] "(others<root> / others)"

NNS -> possessions_NNS
[string] possessions
[tree] NNS(possessions)
[ud] "(possessions<root> / possessions)"
[fourlang] "(possessions<root> / possessions)"

NNP -> Greenwich_NNP
[string] Greenwich
[tree] NNP(Greenwich)
[ud] "(Greenwich<root> / Greenwich)"
[fourlang] "(Greenwich<root> / Greenwich)"

NNP -> Marchand_NNP
[string] Marchand
[tree] NNP(Marchand)
[ud] "(Marchand<root> / Marchand)"
[fourlang] "(Marchand<root> / Marchand)"

JJ -> Varying_JJ
[string] Varying
[tree] JJ(Varying)
[ud] "(Varying<root> / Varying)"
[fourlang] "(Varying<root> / Varying)"

JJ -> fiscal_JJ
[string] fiscal
[tree] JJ(fiscal)
[ud] "(fiscal<root> / fiscal)"
[fourlang] "(fiscal<root> / fiscal)"

NN -> CREATORSQS_NN
[string] CREATORSQS
[tree] NN(CREATORSQS)
[ud] "(CREATORSQS<root> / CREATORSQS)"
[fourlang] "(CREATORSQS<root> / CREATORSQS)"

VB -> exploit_VB
[string] exploit
[tree] VB(exploit)
[ud] "(exploit<root> / exploit)"
[fourlang] "(exploit<root> / exploit)"

NN -> day_NN
[string] day
[tree] NN(day)
[ud] "(day<root> / day)"
[fourlang] "(day<root> / day)"

NNS -> devices_NNS
[string] devices
[tree] NNS(devices)
[ud] "(devices<root> / devices)"
[fourlang] "(devices<root> / devices)"

NN -> night_NN
[string] night
[tree] NN(night)
[ud] "(night<root> / night)"
[fourlang] "(night<root> / night)"

NNP -> PLC_NNP
[string] PLC
[tree] NNP(PLC)
[ud] "(PLC<root> / PLC)"
[fourlang] "(PLC<root> / PLC)"

JJ -> regional_JJ
[string] regional
[tree] JJ(regional)
[ud] "(regional<root> / regional)"
[fourlang] "(regional<root> / regional)"

JJ -> further_JJ
[string] further
[tree] JJ(further)
[ud] "(further<root> / further)"
[fourlang] "(further<root> / further)"

JJ -> true_JJ
[string] true
[tree] JJ(true)
[ud] "(true<root> / true)"
[fourlang] "(true<root> / true)"

JJ -> unfocused_JJ
[string] unfocused
[tree] JJ(unfocused)
[ud] "(unfocused<root> / unfocused)"
[fourlang] "(unfocused<root> / unfocused)"

VBG -> riding_VBG
[string] riding
[tree] VBG(riding)
[ud] "(riding<root> / riding)"
[fourlang] "(riding<root> / riding)"

VB -> occur_VB
[string] occur
[tree] VB(occur)
[ud] "(occur<root> / occur)"
[fourlang] "(occur<root> / occur)"

NN -> prepayment_NN
[string] prepayment
[tree] NN(prepayment)
[ud] "(prepayment<root> / prepayment)"
[fourlang] "(prepayment<root> / prepayment)"

NNP -> Sasaki_NNP
[string] Sasaki
[tree] NNP(Sasaki)
[ud] "(Sasaki<root> / Sasaki)"
[fourlang] "(Sasaki<root> / Sasaki)"

NNS -> partisans_NNS
[string] partisans
[tree] NNS(partisans)
[ud] "(partisans<root> / partisans)"
[fourlang] "(partisans<root> / partisans)"

VB -> regenerate_VB
[string] regenerate
[tree] VB(regenerate)
[ud] "(regenerate<root> / regenerate)"
[fourlang] "(regenerate<root> / regenerate)"

NN -> shelter_NN
[string] shelter
[tree] NN(shelter)
[ud] "(shelter<root> / shelter)"
[fourlang] "(shelter<root> / shelter)"

NNP -> Ginnie_NNP
[string] Ginnie
[tree] NNP(Ginnie)
[ud] "(Ginnie<root> / Ginnie)"
[fourlang] "(Ginnie<root> / Ginnie)"

NNP -> Magna_NNP
[string] Magna
[tree] NNP(Magna)
[ud] "(Magna<root> / Magna)"
[fourlang] "(Magna<root> / Magna)"

NN -> ringer_NN
[string] ringer
[tree] NN(ringer)
[ud] "(ringer<root> / ringer)"
[fourlang] "(ringer<root> / ringer)"

NNS -> lawyers_NNS
[string] lawyers
[tree] NNS(lawyers)
[ud] "(lawyers<root> / lawyers)"
[fourlang] "(lawyers<root> / lawyers)"

NNP -> Garanti_NNP
[string] Garanti
[tree] NNP(Garanti)
[ud] "(Garanti<root> / Garanti)"
[fourlang] "(Garanti<root> / Garanti)"

NNP -> Hostess_NNP
[string] Hostess
[tree] NNP(Hostess)
[ud] "(Hostess<root> / Hostess)"
[fourlang] "(Hostess<root> / Hostess)"

NN -> belfry_NN
[string] belfry
[tree] NN(belfry)
[ud] "(belfry<root> / belfry)"
[fourlang] "(belfry<root> / belfry)"

NN -> luck_NN
[string] luck
[tree] NN(luck)
[ud] "(luck<root> / luck)"
[fourlang] "(luck<root> / luck)"

RB -> so_RB
[string] so
[tree] RB(so)
[ud] "(so<root> / so)"
[fourlang] "(so<root> / so)"

VBN -> drawn_VBN
[string] drawn
[tree] VBN(drawn)
[ud] "(drawn<root> / drawn)"
[fourlang] "(drawn<root> / drawn)"

VBP -> drive_VBP
[string] drive
[tree] VBP(drive)
[ud] "(drive<root> / drive)"
[fourlang] "(drive<root> / drive)"

NN -> compound_NN
[string] compound
[tree] NN(compound)
[ud] "(compound<root> / compound)"
[fourlang] "(compound<root> / compound)"

NNP -> Merc_NNP
[string] Merc
[tree] NNP(Merc)
[ud] "(Merc<root> / Merc)"
[fourlang] "(Merc<root> / Merc)"

NN -> excess_NN
[string] excess
[tree] NN(excess)
[ud] "(excess<root> / excess)"
[fourlang] "(excess<root> / excess)"

NNP -> Structural_NNP
[string] Structural
[tree] NNP(Structural)
[ud] "(Structural<root> / Structural)"
[fourlang] "(Structural<root> / Structural)"

NN -> capacity_NN
[string] capacity
[tree] NN(capacity)
[ud] "(capacity<root> / capacity)"
[fourlang] "(capacity<root> / capacity)"

NN -> suit_NN
[string] suit
[tree] NN(suit)
[ud] "(suit<root> / suit)"
[fourlang] "(suit<root> / suit)"

NN -> repayment_NN
[string] repayment
[tree] NN(repayment)
[ud] "(repayment<root> / repayment)"
[fourlang] "(repayment<root> / repayment)"

NNS -> Skills_NNS
[string] Skills
[tree] NNS(Skills)
[ud] "(Skills<root> / Skills)"
[fourlang] "(Skills<root> / Skills)"

JJ -> preHYPHENCommunist_JJ
[string] preHYPHENCommunist
[tree] JJ(preHYPHENCommunist)
[ud] "(preHYPHENCommunist<root> / preHYPHENCommunist)"
[fourlang] "(preHYPHENCommunist<root> / preHYPHENCommunist)"

NNS -> feet_NNS
[string] feet
[tree] NNS(feet)
[ud] "(feet<root> / feet)"
[fourlang] "(feet<root> / feet)"

NN -> manufacturing_NN
[string] manufacturing
[tree] NN(manufacturing)
[ud] "(manufacturing<root> / manufacturing)"
[fourlang] "(manufacturing<root> / manufacturing)"

NN -> session_NN
[string] session
[tree] NN(session)
[ud] "(session<root> / session)"
[fourlang] "(session<root> / session)"

NNP -> Committee_NNP
[string] Committee
[tree] NNP(Committee)
[ud] "(Committee<root> / Committee)"
[fourlang] "(Committee<root> / Committee)"

NN -> promotion_NN
[string] promotion
[tree] NN(promotion)
[ud] "(promotion<root> / promotion)"
[fourlang] "(promotion<root> / promotion)"

NN -> cult_NN
[string] cult
[tree] NN(cult)
[ud] "(cult<root> / cult)"
[fourlang] "(cult<root> / cult)"

NN -> stockHYPHENmarket_NN
[string] stockHYPHENmarket
[tree] NN(stockHYPHENmarket)
[ud] "(stockHYPHENmarket<root> / stockHYPHENmarket)"
[fourlang] "(stockHYPHENmarket<root> / stockHYPHENmarket)"

NNP -> NEC_NNP
[string] NEC
[tree] NNP(NEC)
[ud] "(NEC<root> / NEC)"
[fourlang] "(NEC<root> / NEC)"

NNP -> Reed_NNP
[string] Reed
[tree] NNP(Reed)
[ud] "(Reed<root> / Reed)"
[fourlang] "(Reed<root> / Reed)"

VB -> choose_VB
[string] choose
[tree] VB(choose)
[ud] "(choose<root> / choose)"
[fourlang] "(choose<root> / choose)"

JJ -> great_JJ
[string] great
[tree] JJ(great)
[ud] "(great<root> / great)"
[fourlang] "(great<root> / great)"

VBZ -> wants_VBZ
[string] wants
[tree] VBZ(wants)
[ud] "(wants<root> / wants)"
[fourlang] "(wants<root> / wants)"

NN -> toilet_NN
[string] toilet
[tree] NN(toilet)
[ud] "(toilet<root> / toilet)"
[fourlang] "(toilet<root> / toilet)"

NNS -> chemicals_NNS
[string] chemicals
[tree] NNS(chemicals)
[ud] "(chemicals<root> / chemicals)"
[fourlang] "(chemicals<root> / chemicals)"

NN -> closeHYPHENup_NN
[string] closeHYPHENup
[tree] NN(closeHYPHENup)
[ud] "(closeHYPHENup<root> / closeHYPHENup)"
[fourlang] "(closeHYPHENup<root> / closeHYPHENup)"

JJ -> yearHYPHENtoHYPHENyear_JJ
[string] yearHYPHENtoHYPHENyear
[tree] JJ(yearHYPHENtoHYPHENyear)
[ud] "(yearHYPHENtoHYPHENyear<root> / yearHYPHENtoHYPHENyear)"
[fourlang] "(yearHYPHENtoHYPHENyear<root> / yearHYPHENtoHYPHENyear)"

NNP -> HPERIODNPERIOD_NNP
[string] HPERIODNPERIOD
[tree] NNP(HPERIODNPERIOD)
[ud] "(HPERIODNPERIOD<root> / HPERIODNPERIOD)"
[fourlang] "(HPERIODNPERIOD<root> / HPERIODNPERIOD)"

NNS -> limits_NNS
[string] limits
[tree] NNS(limits)
[ud] "(limits<root> / limits)"
[fourlang] "(limits<root> / limits)"

VBZ -> employs_VBZ
[string] employs
[tree] VBZ(employs)
[ud] "(employs<root> / employs)"
[fourlang] "(employs<root> / employs)"

JJ -> possible_JJ
[string] possible
[tree] JJ(possible)
[ud] "(possible<root> / possible)"
[fourlang] "(possible<root> / possible)"

VBN -> renovated_VBN
[string] renovated
[tree] VBN(renovated)
[ud] "(renovated<root> / renovated)"
[fourlang] "(renovated<root> / renovated)"

NNS -> investors_NNS
[string] investors
[tree] NNS(investors)
[ud] "(investors<root> / investors)"
[fourlang] "(investors<root> / investors)"

NNP -> Tiny_NNP
[string] Tiny
[tree] NNP(Tiny)
[ud] "(Tiny<root> / Tiny)"
[fourlang] "(Tiny<root> / Tiny)"

JJ -> sometimesHYPHENexhausting_JJ
[string] sometimesHYPHENexhausting
[tree] JJ(sometimesHYPHENexhausting)
[ud] "(sometimesHYPHENexhausting<root> / sometimesHYPHENexhausting)"
[fourlang] "(sometimesHYPHENexhausting<root> / sometimesHYPHENexhausting)"

NN -> gamut_NN
[string] gamut
[tree] NN(gamut)
[ud] "(gamut<root> / gamut)"
[fourlang] "(gamut<root> / gamut)"

VB -> induce_VB
[string] induce
[tree] VB(induce)
[ud] "(induce<root> / induce)"
[fourlang] "(induce<root> / induce)"

JJ -> DIGITDIGITHYPHENcentHYPHENanHYPHENhour_JJ
[string] DIGITDIGITHYPHENcentHYPHENanHYPHENhour
[tree] JJ(DIGITDIGITHYPHENcentHYPHENanHYPHENhour)
[ud] "(DIGITDIGITHYPHENcentHYPHENanHYPHENhour<root> / DIGITDIGITHYPHENcentHYPHENanHYPHENhour)"
[fourlang] "(DIGITDIGITHYPHENcentHYPHENanHYPHENhour<root> / DIGITDIGITHYPHENcentHYPHENanHYPHENhour)"

NN -> logic_NN
[string] logic
[tree] NN(logic)
[ud] "(logic<root> / logic)"
[fourlang] "(logic<root> / logic)"

VB -> trash_VB
[string] trash
[tree] VB(trash)
[ud] "(trash<root> / trash)"
[fourlang] "(trash<root> / trash)"

NNS -> defects_NNS
[string] defects
[tree] NNS(defects)
[ud] "(defects<root> / defects)"
[fourlang] "(defects<root> / defects)"

NNP -> Valley_NNP
[string] Valley
[tree] NNP(Valley)
[ud] "(Valley<root> / Valley)"
[fourlang] "(Valley<root> / Valley)"

NNS -> electronics_NNS
[string] electronics
[tree] NNS(electronics)
[ud] "(electronics<root> / electronics)"
[fourlang] "(electronics<root> / electronics)"

JJ -> shortHYPHENterm_JJ
[string] shortHYPHENterm
[tree] JJ(shortHYPHENterm)
[ud] "(shortHYPHENterm<root> / shortHYPHENterm)"
[fourlang] "(shortHYPHENterm<root> / shortHYPHENterm)"

NNS -> genes_NNS
[string] genes
[tree] NNS(genes)
[ud] "(genes<root> / genes)"
[fourlang] "(genes<root> / genes)"

NNP -> Ltd_NNP
[string] Ltd
[tree] NNP(Ltd)
[ud] "(Ltd<root> / Ltd)"
[fourlang] "(Ltd<root> / Ltd)"

MD -> ought_MD
[string] ought
[tree] MD(ought)
[ud] "(ought<root> / ought)"
[fourlang] "(ought<root> / ought)"

JJ -> tight_JJ
[string] tight
[tree] JJ(tight)
[ud] "(tight<root> / tight)"
[fourlang] "(tight<root> / tight)"

NNP -> Philippine_NNP
[string] Philippine
[tree] NNP(Philippine)
[ud] "(Philippine<root> / Philippine)"
[fourlang] "(Philippine<root> / Philippine)"

NNP -> Anglia_NNP
[string] Anglia
[tree] NNP(Anglia)
[ud] "(Anglia<root> / Anglia)"
[fourlang] "(Anglia<root> / Anglia)"

NNPS -> Resources_NNPS
[string] Resources
[tree] NNPS(Resources)
[ud] "(Resources<root> / Resources)"
[fourlang] "(Resources<root> / Resources)"

JJ -> Personal_JJ
[string] Personal
[tree] JJ(Personal)
[ud] "(Personal<root> / Personal)"
[fourlang] "(Personal<root> / Personal)"

NN -> firmness_NN
[string] firmness
[tree] NN(firmness)
[ud] "(firmness<root> / firmness)"
[fourlang] "(firmness<root> / firmness)"

NNP -> CoPERIOD_NNP
[string] CoPERIOD
[tree] NNP(CoPERIOD)
[ud] "(CoPERIOD<root> / CoPERIOD)"
[fourlang] "(CoPERIOD<root> / CoPERIOD)"

NNP -> Beirut_NNP
[string] Beirut
[tree] NNP(Beirut)
[ud] "(Beirut<root> / Beirut)"
[fourlang] "(Beirut<root> / Beirut)"

VBP -> call_VBP
[string] call
[tree] VBP(call)
[ud] "(call<root> / call)"
[fourlang] "(call<root> / call)"

NNP -> Crum_NNP
[string] Crum
[tree] NNP(Crum)
[ud] "(Crum<root> / Crum)"
[fourlang] "(Crum<root> / Crum)"

NNP -> Audit_NNP
[string] Audit
[tree] NNP(Audit)
[ud] "(Audit<root> / Audit)"
[fourlang] "(Audit<root> / Audit)"

VBZ -> considers_VBZ
[string] considers
[tree] VBZ(considers)
[ud] "(considers<root> / considers)"
[fourlang] "(considers<root> / considers)"

VBG -> talking_VBG
[string] talking
[tree] VBG(talking)
[ud] "(talking<root> / talking)"
[fourlang] "(talking<root> / talking)"

NNP -> The_NNP
[string] The
[tree] NNP(The)
[ud] "(The<root> / The)"
[fourlang] "(The<root> / The)"

NN -> purchasing_NN
[string] purchasing
[tree] NN(purchasing)
[ud] "(purchasing<root> / purchasing)"
[fourlang] "(purchasing<root> / purchasing)"

NNP -> OrePERIOD_NNP
[string] OrePERIOD
[tree] NNP(OrePERIOD)
[ud] "(OrePERIOD<root> / OrePERIOD)"
[fourlang] "(OrePERIOD<root> / OrePERIOD)"

NN -> producer_NN
[string] producer
[tree] NN(producer)
[ud] "(producer<root> / producer)"
[fourlang] "(producer<root> / producer)"

NNS -> auctions_NNS
[string] auctions
[tree] NNS(auctions)
[ud] "(auctions<root> / auctions)"
[fourlang] "(auctions<root> / auctions)"

NNP -> Arighi_NNP
[string] Arighi
[tree] NNP(Arighi)
[ud] "(Arighi<root> / Arighi)"
[fourlang] "(Arighi<root> / Arighi)"

JJ -> friendly_JJ
[string] friendly
[tree] JJ(friendly)
[ud] "(friendly<root> / friendly)"
[fourlang] "(friendly<root> / friendly)"

NN -> sympathy_NN
[string] sympathy
[tree] NN(sympathy)
[ud] "(sympathy<root> / sympathy)"
[fourlang] "(sympathy<root> / sympathy)"

IN -> throughout_IN
[string] throughout
[tree] IN(throughout)
[ud] "(throughout<root> / throughout)"
[fourlang] "(throughout<root> / throughout)"

NNP -> Greenville_NNP
[string] Greenville
[tree] NNP(Greenville)
[ud] "(Greenville<root> / Greenville)"
[fourlang] "(Greenville<root> / Greenville)"

NNS -> years_NNS
[string] years
[tree] NNS(years)
[ud] "(years<root> / years)"
[fourlang] "(years<root> / years)"

NN -> world_NN
[string] world
[tree] NN(world)
[ud] "(world<root> / world)"
[fourlang] "(world<root> / world)"

VBZ -> owns_VBZ
[string] owns
[tree] VBZ(owns)
[ud] "(owns<root> / owns)"
[fourlang] "(owns<root> / owns)"

NN -> boutique_NN
[string] boutique
[tree] NN(boutique)
[ud] "(boutique<root> / boutique)"
[fourlang] "(boutique<root> / boutique)"

NNS -> supplies_NNS
[string] supplies
[tree] NNS(supplies)
[ud] "(supplies<root> / supplies)"
[fourlang] "(supplies<root> / supplies)"

RBR -> more_RBR
[string] more
[tree] RBR(more)
[ud] "(more<root> / more)"
[fourlang] "(more<root> / more)"

NNP -> IncPERIOD_NNP
[string] IncPERIOD
[tree] NNP(IncPERIOD)
[ud] "(IncPERIOD<root> / IncPERIOD)"
[fourlang] "(IncPERIOD<root> / IncPERIOD)"

NNP -> FPERIODHPERIOD_NNP
[string] FPERIODHPERIOD
[tree] NNP(FPERIODHPERIOD)
[ud] "(FPERIODHPERIOD<root> / FPERIODHPERIOD)"
[fourlang] "(FPERIODHPERIOD<root> / FPERIODHPERIOD)"

NNP -> Maughan_NNP
[string] Maughan
[tree] NNP(Maughan)
[ud] "(Maughan<root> / Maughan)"
[fourlang] "(Maughan<root> / Maughan)"

NN -> reading_NN
[string] reading
[tree] NN(reading)
[ud] "(reading<root> / reading)"
[fourlang] "(reading<root> / reading)"

NN -> creation_NN
[string] creation
[tree] NN(creation)
[ud] "(creation<root> / creation)"
[fourlang] "(creation<root> / creation)"

NNP -> OctPERIOD_NNP
[string] OctPERIOD
[tree] NNP(OctPERIOD)
[ud] "(OctPERIOD<root> / OctPERIOD)"
[fourlang] "(OctPERIOD<root> / OctPERIOD)"

NN -> liability_NN
[string] liability
[tree] NN(liability)
[ud] "(liability<root> / liability)"
[fourlang] "(liability<root> / liability)"

JJ -> superHYPHENabsorbent_JJ
[string] superHYPHENabsorbent
[tree] JJ(superHYPHENabsorbent)
[ud] "(superHYPHENabsorbent<root> / superHYPHENabsorbent)"
[fourlang] "(superHYPHENabsorbent<root> / superHYPHENabsorbent)"

VBD -> proposed_VBD
[string] proposed
[tree] VBD(proposed)
[ud] "(proposed<root> / proposed)"
[fourlang] "(proposed<root> / proposed)"

NNS -> Patients_NNS
[string] Patients
[tree] NNS(Patients)
[ud] "(Patients<root> / Patients)"
[fourlang] "(Patients<root> / Patients)"

NNP -> Glenn_NNP
[string] Glenn
[tree] NNP(Glenn)
[ud] "(Glenn<root> / Glenn)"
[fourlang] "(Glenn<root> / Glenn)"

NNS -> Citizens_NNS
[string] Citizens
[tree] NNS(Citizens)
[ud] "(Citizens<root> / Citizens)"
[fourlang] "(Citizens<root> / Citizens)"

NNP -> National_NNP
[string] National
[tree] NNP(National)
[ud] "(National<root> / National)"
[fourlang] "(National<root> / National)"

NNP -> ASSOCIATION_NNP
[string] ASSOCIATION
[tree] NNP(ASSOCIATION)
[ud] "(ASSOCIATION<root> / ASSOCIATION)"
[fourlang] "(ASSOCIATION<root> / ASSOCIATION)"

JJ -> midrange_JJ
[string] midrange
[tree] JJ(midrange)
[ud] "(midrange<root> / midrange)"
[fourlang] "(midrange<root> / midrange)"

JJ -> Precious_JJ
[string] Precious
[tree] JJ(Precious)
[ud] "(Precious<root> / Precious)"
[fourlang] "(Precious<root> / Precious)"

VBN -> coupled_VBN
[string] coupled
[tree] VBN(coupled)
[ud] "(coupled<root> / coupled)"
[fourlang] "(coupled<root> / coupled)"

NNS -> performers_NNS
[string] performers
[tree] NNS(performers)
[ud] "(performers<root> / performers)"
[fourlang] "(performers<root> / performers)"

VB -> disseminate_VB
[string] disseminate
[tree] VB(disseminate)
[ud] "(disseminate<root> / disseminate)"
[fourlang] "(disseminate<root> / disseminate)"

NNS -> offenders_NNS
[string] offenders
[tree] NNS(offenders)
[ud] "(offenders<root> / offenders)"
[fourlang] "(offenders<root> / offenders)"

NN -> seat_NN
[string] seat
[tree] NN(seat)
[ud] "(seat<root> / seat)"
[fourlang] "(seat<root> / seat)"

NNS -> industrials_NNS
[string] industrials
[tree] NNS(industrials)
[ud] "(industrials<root> / industrials)"
[fourlang] "(industrials<root> / industrials)"

NN -> aircraft_NN
[string] aircraft
[tree] NN(aircraft)
[ud] "(aircraft<root> / aircraft)"
[fourlang] "(aircraft<root> / aircraft)"

NNS -> chunks_NNS
[string] chunks
[tree] NNS(chunks)
[ud] "(chunks<root> / chunks)"
[fourlang] "(chunks<root> / chunks)"

NNP -> Nekoosa_NNP
[string] Nekoosa
[tree] NNP(Nekoosa)
[ud] "(Nekoosa<root> / Nekoosa)"
[fourlang] "(Nekoosa<root> / Nekoosa)"

NN -> fact_NN
[string] fact
[tree] NN(fact)
[ud] "(fact<root> / fact)"
[fourlang] "(fact<root> / fact)"

NNP -> Dobson_NNP
[string] Dobson
[tree] NNP(Dobson)
[ud] "(Dobson<root> / Dobson)"
[fourlang] "(Dobson<root> / Dobson)"

NNS -> issues_NNS
[string] issues
[tree] NNS(issues)
[ud] "(issues<root> / issues)"
[fourlang] "(issues<root> / issues)"

JJ -> Great_JJ
[string] Great
[tree] JJ(Great)
[ud] "(Great<root> / Great)"
[fourlang] "(Great<root> / Great)"

NNP -> Thunderbird_NNP
[string] Thunderbird
[tree] NNP(Thunderbird)
[ud] "(Thunderbird<root> / Thunderbird)"
[fourlang] "(Thunderbird<root> / Thunderbird)"

NNS -> terms_NNS
[string] terms
[tree] NNS(terms)
[ud] "(terms<root> / terms)"
[fourlang] "(terms<root> / terms)"

NNS -> bellringers_NNS
[string] bellringers
[tree] NNS(bellringers)
[ud] "(bellringers<root> / bellringers)"
[fourlang] "(bellringers<root> / bellringers)"

JJ -> legislative_JJ
[string] legislative
[tree] JJ(legislative)
[ud] "(legislative<root> / legislative)"
[fourlang] "(legislative<root> / legislative)"

RB -> soon_RB
[string] soon
[tree] RB(soon)
[ud] "(soon<root> / soon)"
[fourlang] "(soon<root> / soon)"

NN -> bickering_NN
[string] bickering
[tree] NN(bickering)
[ud] "(bickering<root> / bickering)"
[fourlang] "(bickering<root> / bickering)"

JJ -> nuclear_JJ
[string] nuclear
[tree] JJ(nuclear)
[ud] "(nuclear<root> / nuclear)"
[fourlang] "(nuclear<root> / nuclear)"

NN -> holder_NN
[string] holder
[tree] NN(holder)
[ud] "(holder<root> / holder)"
[fourlang] "(holder<root> / holder)"

NNPS -> Productions_NNPS
[string] Productions
[tree] NNPS(Productions)
[ud] "(Productions<root> / Productions)"
[fourlang] "(Productions<root> / Productions)"

NN -> line_NN
[string] line
[tree] NN(line)
[ud] "(line<root> / line)"
[fourlang] "(line<root> / line)"

NNS -> obligations_NNS
[string] obligations
[tree] NNS(obligations)
[ud] "(obligations<root> / obligations)"
[fourlang] "(obligations<root> / obligations)"

NN -> lawsuit_NN
[string] lawsuit
[tree] NN(lawsuit)
[ud] "(lawsuit<root> / lawsuit)"
[fourlang] "(lawsuit<root> / lawsuit)"

JJ -> unwary_JJ
[string] unwary
[tree] JJ(unwary)
[ud] "(unwary<root> / unwary)"
[fourlang] "(unwary<root> / unwary)"

NNPS -> Markets_NNPS
[string] Markets
[tree] NNPS(Markets)
[ud] "(Markets<root> / Markets)"
[fourlang] "(Markets<root> / Markets)"

NNP -> FreeportHYPHENMcMoRan_NNP
[string] FreeportHYPHENMcMoRan
[tree] NNP(FreeportHYPHENMcMoRan)
[ud] "(FreeportHYPHENMcMoRan<root> / FreeportHYPHENMcMoRan)"
[fourlang] "(FreeportHYPHENMcMoRan<root> / FreeportHYPHENMcMoRan)"

NNS -> watches_NNS
[string] watches
[tree] NNS(watches)
[ud] "(watches<root> / watches)"
[fourlang] "(watches<root> / watches)"

NN -> public_NN
[string] public
[tree] NN(public)
[ud] "(public<root> / public)"
[fourlang] "(public<root> / public)"

NNP -> Singapore_NNP
[string] Singapore
[tree] NNP(Singapore)
[ud] "(Singapore<root> / Singapore)"
[fourlang] "(Singapore<root> / Singapore)"

NN -> privacy_NN
[string] privacy
[tree] NN(privacy)
[ud] "(privacy<root> / privacy)"
[fourlang] "(privacy<root> / privacy)"

NN -> anticipation_NN
[string] anticipation
[tree] NN(anticipation)
[ud] "(anticipation<root> / anticipation)"
[fourlang] "(anticipation<root> / anticipation)"

NN -> warning_NN
[string] warning
[tree] NN(warning)
[ud] "(warning<root> / warning)"
[fourlang] "(warning<root> / warning)"

NNS -> multiples_NNS
[string] multiples
[tree] NNS(multiples)
[ud] "(multiples<root> / multiples)"
[fourlang] "(multiples<root> / multiples)"

NNP -> Rate_NNP
[string] Rate
[tree] NNP(Rate)
[ud] "(Rate<root> / Rate)"
[fourlang] "(Rate<root> / Rate)"

NNP -> RPERIODDPERIOD_NNP
[string] RPERIODDPERIOD
[tree] NNP(RPERIODDPERIOD)
[ud] "(RPERIODDPERIOD<root> / RPERIODDPERIOD)"
[fourlang] "(RPERIODDPERIOD<root> / RPERIODDPERIOD)"

NNP -> Lentjes_NNP
[string] Lentjes
[tree] NNP(Lentjes)
[ud] "(Lentjes<root> / Lentjes)"
[fourlang] "(Lentjes<root> / Lentjes)"

NNP -> Monitor_NNP
[string] Monitor
[tree] NNP(Monitor)
[ud] "(Monitor<root> / Monitor)"
[fourlang] "(Monitor<root> / Monitor)"

JJ -> blueHYPHENcollar_JJ
[string] blueHYPHENcollar
[tree] JJ(blueHYPHENcollar)
[ud] "(blueHYPHENcollar<root> / blueHYPHENcollar)"
[fourlang] "(blueHYPHENcollar<root> / blueHYPHENcollar)"

NNP -> Health_NNP
[string] Health
[tree] NNP(Health)
[ud] "(Health<root> / Health)"
[fourlang] "(Health<root> / Health)"

NN -> source_NN
[string] source
[tree] NN(source)
[ud] "(source<root> / source)"
[fourlang] "(source<root> / source)"

NNS -> Rumors_NNS
[string] Rumors
[tree] NNS(Rumors)
[ud] "(Rumors<root> / Rumors)"
[fourlang] "(Rumors<root> / Rumors)"

JJ -> amusing_JJ
[string] amusing
[tree] JJ(amusing)
[ud] "(amusing<root> / amusing)"
[fourlang] "(amusing<root> / amusing)"

JJ -> ample_JJ
[string] ample
[tree] JJ(ample)
[ud] "(ample<root> / ample)"
[fourlang] "(ample<root> / ample)"

NNP -> Louisiana_NNP
[string] Louisiana
[tree] NNP(Louisiana)
[ud] "(Louisiana<root> / Louisiana)"
[fourlang] "(Louisiana<root> / Louisiana)"

VBD -> narrowed_VBD
[string] narrowed
[tree] VBD(narrowed)
[ud] "(narrowed<root> / narrowed)"
[fourlang] "(narrowed<root> / narrowed)"

NNS -> sanctions_NNS
[string] sanctions
[tree] NNS(sanctions)
[ud] "(sanctions<root> / sanctions)"
[fourlang] "(sanctions<root> / sanctions)"

VB -> roll_VB
[string] roll
[tree] VB(roll)
[ud] "(roll<root> / roll)"
[fourlang] "(roll<root> / roll)"

NN -> escort_NN
[string] escort
[tree] NN(escort)
[ud] "(escort<root> / escort)"
[fourlang] "(escort<root> / escort)"

NN -> nose_NN
[string] nose
[tree] NN(nose)
[ud] "(nose<root> / nose)"
[fourlang] "(nose<root> / nose)"

NN -> reader_NN
[string] reader
[tree] NN(reader)
[ud] "(reader<root> / reader)"
[fourlang] "(reader<root> / reader)"

NN -> thrift_NN
[string] thrift
[tree] NN(thrift)
[ud] "(thrift<root> / thrift)"
[fourlang] "(thrift<root> / thrift)"

VB -> yield_VB
[string] yield
[tree] VB(yield)
[ud] "(yield<root> / yield)"
[fourlang] "(yield<root> / yield)"

JJ -> nominal_JJ
[string] nominal
[tree] JJ(nominal)
[ud] "(nominal<root> / nominal)"
[fourlang] "(nominal<root> / nominal)"

NN -> jail_NN
[string] jail
[tree] NN(jail)
[ud] "(jail<root> / jail)"
[fourlang] "(jail<root> / jail)"

JJ -> quiet_JJ
[string] quiet
[tree] JJ(quiet)
[ud] "(quiet<root> / quiet)"
[fourlang] "(quiet<root> / quiet)"

VB -> be_VB
[string] be
[tree] VB(be)
[ud] "(be<root> / be)"
[fourlang] "(be<root> / be)"

NNS -> sweaters_NNS
[string] sweaters
[tree] NNS(sweaters)
[ud] "(sweaters<root> / sweaters)"
[fourlang] "(sweaters<root> / sweaters)"

NN -> parent_NN
[string] parent
[tree] NN(parent)
[ud] "(parent<root> / parent)"
[fourlang] "(parent<root> / parent)"

VB -> move_VB
[string] move
[tree] VB(move)
[ud] "(move<root> / move)"
[fourlang] "(move<root> / move)"

JJ -> monthly_JJ
[string] monthly
[tree] JJ(monthly)
[ud] "(monthly<root> / monthly)"
[fourlang] "(monthly<root> / monthly)"

NNS -> cracks_NNS
[string] cracks
[tree] NNS(cracks)
[ud] "(cracks<root> / cracks)"
[fourlang] "(cracks<root> / cracks)"

NNPS -> BILLS_NNPS
[string] BILLS
[tree] NNPS(BILLS)
[ud] "(BILLS<root> / BILLS)"
[fourlang] "(BILLS<root> / BILLS)"

VBP -> evoke_VBP
[string] evoke
[tree] VBP(evoke)
[ud] "(evoke<root> / evoke)"
[fourlang] "(evoke<root> / evoke)"

NN -> Backseat_NN
[string] Backseat
[tree] NN(Backseat)
[ud] "(Backseat<root> / Backseat)"
[fourlang] "(Backseat<root> / Backseat)"

NNP -> System_NNP
[string] System
[tree] NNP(System)
[ud] "(System<root> / System)"
[fourlang] "(System<root> / System)"

NN -> star_NN
[string] star
[tree] NN(star)
[ud] "(star<root> / star)"
[fourlang] "(star<root> / star)"

NN -> chairman_NN
[string] chairman
[tree] NN(chairman)
[ud] "(chairman<root> / chairman)"
[fourlang] "(chairman<root> / chairman)"

NN -> barrel_NN
[string] barrel
[tree] NN(barrel)
[ud] "(barrel<root> / barrel)"
[fourlang] "(barrel<root> / barrel)"

NNS -> members_NNS
[string] members
[tree] NNS(members)
[ud] "(members<root> / members)"
[fourlang] "(members<root> / members)"

NNP -> NPERIODYPERIOD_NNP
[string] NPERIODYPERIOD
[tree] NNP(NPERIODYPERIOD)
[ud] "(NPERIODYPERIOD<root> / NPERIODYPERIOD)"
[fourlang] "(NPERIODYPERIOD<root> / NPERIODYPERIOD)"

NN -> page_NN
[string] page
[tree] NN(page)
[ud] "(page<root> / page)"
[fourlang] "(page<root> / page)"

NNP -> Sloan_NNP
[string] Sloan
[tree] NNP(Sloan)
[ud] "(Sloan<root> / Sloan)"
[fourlang] "(Sloan<root> / Sloan)"

NN -> publishing_NN
[string] publishing
[tree] NN(publishing)
[ud] "(publishing<root> / publishing)"
[fourlang] "(publishing<root> / publishing)"

NN -> restriction_NN
[string] restriction
[tree] NN(restriction)
[ud] "(restriction<root> / restriction)"
[fourlang] "(restriction<root> / restriction)"

NNS -> exports_NNS
[string] exports
[tree] NNS(exports)
[ud] "(exports<root> / exports)"
[fourlang] "(exports<root> / exports)"

NNP -> Brownell_NNP
[string] Brownell
[tree] NNP(Brownell)
[ud] "(Brownell<root> / Brownell)"
[fourlang] "(Brownell<root> / Brownell)"

JJR -> slower_JJR
[string] slower
[tree] JJR(slower)
[ud] "(slower<root> / slower)"
[fourlang] "(slower<root> / slower)"

NNPS -> Industries_NNPS
[string] Industries
[tree] NNPS(Industries)
[ud] "(Industries<root> / Industries)"
[fourlang] "(Industries<root> / Industries)"

RB -> vice_RB
[string] vice
[tree] RB(vice)
[ud] "(vice<root> / vice)"
[fourlang] "(vice<root> / vice)"

JJR -> easier_JJR
[string] easier
[tree] JJR(easier)
[ud] "(easier<root> / easier)"
[fourlang] "(easier<root> / easier)"

NNS -> instruments_NNS
[string] instruments
[tree] NNS(instruments)
[ud] "(instruments<root> / instruments)"
[fourlang] "(instruments<root> / instruments)"

NN -> par_NN
[string] par
[tree] NN(par)
[ud] "(par<root> / par)"
[fourlang] "(par<root> / par)"

NN -> child_NN
[string] child
[tree] NN(child)
[ud] "(child<root> / child)"
[fourlang] "(child<root> / child)"

NNS -> bonuses_NNS
[string] bonuses
[tree] NNS(bonuses)
[ud] "(bonuses<root> / bonuses)"
[fourlang] "(bonuses<root> / bonuses)"

NN -> date_NN
[string] date
[tree] NN(date)
[ud] "(date<root> / date)"
[fourlang] "(date<root> / date)"

NN -> desire_NN
[string] desire
[tree] NN(desire)
[ud] "(desire<root> / desire)"
[fourlang] "(desire<root> / desire)"

JJ -> American_JJ
[string] American
[tree] JJ(American)
[ud] "(American<root> / American)"
[fourlang] "(American<root> / American)"

CD -> DIGITDIGITDIGITDIGITs_CD
[string] DIGITDIGITDIGITDIGITs
[tree] CD(DIGITDIGITDIGITDIGITs)
[ud] "(DIGITDIGITDIGITDIGITs<root> / DIGITDIGITDIGITDIGITs)"
[fourlang] "(DIGITDIGITDIGITDIGITs<root> / DIGITDIGITDIGITDIGITs)"

NNS -> meetings_NNS
[string] meetings
[tree] NNS(meetings)
[ud] "(meetings<root> / meetings)"
[fourlang] "(meetings<root> / meetings)"

NNS -> barges_NNS
[string] barges
[tree] NNS(barges)
[ud] "(barges<root> / barges)"
[fourlang] "(barges<root> / barges)"

NNP -> Virginia_NNP
[string] Virginia
[tree] NNP(Virginia)
[ud] "(Virginia<root> / Virginia)"
[fourlang] "(Virginia<root> / Virginia)"

NN -> fire_NN
[string] fire
[tree] NN(fire)
[ud] "(fire<root> / fire)"
[fourlang] "(fire<root> / fire)"

NNP -> Crane_NNP
[string] Crane
[tree] NNP(Crane)
[ud] "(Crane<root> / Crane)"
[fourlang] "(Crane<root> / Crane)"

VB -> wish_VB
[string] wish
[tree] VB(wish)
[ud] "(wish<root> / wish)"
[fourlang] "(wish<root> / wish)"

PRP -> themselves_PRP
[string] themselves
[tree] PRP(themselves)
[ud] "(themselves<root> / themselves)"
[fourlang] "(themselves<root> / themselves)"

NNP -> Indiana_NNP
[string] Indiana
[tree] NNP(Indiana)
[ud] "(Indiana<root> / Indiana)"
[fourlang] "(Indiana<root> / Indiana)"

NNP -> Redevelopment_NNP
[string] Redevelopment
[tree] NNP(Redevelopment)
[ud] "(Redevelopment<root> / Redevelopment)"
[fourlang] "(Redevelopment<root> / Redevelopment)"

NN -> company_NN
[string] company
[tree] NN(company)
[ud] "(company<root> / company)"
[fourlang] "(company<root> / company)"

NN -> censorship_NN
[string] censorship
[tree] NN(censorship)
[ud] "(censorship<root> / censorship)"
[fourlang] "(censorship<root> / censorship)"

NNP -> Senate_NNP
[string] Senate
[tree] NNP(Senate)
[ud] "(Senate<root> / Senate)"
[fourlang] "(Senate<root> / Senate)"

NNS -> papers_NNS
[string] papers
[tree] NNS(papers)
[ud] "(papers<root> / papers)"
[fourlang] "(papers<root> / papers)"

JJ -> interim_JJ
[string] interim
[tree] JJ(interim)
[ud] "(interim<root> / interim)"
[fourlang] "(interim<root> / interim)"

NN -> health_NN
[string] health
[tree] NN(health)
[ud] "(health<root> / health)"
[fourlang] "(health<root> / health)"

NNP -> Roof_NNP
[string] Roof
[tree] NNP(Roof)
[ud] "(Roof<root> / Roof)"
[fourlang] "(Roof<root> / Roof)"

NNP -> Buick_NNP
[string] Buick
[tree] NNP(Buick)
[ud] "(Buick<root> / Buick)"
[fourlang] "(Buick<root> / Buick)"

NN -> supercomputer_NN
[string] supercomputer
[tree] NN(supercomputer)
[ud] "(supercomputer<root> / supercomputer)"
[fourlang] "(supercomputer<root> / supercomputer)"

NN -> uncertainty_NN
[string] uncertainty
[tree] NN(uncertainty)
[ud] "(uncertainty<root> / uncertainty)"
[fourlang] "(uncertainty<root> / uncertainty)"

NN -> taste_NN
[string] taste
[tree] NN(taste)
[ud] "(taste<root> / taste)"
[fourlang] "(taste<root> / taste)"

NNP -> SEC_NNP
[string] SEC
[tree] NNP(SEC)
[ud] "(SEC<root> / SEC)"
[fourlang] "(SEC<root> / SEC)"

JJ -> potential_JJ
[string] potential
[tree] JJ(potential)
[ud] "(potential<root> / potential)"
[fourlang] "(potential<root> / potential)"

JJ -> supercilious_JJ
[string] supercilious
[tree] JJ(supercilious)
[ud] "(supercilious<root> / supercilious)"
[fourlang] "(supercilious<root> / supercilious)"

NNP -> FebPERIOD_NNP
[string] FebPERIOD
[tree] NNP(FebPERIOD)
[ud] "(FebPERIOD<root> / FebPERIOD)"
[fourlang] "(FebPERIOD<root> / FebPERIOD)"

VBG -> encouraging_VBG
[string] encouraging
[tree] VBG(encouraging)
[ud] "(encouraging<root> / encouraging)"
[fourlang] "(encouraging<root> / encouraging)"

NNS -> scripts_NNS
[string] scripts
[tree] NNS(scripts)
[ud] "(scripts<root> / scripts)"
[fourlang] "(scripts<root> / scripts)"

NNS -> clerics_NNS
[string] clerics
[tree] NNS(clerics)
[ud] "(clerics<root> / clerics)"
[fourlang] "(clerics<root> / clerics)"

VBG -> deliberating_VBG
[string] deliberating
[tree] VBG(deliberating)
[ud] "(deliberating<root> / deliberating)"
[fourlang] "(deliberating<root> / deliberating)"

NNS -> candidates_NNS
[string] candidates
[tree] NNS(candidates)
[ud] "(candidates<root> / candidates)"
[fourlang] "(candidates<root> / candidates)"

NN -> interbank_NN
[string] interbank
[tree] NN(interbank)
[ud] "(interbank<root> / interbank)"
[fourlang] "(interbank<root> / interbank)"

NNP -> Service_NNP
[string] Service
[tree] NNP(Service)
[ud] "(Service<root> / Service)"
[fourlang] "(Service<root> / Service)"

JJ -> Democratic_JJ
[string] Democratic
[tree] JJ(Democratic)
[ud] "(Democratic<root> / Democratic)"
[fourlang] "(Democratic<root> / Democratic)"

NN -> independence_NN
[string] independence
[tree] NN(independence)
[ud] "(independence<root> / independence)"
[fourlang] "(independence<root> / independence)"

NN -> mortgage_NN
[string] mortgage
[tree] NN(mortgage)
[ud] "(mortgage<root> / mortgage)"
[fourlang] "(mortgage<root> / mortgage)"

NNS -> firms_NNS
[string] firms
[tree] NNS(firms)
[ud] "(firms<root> / firms)"
[fourlang] "(firms<root> / firms)"

NNP -> Business_NNP
[string] Business
[tree] NNP(Business)
[ud] "(Business<root> / Business)"
[fourlang] "(Business<root> / Business)"

NNP -> Adams_NNP
[string] Adams
[tree] NNP(Adams)
[ud] "(Adams<root> / Adams)"
[fourlang] "(Adams<root> / Adams)"

RB -> tentatively_RB
[string] tentatively
[tree] RB(tentatively)
[ud] "(tentatively<root> / tentatively)"
[fourlang] "(tentatively<root> / tentatively)"

NNP -> Mass_NNP
[string] Mass
[tree] NNP(Mass)
[ud] "(Mass<root> / Mass)"
[fourlang] "(Mass<root> / Mass)"

IN -> that_IN
[string] that
[tree] IN(that)
[ud] "(that<root> / that)"
[fourlang] "(that<root> / that)"

NNP -> Air_NNP
[string] Air
[tree] NNP(Air)
[ud] "(Air<root> / Air)"
[fourlang] "(Air<root> / Air)"

NNPS -> Motors_NNPS
[string] Motors
[tree] NNPS(Motors)
[ud] "(Motors<root> / Motors)"
[fourlang] "(Motors<root> / Motors)"

VBZ -> is_VBZ
[string] is
[tree] VBZ(is)
[ud] "(is<root> / is)"
[fourlang] "(is<root> / is)"

NNS -> trucks_NNS
[string] trucks
[tree] NNS(trucks)
[ud] "(trucks<root> / trucks)"
[fourlang] "(trucks<root> / trucks)"

JJ -> illegal_JJ
[string] illegal
[tree] JJ(illegal)
[ud] "(illegal<root> / illegal)"
[fourlang] "(illegal<root> / illegal)"

VB -> hear_VB
[string] hear
[tree] VB(hear)
[ud] "(hear<root> / hear)"
[fourlang] "(hear<root> / hear)"

JJ -> fresh_JJ
[string] fresh
[tree] JJ(fresh)
[ud] "(fresh<root> / fresh)"
[fourlang] "(fresh<root> / fresh)"

NNP -> Mitchell_NNP
[string] Mitchell
[tree] NNP(Mitchell)
[ud] "(Mitchell<root> / Mitchell)"
[fourlang] "(Mitchell<root> / Mitchell)"

NNP -> Legg_NNP
[string] Legg
[tree] NNP(Legg)
[ud] "(Legg<root> / Legg)"
[fourlang] "(Legg<root> / Legg)"

NNS -> goodies_NNS
[string] goodies
[tree] NNS(goodies)
[ud] "(goodies<root> / goodies)"
[fourlang] "(goodies<root> / goodies)"

JJ -> electrical_JJ
[string] electrical
[tree] JJ(electrical)
[ud] "(electrical<root> / electrical)"
[fourlang] "(electrical<root> / electrical)"

VB -> log_VB
[string] log
[tree] VB(log)
[ud] "(log<root> / log)"
[fourlang] "(log<root> / log)"

NNS -> deeds_NNS
[string] deeds
[tree] NNS(deeds)
[ud] "(deeds<root> / deeds)"
[fourlang] "(deeds<root> / deeds)"

NNS -> Gunmen_NNS
[string] Gunmen
[tree] NNS(Gunmen)
[ud] "(Gunmen<root> / Gunmen)"
[fourlang] "(Gunmen<root> / Gunmen)"

NN -> licensing_NN
[string] licensing
[tree] NN(licensing)
[ud] "(licensing<root> / licensing)"
[fourlang] "(licensing<root> / licensing)"

JJ -> openHYPHENend_JJ
[string] openHYPHENend
[tree] JJ(openHYPHENend)
[ud] "(openHYPHENend<root> / openHYPHENend)"
[fourlang] "(openHYPHENend<root> / openHYPHENend)"

VB -> fabricate_VB
[string] fabricate
[tree] VB(fabricate)
[ud] "(fabricate<root> / fabricate)"
[fourlang] "(fabricate<root> / fabricate)"

JJ -> full_JJ
[string] full
[tree] JJ(full)
[ud] "(full<root> / full)"
[fourlang] "(full<root> / full)"

NN -> consulting_NN
[string] consulting
[tree] NN(consulting)
[ud] "(consulting<root> / consulting)"
[fourlang] "(consulting<root> / consulting)"

JJ -> sixHYPHENinch_JJ
[string] sixHYPHENinch
[tree] JJ(sixHYPHENinch)
[ud] "(sixHYPHENinch<root> / sixHYPHENinch)"
[fourlang] "(sixHYPHENinch<root> / sixHYPHENinch)"

NN -> Source_NN
[string] Source
[tree] NN(Source)
[ud] "(Source<root> / Source)"
[fourlang] "(Source<root> / Source)"

VBD -> ventilated_VBD
[string] ventilated
[tree] VBD(ventilated)
[ud] "(ventilated<root> / ventilated)"
[fourlang] "(ventilated<root> / ventilated)"

VBG -> banking_VBG
[string] banking
[tree] VBG(banking)
[ud] "(banking<root> / banking)"
[fourlang] "(banking<root> / banking)"

NNS -> effects_NNS
[string] effects
[tree] NNS(effects)
[ud] "(effects<root> / effects)"
[fourlang] "(effects<root> / effects)"

NNS -> threeHYPHENsevenths_NNS
[string] threeHYPHENsevenths
[tree] NNS(threeHYPHENsevenths)
[ud] "(threeHYPHENsevenths<root> / threeHYPHENsevenths)"
[fourlang] "(threeHYPHENsevenths<root> / threeHYPHENsevenths)"

JJ -> directHYPHENinvestment_JJ
[string] directHYPHENinvestment
[tree] JJ(directHYPHENinvestment)
[ud] "(directHYPHENinvestment<root> / directHYPHENinvestment)"
[fourlang] "(directHYPHENinvestment<root> / directHYPHENinvestment)"

NN -> buck_NN
[string] buck
[tree] NN(buck)
[ud] "(buck<root> / buck)"
[fourlang] "(buck<root> / buck)"

RP -> out_RP
[string] out
[tree] RP(out)
[ud] "(out<root> / out)"
[fourlang] "(out<root> / out)"

NN -> everything_NN
[string] everything
[tree] NN(everything)
[ud] "(everything<root> / everything)"
[fourlang] "(everything<root> / everything)"

VB -> meet_VB
[string] meet
[tree] VB(meet)
[ud] "(meet<root> / meet)"
[fourlang] "(meet<root> / meet)"

JJ -> uncharted_JJ
[string] uncharted
[tree] JJ(uncharted)
[ud] "(uncharted<root> / uncharted)"
[fourlang] "(uncharted<root> / uncharted)"

JJ -> UPERIODSPERIODHYPHENbacked_JJ
[string] UPERIODSPERIODHYPHENbacked
[tree] JJ(UPERIODSPERIODHYPHENbacked)
[ud] "(UPERIODSPERIODHYPHENbacked<root> / UPERIODSPERIODHYPHENbacked)"
[fourlang] "(UPERIODSPERIODHYPHENbacked<root> / UPERIODSPERIODHYPHENbacked)"

NNP -> International_NNP
[string] International
[tree] NNP(International)
[ud] "(International<root> / International)"
[fourlang] "(International<root> / International)"

NNS -> tallies_NNS
[string] tallies
[tree] NNS(tallies)
[ud] "(tallies<root> / tallies)"
[fourlang] "(tallies<root> / tallies)"

NNS -> pages_NNS
[string] pages
[tree] NNS(pages)
[ud] "(pages<root> / pages)"
[fourlang] "(pages<root> / pages)"

NNP -> Conduct_NNP
[string] Conduct
[tree] NNP(Conduct)
[ud] "(Conduct<root> / Conduct)"
[fourlang] "(Conduct<root> / Conduct)"

NNP -> Examiner_NNP
[string] Examiner
[tree] NNP(Examiner)
[ud] "(Examiner<root> / Examiner)"
[fourlang] "(Examiner<root> / Examiner)"

NNPS -> SOYBEANS_NNPS
[string] SOYBEANS
[tree] NNPS(SOYBEANS)
[ud] "(SOYBEANS<root> / SOYBEANS)"
[fourlang] "(SOYBEANS<root> / SOYBEANS)"

NNP -> Fred_NNP
[string] Fred
[tree] NNP(Fred)
[ud] "(Fred<root> / Fred)"
[fourlang] "(Fred<root> / Fred)"

NNP -> Prebon_NNP
[string] Prebon
[tree] NNP(Prebon)
[ud] "(Prebon<root> / Prebon)"
[fourlang] "(Prebon<root> / Prebon)"

NNP -> JrPERIOD_NNP
[string] JrPERIOD
[tree] NNP(JrPERIOD)
[ud] "(JrPERIOD<root> / JrPERIOD)"
[fourlang] "(JrPERIOD<root> / JrPERIOD)"

NN -> objective_NN
[string] objective
[tree] NN(objective)
[ud] "(objective<root> / objective)"
[fourlang] "(objective<root> / objective)"

NN -> murder_NN
[string] murder
[tree] NN(murder)
[ud] "(murder<root> / murder)"
[fourlang] "(murder<root> / murder)"

JJ -> midsized_JJ
[string] midsized
[tree] JJ(midsized)
[ud] "(midsized<root> / midsized)"
[fourlang] "(midsized<root> / midsized)"

NN -> honor_NN
[string] honor
[tree] NN(honor)
[ud] "(honor<root> / honor)"
[fourlang] "(honor<root> / honor)"

NNS -> crystals_NNS
[string] crystals
[tree] NNS(crystals)
[ud] "(crystals<root> / crystals)"
[fourlang] "(crystals<root> / crystals)"

JJ -> sorry_JJ
[string] sorry
[tree] JJ(sorry)
[ud] "(sorry<root> / sorry)"
[fourlang] "(sorry<root> / sorry)"

VBP -> sell_VBP
[string] sell
[tree] VBP(sell)
[ud] "(sell<root> / sell)"
[fourlang] "(sell<root> / sell)"

JJ -> adverse_JJ
[string] adverse
[tree] JJ(adverse)
[ud] "(adverse<root> / adverse)"
[fourlang] "(adverse<root> / adverse)"

VBD -> left_VBD
[string] left
[tree] VBD(left)
[ud] "(left<root> / left)"
[fourlang] "(left<root> / left)"

NN -> technology_NN
[string] technology
[tree] NN(technology)
[ud] "(technology<root> / technology)"
[fourlang] "(technology<root> / technology)"

RB -> privately_RB
[string] privately
[tree] RB(privately)
[ud] "(privately<root> / privately)"
[fourlang] "(privately<root> / privately)"

VB -> help_VB
[string] help
[tree] VB(help)
[ud] "(help<root> / help)"
[fourlang] "(help<root> / help)"

NNP -> Christie_NNP
[string] Christie
[tree] NNP(Christie)
[ud] "(Christie<root> / Christie)"
[fourlang] "(Christie<root> / Christie)"

NN -> percentage_NN
[string] percentage
[tree] NN(percentage)
[ud] "(percentage<root> / percentage)"
[fourlang] "(percentage<root> / percentage)"

JJ -> heavy_JJ
[string] heavy
[tree] JJ(heavy)
[ud] "(heavy<root> / heavy)"
[fourlang] "(heavy<root> / heavy)"

NN -> handful_NN
[string] handful
[tree] NN(handful)
[ud] "(handful<root> / handful)"
[fourlang] "(handful<root> / handful)"

NN -> schoolteacher_NN
[string] schoolteacher
[tree] NN(schoolteacher)
[ud] "(schoolteacher<root> / schoolteacher)"
[fourlang] "(schoolteacher<root> / schoolteacher)"

JJ -> securitiesHYPHENbased_JJ
[string] securitiesHYPHENbased
[tree] JJ(securitiesHYPHENbased)
[ud] "(securitiesHYPHENbased<root> / securitiesHYPHENbased)"
[fourlang] "(securitiesHYPHENbased<root> / securitiesHYPHENbased)"

NNS -> Individuals_NNS
[string] Individuals
[tree] NNS(Individuals)
[ud] "(Individuals<root> / Individuals)"
[fourlang] "(Individuals<root> / Individuals)"

NNS -> accidents_NNS
[string] accidents
[tree] NNS(accidents)
[ud] "(accidents<root> / accidents)"
[fourlang] "(accidents<root> / accidents)"

NNP -> Brunswick_NNP
[string] Brunswick
[tree] NNP(Brunswick)
[ud] "(Brunswick<root> / Brunswick)"
[fourlang] "(Brunswick<root> / Brunswick)"

NNS -> creams_NNS
[string] creams
[tree] NNS(creams)
[ud] "(creams<root> / creams)"
[fourlang] "(creams<root> / creams)"

NN -> portfolio_NN
[string] portfolio
[tree] NN(portfolio)
[ud] "(portfolio<root> / portfolio)"
[fourlang] "(portfolio<root> / portfolio)"

NN -> point_NN
[string] point
[tree] NN(point)
[ud] "(point<root> / point)"
[fourlang] "(point<root> / point)"

IN -> around_IN
[string] around
[tree] IN(around)
[ud] "(around<root> / around)"
[fourlang] "(around<root> / around)"

NN -> land_NN
[string] land
[tree] NN(land)
[ud] "(land<root> / land)"
[fourlang] "(land<root> / land)"

NN -> Bribe_NN
[string] Bribe
[tree] NN(Bribe)
[ud] "(Bribe<root> / Bribe)"
[fourlang] "(Bribe<root> / Bribe)"

JJ -> little_JJ
[string] little
[tree] JJ(little)
[ud] "(little<root> / little)"
[fourlang] "(little<root> / little)"

NN -> kidney_NN
[string] kidney
[tree] NN(kidney)
[ud] "(kidney<root> / kidney)"
[fourlang] "(kidney<root> / kidney)"

NNS -> regions_NNS
[string] regions
[tree] NNS(regions)
[ud] "(regions<root> / regions)"
[fourlang] "(regions<root> / regions)"

NNP -> YWCA_NNP
[string] YWCA
[tree] NNP(YWCA)
[ud] "(YWCA<root> / YWCA)"
[fourlang] "(YWCA<root> / YWCA)"

VB -> keep_VB
[string] keep
[tree] VB(keep)
[ud] "(keep<root> / keep)"
[fourlang] "(keep<root> / keep)"

NN -> practice_NN
[string] practice
[tree] NN(practice)
[ud] "(practice<root> / practice)"
[fourlang] "(practice<root> / practice)"

NN -> knife_NN
[string] knife
[tree] NN(knife)
[ud] "(knife<root> / knife)"
[fourlang] "(knife<root> / knife)"

NN -> exporter_NN
[string] exporter
[tree] NN(exporter)
[ud] "(exporter<root> / exporter)"
[fourlang] "(exporter<root> / exporter)"

NNP -> Harper_NNP
[string] Harper
[tree] NNP(Harper)
[ud] "(Harper<root> / Harper)"
[fourlang] "(Harper<root> / Harper)"

NN -> export_NN
[string] export
[tree] NN(export)
[ud] "(export<root> / export)"
[fourlang] "(export<root> / export)"

NNP -> Foundation_NNP
[string] Foundation
[tree] NNP(Foundation)
[ud] "(Foundation<root> / Foundation)"
[fourlang] "(Foundation<root> / Foundation)"

NN -> fine_NN
[string] fine
[tree] NN(fine)
[ud] "(fine<root> / fine)"
[fourlang] "(fine<root> / fine)"

NN -> inflation_NN
[string] inflation
[tree] NN(inflation)
[ud] "(inflation<root> / inflation)"
[fourlang] "(inflation<root> / inflation)"

VBN -> made_VBN
[string] made
[tree] VBN(made)
[ud] "(made<root> / made)"
[fourlang] "(made<root> / made)"

VB -> assure_VB
[string] assure
[tree] VB(assure)
[ud] "(assure<root> / assure)"
[fourlang] "(assure<root> / assure)"

NNS -> judges_NNS
[string] judges
[tree] NNS(judges)
[ud] "(judges<root> / judges)"
[fourlang] "(judges<root> / judges)"

NNP -> Aslacton_NNP
[string] Aslacton
[tree] NNP(Aslacton)
[ud] "(Aslacton<root> / Aslacton)"
[fourlang] "(Aslacton<root> / Aslacton)"

NNP -> UPERIODSPERIODAPERIOD_NNP
[string] UPERIODSPERIODAPERIOD
[tree] NNP(UPERIODSPERIODAPERIOD)
[ud] "(UPERIODSPERIODAPERIOD<root> / UPERIODSPERIODAPERIOD)"
[fourlang] "(UPERIODSPERIODAPERIOD<root> / UPERIODSPERIODAPERIOD)"

NNP -> MessrsPERIOD_NNP
[string] MessrsPERIOD
[tree] NNP(MessrsPERIOD)
[ud] "(MessrsPERIOD<root> / MessrsPERIOD)"
[fourlang] "(MessrsPERIOD<root> / MessrsPERIOD)"

NN -> action_NN
[string] action
[tree] NN(action)
[ud] "(action<root> / action)"
[fourlang] "(action<root> / action)"

NNS -> CERTIFICATES_NNS
[string] CERTIFICATES
[tree] NNS(CERTIFICATES)
[ud] "(CERTIFICATES<root> / CERTIFICATES)"
[fourlang] "(CERTIFICATES<root> / CERTIFICATES)"

VBZ -> works_VBZ
[string] works
[tree] VBZ(works)
[ud] "(works<root> / works)"
[fourlang] "(works<root> / works)"

VB -> end_VB
[string] end
[tree] VB(end)
[ud] "(end<root> / end)"
[fourlang] "(end<root> / end)"

NNP -> WPERIODRPERIOD_NNP
[string] WPERIODRPERIOD
[tree] NNP(WPERIODRPERIOD)
[ud] "(WPERIODRPERIOD<root> / WPERIODRPERIOD)"
[fourlang] "(WPERIODRPERIOD<root> / WPERIODRPERIOD)"

NN -> Cruise_NN
[string] Cruise
[tree] NN(Cruise)
[ud] "(Cruise<root> / Cruise)"
[fourlang] "(Cruise<root> / Cruise)"

NNS -> parishioners_NNS
[string] parishioners
[tree] NNS(parishioners)
[ud] "(parishioners<root> / parishioners)"
[fourlang] "(parishioners<root> / parishioners)"

JJ -> agreedHYPHENupon_JJ
[string] agreedHYPHENupon
[tree] JJ(agreedHYPHENupon)
[ud] "(agreedHYPHENupon<root> / agreedHYPHENupon)"
[fourlang] "(agreedHYPHENupon<root> / agreedHYPHENupon)"

VB -> penetrate_VB
[string] penetrate
[tree] VB(penetrate)
[ud] "(penetrate<root> / penetrate)"
[fourlang] "(penetrate<root> / penetrate)"

NNS -> policies_NNS
[string] policies
[tree] NNS(policies)
[ud] "(policies<root> / policies)"
[fourlang] "(policies<root> / policies)"

NNS -> households_NNS
[string] households
[tree] NNS(households)
[ud] "(households<root> / households)"
[fourlang] "(households<root> / households)"

JJR -> more_JJR
[string] more
[tree] JJR(more)
[ud] "(more<root> / more)"
[fourlang] "(more<root> / more)"

NNP -> Register_NNP
[string] Register
[tree] NNP(Register)
[ud] "(Register<root> / Register)"
[fourlang] "(Register<root> / Register)"

VBG -> investing_VBG
[string] investing
[tree] VBG(investing)
[ud] "(investing<root> / investing)"
[fourlang] "(investing<root> / investing)"

JJ -> extraordinary_JJ
[string] extraordinary
[tree] JJ(extraordinary)
[ud] "(extraordinary<root> / extraordinary)"
[fourlang] "(extraordinary<root> / extraordinary)"

NN -> attorney_NN
[string] attorney
[tree] NN(attorney)
[ud] "(attorney<root> / attorney)"
[fourlang] "(attorney<root> / attorney)"

NN -> reluctance_NN
[string] reluctance
[tree] NN(reluctance)
[ud] "(reluctance<root> / reluctance)"
[fourlang] "(reluctance<root> / reluctance)"

NN -> construction_NN
[string] construction
[tree] NN(construction)
[ud] "(construction<root> / construction)"
[fourlang] "(construction<root> / construction)"

JJ -> copHYPHENkiller_JJ
[string] copHYPHENkiller
[tree] JJ(copHYPHENkiller)
[ud] "(copHYPHENkiller<root> / copHYPHENkiller)"
[fourlang] "(copHYPHENkiller<root> / copHYPHENkiller)"

CD -> DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT_CD
[string] DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT
[tree] CD(DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"

NN -> intensity_NN
[string] intensity
[tree] NN(intensity)
[ud] "(intensity<root> / intensity)"
[fourlang] "(intensity<root> / intensity)"

NNP -> Jersey_NNP
[string] Jersey
[tree] NNP(Jersey)
[ud] "(Jersey<root> / Jersey)"
[fourlang] "(Jersey<root> / Jersey)"

PRP -> them_PRP
[string] them
[tree] PRP(them)
[ud] "(them<root> / them)"
[fourlang] "(them<root> / them)"

VBD -> trailed_VBD
[string] trailed
[tree] VBD(trailed)
[ud] "(trailed<root> / trailed)"
[fourlang] "(trailed<root> / trailed)"

NNS -> generators_NNS
[string] generators
[tree] NNS(generators)
[ud] "(generators<root> / generators)"
[fourlang] "(generators<root> / generators)"

JJ -> thin_JJ
[string] thin
[tree] JJ(thin)
[ud] "(thin<root> / thin)"
[fourlang] "(thin<root> / thin)"

NN -> share_NN
[string] share
[tree] NN(share)
[ud] "(share<root> / share)"
[fourlang] "(share<root> / share)"

PRP$ -> his_PRP$
[string] his
[tree] PRP$(his)
[ud] "(his<root> / his)"
[fourlang] "(his<root> / his)"

NN -> level_NN
[string] level
[tree] NN(level)
[ud] "(level<root> / level)"
[fourlang] "(level<root> / level)"

VBZ -> holds_VBZ
[string] holds
[tree] VBZ(holds)
[ud] "(holds<root> / holds)"
[fourlang] "(holds<root> / holds)"

VB -> act_VB
[string] act
[tree] VB(act)
[ud] "(act<root> / act)"
[fourlang] "(act<root> / act)"

VB -> push_VB
[string] push
[tree] VB(push)
[ud] "(push<root> / push)"
[fourlang] "(push<root> / push)"

NNP -> Ramirez_NNP
[string] Ramirez
[tree] NNP(Ramirez)
[ud] "(Ramirez<root> / Ramirez)"
[fourlang] "(Ramirez<root> / Ramirez)"

NNS -> features_NNS
[string] features
[tree] NNS(features)
[ud] "(features<root> / features)"
[fourlang] "(features<root> / features)"

NN -> direction_NN
[string] direction
[tree] NN(direction)
[ud] "(direction<root> / direction)"
[fourlang] "(direction<root> / direction)"

RB -> skyward_RB
[string] skyward
[tree] RB(skyward)
[ud] "(skyward<root> / skyward)"
[fourlang] "(skyward<root> / skyward)"

RB -> occasionally_RB
[string] occasionally
[tree] RB(occasionally)
[ud] "(occasionally<root> / occasionally)"
[fourlang] "(occasionally<root> / occasionally)"

NN -> schoolHYPHENboard_NN
[string] schoolHYPHENboard
[tree] NN(schoolHYPHENboard)
[ud] "(schoolHYPHENboard<root> / schoolHYPHENboard)"
[fourlang] "(schoolHYPHENboard<root> / schoolHYPHENboard)"

NN -> food_NN
[string] food
[tree] NN(food)
[ud] "(food<root> / food)"
[fourlang] "(food<root> / food)"

NN -> InterleukinHYPHENDIGIT_NN
[string] InterleukinHYPHENDIGIT
[tree] NN(InterleukinHYPHENDIGIT)
[ud] "(InterleukinHYPHENDIGIT<root> / InterleukinHYPHENDIGIT)"
[fourlang] "(InterleukinHYPHENDIGIT<root> / InterleukinHYPHENDIGIT)"

NNP -> Turnaround_NNP
[string] Turnaround
[tree] NNP(Turnaround)
[ud] "(Turnaround<root> / Turnaround)"
[fourlang] "(Turnaround<root> / Turnaround)"

NNP -> Treble_NNP
[string] Treble
[tree] NNP(Treble)
[ud] "(Treble<root> / Treble)"
[fourlang] "(Treble<root> / Treble)"

_NONE_ -> ASTERISKHYPHENDIGITDIGITDIGIT__NONE_
[string] ASTERISKHYPHENDIGITDIGITDIGIT
[tree] _NONE_(ASTERISKHYPHENDIGITDIGITDIGIT)
[ud] "(ASTERISKHYPHENDIGITDIGITDIGIT<root> / ASTERISKHYPHENDIGITDIGITDIGIT)"
[fourlang] "(ASTERISKHYPHENDIGITDIGITDIGIT<root> / ASTERISKHYPHENDIGITDIGITDIGIT)"

NN -> ChangeHYPHENringing_NN
[string] ChangeHYPHENringing
[tree] NN(ChangeHYPHENringing)
[ud] "(ChangeHYPHENringing<root> / ChangeHYPHENringing)"
[fourlang] "(ChangeHYPHENringing<root> / ChangeHYPHENringing)"

NNS -> securities_NNS
[string] securities
[tree] NNS(securities)
[ud] "(securities<root> / securities)"
[fourlang] "(securities<root> / securities)"

VBZ -> says_VBZ
[string] says
[tree] VBZ(says)
[ud] "(says<root> / says)"
[fourlang] "(says<root> / says)"

NNP -> Chilver_NNP
[string] Chilver
[tree] NNP(Chilver)
[ud] "(Chilver<root> / Chilver)"
[fourlang] "(Chilver<root> / Chilver)"

JJ -> DIGITDIGITDIGITHYPHENpoint_JJ
[string] DIGITDIGITDIGITHYPHENpoint
[tree] JJ(DIGITDIGITDIGITHYPHENpoint)
[ud] "(DIGITDIGITDIGITHYPHENpoint<root> / DIGITDIGITDIGITHYPHENpoint)"
[fourlang] "(DIGITDIGITDIGITHYPHENpoint<root> / DIGITDIGITDIGITHYPHENpoint)"

NN -> impression_NN
[string] impression
[tree] NN(impression)
[ud] "(impression<root> / impression)"
[fourlang] "(impression<root> / impression)"

VB -> deny_VB
[string] deny
[tree] VB(deny)
[ud] "(deny<root> / deny)"
[fourlang] "(deny<root> / deny)"

JJ -> vast_JJ
[string] vast
[tree] JJ(vast)
[ud] "(vast<root> / vast)"
[fourlang] "(vast<root> / vast)"

NN -> message_NN
[string] message
[tree] NN(message)
[ud] "(message<root> / message)"
[fourlang] "(message<root> / message)"

RBR -> harder_RBR
[string] harder
[tree] RBR(harder)
[ud] "(harder<root> / harder)"
[fourlang] "(harder<root> / harder)"

NNP -> Sunday_NNP
[string] Sunday
[tree] NNP(Sunday)
[ud] "(Sunday<root> / Sunday)"
[fourlang] "(Sunday<root> / Sunday)"

NNS -> Stockbrokers_NNS
[string] Stockbrokers
[tree] NNS(Stockbrokers)
[ud] "(Stockbrokers<root> / Stockbrokers)"
[fourlang] "(Stockbrokers<root> / Stockbrokers)"

NN -> backing_NN
[string] backing
[tree] NN(backing)
[ud] "(backing<root> / backing)"
[fourlang] "(backing<root> / backing)"

NN -> senior_NN
[string] senior
[tree] NN(senior)
[ud] "(senior<root> / senior)"
[fourlang] "(senior<root> / senior)"

JJ -> muzzling_JJ
[string] muzzling
[tree] JJ(muzzling)
[ud] "(muzzling<root> / muzzling)"
[fourlang] "(muzzling<root> / muzzling)"

NNP -> Martin_NNP
[string] Martin
[tree] NNP(Martin)
[ud] "(Martin<root> / Martin)"
[fourlang] "(Martin<root> / Martin)"

NN -> fifthHYPHENgrade_NN
[string] fifthHYPHENgrade
[tree] NN(fifthHYPHENgrade)
[ud] "(fifthHYPHENgrade<root> / fifthHYPHENgrade)"
[fourlang] "(fifthHYPHENgrade<root> / fifthHYPHENgrade)"

NNS -> Areas_NNS
[string] Areas
[tree] NNS(Areas)
[ud] "(Areas<root> / Areas)"
[fourlang] "(Areas<root> / Areas)"

NNS -> boosts_NNS
[string] boosts
[tree] NNS(boosts)
[ud] "(boosts<root> / boosts)"
[fourlang] "(boosts<root> / boosts)"

NN -> stockHYPHENindex_NN
[string] stockHYPHENindex
[tree] NN(stockHYPHENindex)
[ud] "(stockHYPHENindex<root> / stockHYPHENindex)"
[fourlang] "(stockHYPHENindex<root> / stockHYPHENindex)"

NNS -> complaints_NNS
[string] complaints
[tree] NNS(complaints)
[ud] "(complaints<root> / complaints)"
[fourlang] "(complaints<root> / complaints)"

JJ -> searchHYPHENandHYPHENseizure_JJ
[string] searchHYPHENandHYPHENseizure
[tree] JJ(searchHYPHENandHYPHENseizure)
[ud] "(searchHYPHENandHYPHENseizure<root> / searchHYPHENandHYPHENseizure)"
[fourlang] "(searchHYPHENandHYPHENseizure<root> / searchHYPHENandHYPHENseizure)"

NNP -> Scott_NNP
[string] Scott
[tree] NNP(Scott)
[ud] "(Scott<root> / Scott)"
[fourlang] "(Scott<root> / Scott)"

NNS -> sights_NNS
[string] sights
[tree] NNS(sights)
[ud] "(sights<root> / sights)"
[fourlang] "(sights<root> / sights)"

NNS -> baskets_NNS
[string] baskets
[tree] NNS(baskets)
[ud] "(baskets<root> / baskets)"
[fourlang] "(baskets<root> / baskets)"

JJ -> profitable_JJ
[string] profitable
[tree] JJ(profitable)
[ud] "(profitable<root> / profitable)"
[fourlang] "(profitable<root> / profitable)"

NNS -> markets_NNS
[string] markets
[tree] NNS(markets)
[ud] "(markets<root> / markets)"
[fourlang] "(markets<root> / markets)"

NNP -> Intelogic_NNP
[string] Intelogic
[tree] NNP(Intelogic)
[ud] "(Intelogic<root> / Intelogic)"
[fourlang] "(Intelogic<root> / Intelogic)"

NNP -> Japan_NNP
[string] Japan
[tree] NNP(Japan)
[ud] "(Japan<root> / Japan)"
[fourlang] "(Japan<root> / Japan)"

NN -> management_NN
[string] management
[tree] NN(management)
[ud] "(management<root> / management)"
[fourlang] "(management<root> / management)"

NN -> job_NN
[string] job
[tree] NN(job)
[ud] "(job<root> / job)"
[fourlang] "(job<root> / job)"

NN -> syndrome_NN
[string] syndrome
[tree] NN(syndrome)
[ud] "(syndrome<root> / syndrome)"
[fourlang] "(syndrome<root> / syndrome)"

VBG -> stemming_VBG
[string] stemming
[tree] VBG(stemming)
[ud] "(stemming<root> / stemming)"
[fourlang] "(stemming<root> / stemming)"

NNS -> farms_NNS
[string] farms
[tree] NNS(farms)
[ud] "(farms<root> / farms)"
[fourlang] "(farms<root> / farms)"

CD -> eight_CD
[string] eight
[tree] CD(eight)
[ud] "(eight<root> / eight)"
[fourlang] "(eight<root> / eight)"

NN -> information_NN
[string] information
[tree] NN(information)
[ud] "(information<root> / information)"
[fourlang] "(information<root> / information)"

NNP -> Friedrichs_NNP
[string] Friedrichs
[tree] NNP(Friedrichs)
[ud] "(Friedrichs<root> / Friedrichs)"
[fourlang] "(Friedrichs<root> / Friedrichs)"

NNP -> Lovett_NNP
[string] Lovett
[tree] NNP(Lovett)
[ud] "(Lovett<root> / Lovett)"
[fourlang] "(Lovett<root> / Lovett)"

NNP -> Upjohn_NNP
[string] Upjohn
[tree] NNP(Upjohn)
[ud] "(Upjohn<root> / Upjohn)"
[fourlang] "(Upjohn<root> / Upjohn)"

VBG -> regarding_VBG
[string] regarding
[tree] VBG(regarding)
[ud] "(regarding<root> / regarding)"
[fourlang] "(regarding<root> / regarding)"

NN -> dozen_NN
[string] dozen
[tree] NN(dozen)
[ud] "(dozen<root> / dozen)"
[fourlang] "(dozen<root> / dozen)"

NN -> truth_NN
[string] truth
[tree] NN(truth)
[ud] "(truth<root> / truth)"
[fourlang] "(truth<root> / truth)"

NNS -> feelings_NNS
[string] feelings
[tree] NNS(feelings)
[ud] "(feelings<root> / feelings)"
[fourlang] "(feelings<root> / feelings)"

NN -> example_NN
[string] example
[tree] NN(example)
[ud] "(example<root> / example)"
[fourlang] "(example<root> / example)"

NN -> pence_NN
[string] pence
[tree] NN(pence)
[ud] "(pence<root> / pence)"
[fourlang] "(pence<root> / pence)"

NNP -> China_NNP
[string] China
[tree] NNP(China)
[ud] "(China<root> / China)"
[fourlang] "(China<root> / China)"

NN -> forecast_NN
[string] forecast
[tree] NN(forecast)
[ud] "(forecast<root> / forecast)"
[fourlang] "(forecast<root> / forecast)"

NN -> location_NN
[string] location
[tree] NN(location)
[ud] "(location<root> / location)"
[fourlang] "(location<root> / location)"

JJ -> oddHYPHENsounding_JJ
[string] oddHYPHENsounding
[tree] JJ(oddHYPHENsounding)
[ud] "(oddHYPHENsounding<root> / oddHYPHENsounding)"
[fourlang] "(oddHYPHENsounding<root> / oddHYPHENsounding)"

NNP -> Stockholm_NNP
[string] Stockholm
[tree] NNP(Stockholm)
[ud] "(Stockholm<root> / Stockholm)"
[fourlang] "(Stockholm<root> / Stockholm)"

VBD -> said_VBD
[string] said
[tree] VBD(said)
[ud] "(said<root> / said)"
[fourlang] "(said<root> / said)"

JJ -> top_JJ
[string] top
[tree] JJ(top)
[ud] "(top<root> / top)"
[fourlang] "(top<root> / top)"

NN -> cargo_NN
[string] cargo
[tree] NN(cargo)
[ud] "(cargo<root> / cargo)"
[fourlang] "(cargo<root> / cargo)"

NNS -> portions_NNS
[string] portions
[tree] NNS(portions)
[ud] "(portions<root> / portions)"
[fourlang] "(portions<root> / portions)"

NNP -> Stena_NNP
[string] Stena
[tree] NNP(Stena)
[ud] "(Stena<root> / Stena)"
[fourlang] "(Stena<root> / Stena)"

JJ -> oneHYPHENyear_JJ
[string] oneHYPHENyear
[tree] JJ(oneHYPHENyear)
[ud] "(oneHYPHENyear<root> / oneHYPHENyear)"
[fourlang] "(oneHYPHENyear<root> / oneHYPHENyear)"

NNP -> Red_NNP
[string] Red
[tree] NNP(Red)
[ud] "(Red<root> / Red)"
[fourlang] "(Red<root> / Red)"

NN -> place_NN
[string] place
[tree] NN(place)
[ud] "(place<root> / place)"
[fourlang] "(place<root> / place)"

RB -> vertically_RB
[string] vertically
[tree] RB(vertically)
[ud] "(vertically<root> / vertically)"
[fourlang] "(vertically<root> / vertically)"

CD -> nine_CD
[string] nine
[tree] CD(nine)
[ud] "(nine<root> / nine)"
[fourlang] "(nine<root> / nine)"

PRP -> it_PRP
[string] it
[tree] PRP(it)
[ud] "(it<root> / it)"
[fourlang] "(it<root> / it)"

NN -> investigation_NN
[string] investigation
[tree] NN(investigation)
[ud] "(investigation<root> / investigation)"
[fourlang] "(investigation<root> / investigation)"

NN -> while_NN
[string] while
[tree] NN(while)
[ud] "(while<root> / while)"
[fourlang] "(while<root> / while)"

NN -> newspaper_NN
[string] newspaper
[tree] NN(newspaper)
[ud] "(newspaper<root> / newspaper)"
[fourlang] "(newspaper<root> / newspaper)"

NN -> CatchHYPHENDIGITDIGIT_NN
[string] CatchHYPHENDIGITDIGIT
[tree] NN(CatchHYPHENDIGITDIGIT)
[ud] "(CatchHYPHENDIGITDIGIT<root> / CatchHYPHENDIGITDIGIT)"
[fourlang] "(CatchHYPHENDIGITDIGIT<root> / CatchHYPHENDIGITDIGIT)"

NN -> match_NN
[string] match
[tree] NN(match)
[ud] "(match<root> / match)"
[fourlang] "(match<root> / match)"

JJ -> AmericanHYPHENmade_JJ
[string] AmericanHYPHENmade
[tree] JJ(AmericanHYPHENmade)
[ud] "(AmericanHYPHENmade<root> / AmericanHYPHENmade)"
[fourlang] "(AmericanHYPHENmade<root> / AmericanHYPHENmade)"

NNS -> Obligations_NNS
[string] Obligations
[tree] NNS(Obligations)
[ud] "(Obligations<root> / Obligations)"
[fourlang] "(Obligations<root> / Obligations)"

JJ -> favorable_JJ
[string] favorable
[tree] JJ(favorable)
[ud] "(favorable<root> / favorable)"
[fourlang] "(favorable<root> / favorable)"

JJ -> related_JJ
[string] related
[tree] JJ(related)
[ud] "(related<root> / related)"
[fourlang] "(related<root> / related)"

VBD -> drove_VBD
[string] drove
[tree] VBD(drove)
[ud] "(drove<root> / drove)"
[fourlang] "(drove<root> / drove)"

LS -> b_LS
[string] b
[tree] LS(b)
[ud] "(b<root> / b)"
[fourlang] "(b<root> / b)"

NNP -> DES_NNP
[string] DES
[tree] NNP(DES)
[ud] "(DES<root> / DES)"
[fourlang] "(DES<root> / DES)"

VBG -> phasing_VBG
[string] phasing
[tree] VBG(phasing)
[ud] "(phasing<root> / phasing)"
[fourlang] "(phasing<root> / phasing)"

RB -> then_RB
[string] then
[tree] RB(then)
[ud] "(then<root> / then)"
[fourlang] "(then<root> / then)"

NNP -> Darkhorse_NNP
[string] Darkhorse
[tree] NNP(Darkhorse)
[ud] "(Darkhorse<root> / Darkhorse)"
[fourlang] "(Darkhorse<root> / Darkhorse)"

NNP -> Salmore_NNP
[string] Salmore
[tree] NNP(Salmore)
[ud] "(Salmore<root> / Salmore)"
[fourlang] "(Salmore<root> / Salmore)"

NNS -> areas_NNS
[string] areas
[tree] NNS(areas)
[ud] "(areas<root> / areas)"
[fourlang] "(areas<root> / areas)"

JJ -> leveraged_JJ
[string] leveraged
[tree] JJ(leveraged)
[ud] "(leveraged<root> / leveraged)"
[fourlang] "(leveraged<root> / leveraged)"

NNS -> Options_NNS
[string] Options
[tree] NNS(Options)
[ud] "(Options<root> / Options)"
[fourlang] "(Options<root> / Options)"

NNP -> Tassinari_NNP
[string] Tassinari
[tree] NNP(Tassinari)
[ud] "(Tassinari<root> / Tassinari)"
[fourlang] "(Tassinari<root> / Tassinari)"

NN -> bread_NN
[string] bread
[tree] NN(bread)
[ud] "(bread<root> / bread)"
[fourlang] "(bread<root> / bread)"

NNP -> MrsPERIOD_NNP
[string] MrsPERIOD
[tree] NNP(MrsPERIOD)
[ud] "(MrsPERIOD<root> / MrsPERIOD)"
[fourlang] "(MrsPERIOD<root> / MrsPERIOD)"

NNP -> Gayle_NNP
[string] Gayle
[tree] NNP(Gayle)
[ud] "(Gayle<root> / Gayle)"
[fourlang] "(Gayle<root> / Gayle)"

NN -> price_NN
[string] price
[tree] NN(price)
[ud] "(price<root> / price)"
[fourlang] "(price<root> / price)"

NN -> journal_NN
[string] journal
[tree] NN(journal)
[ud] "(journal<root> / journal)"
[fourlang] "(journal<root> / journal)"

NN -> slack_NN
[string] slack
[tree] NN(slack)
[ud] "(slack<root> / slack)"
[fourlang] "(slack<root> / slack)"

VBN -> anticipated_VBN
[string] anticipated
[tree] VBN(anticipated)
[ud] "(anticipated<root> / anticipated)"
[fourlang] "(anticipated<root> / anticipated)"

NNS -> bidders_NNS
[string] bidders
[tree] NNS(bidders)
[ud] "(bidders<root> / bidders)"
[fourlang] "(bidders<root> / bidders)"

NN -> bottle_NN
[string] bottle
[tree] NN(bottle)
[ud] "(bottle<root> / bottle)"
[fourlang] "(bottle<root> / bottle)"

NN -> healing_NN
[string] healing
[tree] NN(healing)
[ud] "(healing<root> / healing)"
[fourlang] "(healing<root> / healing)"

NNP -> Guffey_NNP
[string] Guffey
[tree] NNP(Guffey)
[ud] "(Guffey<root> / Guffey)"
[fourlang] "(Guffey<root> / Guffey)"

VBD -> folded_VBD
[string] folded
[tree] VBD(folded)
[ud] "(folded<root> / folded)"
[fourlang] "(folded<root> / folded)"

NNS -> politicians_NNS
[string] politicians
[tree] NNS(politicians)
[ud] "(politicians<root> / politicians)"
[fourlang] "(politicians<root> / politicians)"

NN -> slab_NN
[string] slab
[tree] NN(slab)
[ud] "(slab<root> / slab)"
[fourlang] "(slab<root> / slab)"

NN -> sound_NN
[string] sound
[tree] NN(sound)
[ud] "(sound<root> / sound)"
[fourlang] "(sound<root> / sound)"

NNP -> Heritage_NNP
[string] Heritage
[tree] NNP(Heritage)
[ud] "(Heritage<root> / Heritage)"
[fourlang] "(Heritage<root> / Heritage)"

JJ -> main_JJ
[string] main
[tree] JJ(main)
[ud] "(main<root> / main)"
[fourlang] "(main<root> / main)"

NNP -> Sun_NNP
[string] Sun
[tree] NNP(Sun)
[ud] "(Sun<root> / Sun)"
[fourlang] "(Sun<root> / Sun)"

VBN -> caused_VBN
[string] caused
[tree] VBN(caused)
[ud] "(caused<root> / caused)"
[fourlang] "(caused<root> / caused)"

NN -> thunder_NN
[string] thunder
[tree] NN(thunder)
[ud] "(thunder<root> / thunder)"
[fourlang] "(thunder<root> / thunder)"

NNP -> Piper_NNP
[string] Piper
[tree] NNP(Piper)
[ud] "(Piper<root> / Piper)"
[fourlang] "(Piper<root> / Piper)"

NNP -> Petroleum_NNP
[string] Petroleum
[tree] NNP(Petroleum)
[ud] "(Petroleum<root> / Petroleum)"
[fourlang] "(Petroleum<root> / Petroleum)"

NNP -> Oxnard_NNP
[string] Oxnard
[tree] NNP(Oxnard)
[ud] "(Oxnard<root> / Oxnard)"
[fourlang] "(Oxnard<root> / Oxnard)"

NNP -> Arthur_NNP
[string] Arthur
[tree] NNP(Arthur)
[ud] "(Arthur<root> / Arthur)"
[fourlang] "(Arthur<root> / Arthur)"

JJR -> newer_JJR
[string] newer
[tree] JJR(newer)
[ud] "(newer<root> / newer)"
[fourlang] "(newer<root> / newer)"

NNP -> Superdome_NNP
[string] Superdome
[tree] NNP(Superdome)
[ud] "(Superdome<root> / Superdome)"
[fourlang] "(Superdome<root> / Superdome)"

NN -> consent_NN
[string] consent
[tree] NN(consent)
[ud] "(consent<root> / consent)"
[fourlang] "(consent<root> / consent)"

NNP -> Bar_NNP
[string] Bar
[tree] NNP(Bar)
[ud] "(Bar<root> / Bar)"
[fourlang] "(Bar<root> / Bar)"

NNP -> Force_NNP
[string] Force
[tree] NNP(Force)
[ud] "(Force<root> / Force)"
[fourlang] "(Force<root> / Force)"

NNP -> Plan_NNP
[string] Plan
[tree] NNP(Plan)
[ud] "(Plan<root> / Plan)"
[fourlang] "(Plan<root> / Plan)"

NNP -> Corps_NNP
[string] Corps
[tree] NNP(Corps)
[ud] "(Corps<root> / Corps)"
[fourlang] "(Corps<root> / Corps)"

NNS -> concerns_NNS
[string] concerns
[tree] NNS(concerns)
[ud] "(concerns<root> / concerns)"
[fourlang] "(concerns<root> / concerns)"

NN -> red_NN
[string] red
[tree] NN(red)
[ud] "(red<root> / red)"
[fourlang] "(red<root> / red)"

NNP -> Kidder_NNP
[string] Kidder
[tree] NNP(Kidder)
[ud] "(Kidder<root> / Kidder)"
[fourlang] "(Kidder<root> / Kidder)"

NNP -> NL_NNP
[string] NL
[tree] NNP(NL)
[ud] "(NL<root> / NL)"
[fourlang] "(NL<root> / NL)"

VBN -> accepted_VBN
[string] accepted
[tree] VBN(accepted)
[ud] "(accepted<root> / accepted)"
[fourlang] "(accepted<root> / accepted)"

NNP -> Dahl_NNP
[string] Dahl
[tree] NNP(Dahl)
[ud] "(Dahl<root> / Dahl)"
[fourlang] "(Dahl<root> / Dahl)"

NN -> tax_NN
[string] tax
[tree] NN(tax)
[ud] "(tax<root> / tax)"
[fourlang] "(tax<root> / tax)"

JJ -> downward_JJ
[string] downward
[tree] JJ(downward)
[ud] "(downward<root> / downward)"
[fourlang] "(downward<root> / downward)"

NNP -> South_NNP
[string] South
[tree] NNP(South)
[ud] "(South<root> / South)"
[fourlang] "(South<root> / South)"

NN -> net_NN
[string] net
[tree] NN(net)
[ud] "(net<root> / net)"
[fourlang] "(net<root> / net)"

NNP -> Salomon_NNP
[string] Salomon
[tree] NNP(Salomon)
[ud] "(Salomon<root> / Salomon)"
[fourlang] "(Salomon<root> / Salomon)"

JJ -> Current_JJ
[string] Current
[tree] JJ(Current)
[ud] "(Current<root> / Current)"
[fourlang] "(Current<root> / Current)"

NN -> hotel_NN
[string] hotel
[tree] NN(hotel)
[ud] "(hotel<root> / hotel)"
[fourlang] "(hotel<root> / hotel)"

NNS -> railings_NNS
[string] railings
[tree] NNS(railings)
[ud] "(railings<root> / railings)"
[fourlang] "(railings<root> / railings)"

NNP -> Danzig_NNP
[string] Danzig
[tree] NNP(Danzig)
[ud] "(Danzig<root> / Danzig)"
[fourlang] "(Danzig<root> / Danzig)"

JJ -> residential_JJ
[string] residential
[tree] JJ(residential)
[ud] "(residential<root> / residential)"
[fourlang] "(residential<root> / residential)"

NN -> raise_NN
[string] raise
[tree] NN(raise)
[ud] "(raise<root> / raise)"
[fourlang] "(raise<root> / raise)"

NN -> department_NN
[string] department
[tree] NN(department)
[ud] "(department<root> / department)"
[fourlang] "(department<root> / department)"

NNS -> operations_NNS
[string] operations
[tree] NNS(operations)
[ud] "(operations<root> / operations)"
[fourlang] "(operations<root> / operations)"

NNP -> Government_NNP
[string] Government
[tree] NNP(Government)
[ud] "(Government<root> / Government)"
[fourlang] "(Government<root> / Government)"

NN -> wordHYPHENprocessing_NN
[string] wordHYPHENprocessing
[tree] NN(wordHYPHENprocessing)
[ud] "(wordHYPHENprocessing<root> / wordHYPHENprocessing)"
[fourlang] "(wordHYPHENprocessing<root> / wordHYPHENprocessing)"

JJ -> devastating_JJ
[string] devastating
[tree] JJ(devastating)
[ud] "(devastating<root> / devastating)"
[fourlang] "(devastating<root> / devastating)"

JJ -> northern_JJ
[string] northern
[tree] JJ(northern)
[ud] "(northern<root> / northern)"
[fourlang] "(northern<root> / northern)"

NNP -> Los_NNP
[string] Los
[tree] NNP(Los)
[ud] "(Los<root> / Los)"
[fourlang] "(Los<root> / Los)"

NNP -> Thailand_NNP
[string] Thailand
[tree] NNP(Thailand)
[ud] "(Thailand<root> / Thailand)"
[fourlang] "(Thailand<root> / Thailand)"

VBD -> occurred_VBD
[string] occurred
[tree] VBD(occurred)
[ud] "(occurred<root> / occurred)"
[fourlang] "(occurred<root> / occurred)"

NNP -> Kirkpatrick_NNP
[string] Kirkpatrick
[tree] NNP(Kirkpatrick)
[ud] "(Kirkpatrick<root> / Kirkpatrick)"
[fourlang] "(Kirkpatrick<root> / Kirkpatrick)"

NNS -> ballplayers_NNS
[string] ballplayers
[tree] NNS(ballplayers)
[ud] "(ballplayers<root> / ballplayers)"
[fourlang] "(ballplayers<root> / ballplayers)"

NN -> firm_NN
[string] firm
[tree] NN(firm)
[ud] "(firm<root> / firm)"
[fourlang] "(firm<root> / firm)"

NNS -> schools_NNS
[string] schools
[tree] NNS(schools)
[ud] "(schools<root> / schools)"
[fourlang] "(schools<root> / schools)"

NN -> shipboard_NN
[string] shipboard
[tree] NN(shipboard)
[ud] "(shipboard<root> / shipboard)"
[fourlang] "(shipboard<root> / shipboard)"

NNS -> holders_NNS
[string] holders
[tree] NNS(holders)
[ud] "(holders<root> / holders)"
[fourlang] "(holders<root> / holders)"

NN -> purchase_NN
[string] purchase
[tree] NN(purchase)
[ud] "(purchase<root> / purchase)"
[fourlang] "(purchase<root> / purchase)"

NNS -> pennies_NNS
[string] pennies
[tree] NNS(pennies)
[ud] "(pennies<root> / pennies)"
[fourlang] "(pennies<root> / pennies)"

RB -> roughly_RB
[string] roughly
[tree] RB(roughly)
[ud] "(roughly<root> / roughly)"
[fourlang] "(roughly<root> / roughly)"

VBG -> publishing_VBG
[string] publishing
[tree] VBG(publishing)
[ud] "(publishing<root> / publishing)"
[fourlang] "(publishing<root> / publishing)"

CD -> four_CD
[string] four
[tree] CD(four)
[ud] "(four<root> / four)"
[fourlang] "(four<root> / four)"

NN -> contract_NN
[string] contract
[tree] NN(contract)
[ud] "(contract<root> / contract)"
[fourlang] "(contract<root> / contract)"

NNP -> Cabernet_NNP
[string] Cabernet
[tree] NNP(Cabernet)
[ud] "(Cabernet<root> / Cabernet)"
[fourlang] "(Cabernet<root> / Cabernet)"

JJ -> DIGITDIGITHYPHENminute_JJ
[string] DIGITDIGITHYPHENminute
[tree] JJ(DIGITDIGITHYPHENminute)
[ud] "(DIGITDIGITHYPHENminute<root> / DIGITDIGITHYPHENminute)"
[fourlang] "(DIGITDIGITHYPHENminute<root> / DIGITDIGITHYPHENminute)"

NN -> equity_NN
[string] equity
[tree] NN(equity)
[ud] "(equity<root> / equity)"
[fourlang] "(equity<root> / equity)"

NN -> slate_NN
[string] slate
[tree] NN(slate)
[ud] "(slate<root> / slate)"
[fourlang] "(slate<root> / slate)"

NNP -> Legend_NNP
[string] Legend
[tree] NNP(Legend)
[ud] "(Legend<root> / Legend)"
[fourlang] "(Legend<root> / Legend)"

JJ -> postHYPHENhearing_JJ
[string] postHYPHENhearing
[tree] JJ(postHYPHENhearing)
[ud] "(postHYPHENhearing<root> / postHYPHENhearing)"
[fourlang] "(postHYPHENhearing<root> / postHYPHENhearing)"

JJ -> longerHYPHENterm_JJ
[string] longerHYPHENterm
[tree] JJ(longerHYPHENterm)
[ud] "(longerHYPHENterm<root> / longerHYPHENterm)"
[fourlang] "(longerHYPHENterm<root> / longerHYPHENterm)"

NNS -> authors_NNS
[string] authors
[tree] NNS(authors)
[ud] "(authors<root> / authors)"
[fourlang] "(authors<root> / authors)"

JJ -> DIGITDIGITHYPHENstate_JJ
[string] DIGITDIGITHYPHENstate
[tree] JJ(DIGITDIGITHYPHENstate)
[ud] "(DIGITDIGITHYPHENstate<root> / DIGITDIGITHYPHENstate)"
[fourlang] "(DIGITDIGITHYPHENstate<root> / DIGITDIGITHYPHENstate)"

NN -> fetalHYPHENtissue_NN
[string] fetalHYPHENtissue
[tree] NN(fetalHYPHENtissue)
[ud] "(fetalHYPHENtissue<root> / fetalHYPHENtissue)"
[fourlang] "(fetalHYPHENtissue<root> / fetalHYPHENtissue)"

VBN -> Guaranteed_VBN
[string] Guaranteed
[tree] VBN(Guaranteed)
[ud] "(Guaranteed<root> / Guaranteed)"
[fourlang] "(Guaranteed<root> / Guaranteed)"

NNP -> Akerfeldt_NNP
[string] Akerfeldt
[tree] NNP(Akerfeldt)
[ud] "(Akerfeldt<root> / Akerfeldt)"
[fourlang] "(Akerfeldt<root> / Akerfeldt)"

NNP -> Video_NNP
[string] Video
[tree] NNP(Video)
[ud] "(Video<root> / Video)"
[fourlang] "(Video<root> / Video)"

NN -> exhibition_NN
[string] exhibition
[tree] NN(exhibition)
[ud] "(exhibition<root> / exhibition)"
[fourlang] "(exhibition<root> / exhibition)"

NNP -> Landis_NNP
[string] Landis
[tree] NNP(Landis)
[ud] "(Landis<root> / Landis)"
[fourlang] "(Landis<root> / Landis)"

RB -> sometimes_RB
[string] sometimes
[tree] RB(sometimes)
[ud] "(sometimes<root> / sometimes)"
[fourlang] "(sometimes<root> / sometimes)"

RB -> LATE_RB
[string] LATE
[tree] RB(LATE)
[ud] "(LATE<root> / LATE)"
[fourlang] "(LATE<root> / LATE)"

NN -> Putty_NN
[string] Putty
[tree] NN(Putty)
[ud] "(Putty<root> / Putty)"
[fourlang] "(Putty<root> / Putty)"

JJ -> intense_JJ
[string] intense
[tree] JJ(intense)
[ud] "(intense<root> / intense)"
[fourlang] "(intense<root> / intense)"

NN -> street_NN
[string] street
[tree] NN(street)
[ud] "(street<root> / street)"
[fourlang] "(street<root> / street)"

NNS -> rules_NNS
[string] rules
[tree] NNS(rules)
[ud] "(rules<root> / rules)"
[fourlang] "(rules<root> / rules)"

NNP -> Constitution_NNP
[string] Constitution
[tree] NNP(Constitution)
[ud] "(Constitution<root> / Constitution)"
[fourlang] "(Constitution<root> / Constitution)"

NN -> buyer_NN
[string] buyer
[tree] NN(buyer)
[ud] "(buyer<root> / buyer)"
[fourlang] "(buyer<root> / buyer)"

JJ -> Namibian_JJ
[string] Namibian
[tree] JJ(Namibian)
[ud] "(Namibian<root> / Namibian)"
[fourlang] "(Namibian<root> / Namibian)"

NN -> disappointment_NN
[string] disappointment
[tree] NN(disappointment)
[ud] "(disappointment<root> / disappointment)"
[fourlang] "(disappointment<root> / disappointment)"

RB -> anytime_RB
[string] anytime
[tree] RB(anytime)
[ud] "(anytime<root> / anytime)"
[fourlang] "(anytime<root> / anytime)"

NN -> statute_NN
[string] statute
[tree] NN(statute)
[ud] "(statute<root> / statute)"
[fourlang] "(statute<root> / statute)"

NNP -> Daily_NNP
[string] Daily
[tree] NNP(Daily)
[ud] "(Daily<root> / Daily)"
[fourlang] "(Daily<root> / Daily)"

NNS -> stockpiles_NNS
[string] stockpiles
[tree] NNS(stockpiles)
[ud] "(stockpiles<root> / stockpiles)"
[fourlang] "(stockpiles<root> / stockpiles)"

NN -> magnitude_NN
[string] magnitude
[tree] NN(magnitude)
[ud] "(magnitude<root> / magnitude)"
[fourlang] "(magnitude<root> / magnitude)"

VBN -> estimated_VBN
[string] estimated
[tree] VBN(estimated)
[ud] "(estimated<root> / estimated)"
[fourlang] "(estimated<root> / estimated)"

NNP -> Berger_NNP
[string] Berger
[tree] NNP(Berger)
[ud] "(Berger<root> / Berger)"
[fourlang] "(Berger<root> / Berger)"

NN -> territory_NN
[string] territory
[tree] NN(territory)
[ud] "(territory<root> / territory)"
[fourlang] "(territory<root> / territory)"

NNP -> Kean_NNP
[string] Kean
[tree] NNP(Kean)
[ud] "(Kean<root> / Kean)"
[fourlang] "(Kean<root> / Kean)"

_NONE_ -> ASTERISKHYPHENDIGITDIGIT__NONE_
[string] ASTERISKHYPHENDIGITDIGIT
[tree] _NONE_(ASTERISKHYPHENDIGITDIGIT)
[ud] "(ASTERISKHYPHENDIGITDIGIT<root> / ASTERISKHYPHENDIGITDIGIT)"
[fourlang] "(ASTERISKHYPHENDIGITDIGIT<root> / ASTERISKHYPHENDIGITDIGIT)"

NN -> Something_NN
[string] Something
[tree] NN(Something)
[ud] "(Something<root> / Something)"
[fourlang] "(Something<root> / Something)"

VB -> negotiate_VB
[string] negotiate
[tree] VB(negotiate)
[ud] "(negotiate<root> / negotiate)"
[fourlang] "(negotiate<root> / negotiate)"

NN -> growth_NN
[string] growth
[tree] NN(growth)
[ud] "(growth<root> / growth)"
[fourlang] "(growth<root> / growth)"

VB -> curb_VB
[string] curb
[tree] VB(curb)
[ud] "(curb<root> / curb)"
[fourlang] "(curb<root> / curb)"

NN -> success_NN
[string] success
[tree] NN(success)
[ud] "(success<root> / success)"
[fourlang] "(success<root> / success)"

NN -> parliament_NN
[string] parliament
[tree] NN(parliament)
[ud] "(parliament<root> / parliament)"
[fourlang] "(parliament<root> / parliament)"

NNP -> Britain_NNP
[string] Britain
[tree] NNP(Britain)
[ud] "(Britain<root> / Britain)"
[fourlang] "(Britain<root> / Britain)"

CD -> Two_CD
[string] Two
[tree] CD(Two)
[ud] "(Two<root> / Two)"
[fourlang] "(Two<root> / Two)"

NNP -> Index_NNP
[string] Index
[tree] NNP(Index)
[ud] "(Index<root> / Index)"
[fourlang] "(Index<root> / Index)"

JJ -> entire_JJ
[string] entire
[tree] JJ(entire)
[ud] "(entire<root> / entire)"
[fourlang] "(entire<root> / entire)"

JJ -> tabloid_JJ
[string] tabloid
[tree] JJ(tabloid)
[ud] "(tabloid<root> / tabloid)"
[fourlang] "(tabloid<root> / tabloid)"

NNP -> FTC_NNP
[string] FTC
[tree] NNP(FTC)
[ud] "(FTC<root> / FTC)"
[fourlang] "(FTC<root> / FTC)"

NN -> cap_NN
[string] cap
[tree] NN(cap)
[ud] "(cap<root> / cap)"
[fourlang] "(cap<root> / cap)"

NNP -> Rexinger_NNP
[string] Rexinger
[tree] NNP(Rexinger)
[ud] "(Rexinger<root> / Rexinger)"
[fourlang] "(Rexinger<root> / Rexinger)"

NNP -> Big_NNP
[string] Big
[tree] NNP(Big)
[ud] "(Big<root> / Big)"
[fourlang] "(Big<root> / Big)"

NNPS -> Systems_NNPS
[string] Systems
[tree] NNPS(Systems)
[ud] "(Systems<root> / Systems)"
[fourlang] "(Systems<root> / Systems)"

NNS -> moves_NNS
[string] moves
[tree] NNS(moves)
[ud] "(moves<root> / moves)"
[fourlang] "(moves<root> / moves)"

JJ -> bottomHYPHENline_JJ
[string] bottomHYPHENline
[tree] JJ(bottomHYPHENline)
[ud] "(bottomHYPHENline<root> / bottomHYPHENline)"
[fourlang] "(bottomHYPHENline<root> / bottomHYPHENline)"

CD -> DIGITDIGITDIGITPERIODDIGIT_CD
[string] DIGITDIGITDIGITPERIODDIGIT
[tree] CD(DIGITDIGITDIGITPERIODDIGIT)
[ud] "(DIGITDIGITDIGITPERIODDIGIT<root> / DIGITDIGITDIGITPERIODDIGIT)"
[fourlang] "(DIGITDIGITDIGITPERIODDIGIT<root> / DIGITDIGITDIGITPERIODDIGIT)"

JJ -> courtHYPHENordered_JJ
[string] courtHYPHENordered
[tree] JJ(courtHYPHENordered)
[ud] "(courtHYPHENordered<root> / courtHYPHENordered)"
[fourlang] "(courtHYPHENordered<root> / courtHYPHENordered)"

VB -> sell_VB
[string] sell
[tree] VB(sell)
[ud] "(sell<root> / sell)"
[fourlang] "(sell<root> / sell)"

NN -> none_NN
[string] none
[tree] NN(none)
[ud] "(none<root> / none)"
[fourlang] "(none<root> / none)"

NN -> year_NN
[string] year
[tree] NN(year)
[ud] "(year<root> / year)"
[fourlang] "(year<root> / year)"

NNS -> weekends_NNS
[string] weekends
[tree] NNS(weekends)
[ud] "(weekends<root> / weekends)"
[fourlang] "(weekends<root> / weekends)"

NNP -> Ricken_NNP
[string] Ricken
[tree] NNP(Ricken)
[ud] "(Ricken<root> / Ricken)"
[fourlang] "(Ricken<root> / Ricken)"

NN -> teaching_NN
[string] teaching
[tree] NN(teaching)
[ud] "(teaching<root> / teaching)"
[fourlang] "(teaching<root> / teaching)"

NNP -> Arizona_NNP
[string] Arizona
[tree] NNP(Arizona)
[ud] "(Arizona<root> / Arizona)"
[fourlang] "(Arizona<root> / Arizona)"

NN -> hand_NN
[string] hand
[tree] NN(hand)
[ud] "(hand<root> / hand)"
[fourlang] "(hand<root> / hand)"

NN -> field_NN
[string] field
[tree] NN(field)
[ud] "(field<root> / field)"
[fourlang] "(field<root> / field)"

JJ -> obedient_JJ
[string] obedient
[tree] JJ(obedient)
[ud] "(obedient<root> / obedient)"
[fourlang] "(obedient<root> / obedient)"

CD -> DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT_CD
[string] DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT
[tree] CD(DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGITHYPHENDIGITDIGITDIGITDIGIT)"

NN -> bond_NN
[string] bond
[tree] NN(bond)
[ud] "(bond<root> / bond)"
[fourlang] "(bond<root> / bond)"

NNS -> ranks_NNS
[string] ranks
[tree] NNS(ranks)
[ud] "(ranks<root> / ranks)"
[fourlang] "(ranks<root> / ranks)"

JJ -> stiff_JJ
[string] stiff
[tree] JJ(stiff)
[ud] "(stiff<root> / stiff)"
[fourlang] "(stiff<root> / stiff)"

JJ -> lowHYPHENability_JJ
[string] lowHYPHENability
[tree] JJ(lowHYPHENability)
[ud] "(lowHYPHENability<root> / lowHYPHENability)"
[fourlang] "(lowHYPHENability<root> / lowHYPHENability)"

JJ -> quarterly_JJ
[string] quarterly
[tree] JJ(quarterly)
[ud] "(quarterly<root> / quarterly)"
[fourlang] "(quarterly<root> / quarterly)"

NNS -> women_NNS
[string] women
[tree] NNS(women)
[ud] "(women<root> / women)"
[fourlang] "(women<root> / women)"

NNP -> Wall_NNP
[string] Wall
[tree] NNP(Wall)
[ud] "(Wall<root> / Wall)"
[fourlang] "(Wall<root> / Wall)"

NNS -> forces_NNS
[string] forces
[tree] NNS(forces)
[ud] "(forces<root> / forces)"
[fourlang] "(forces<root> / forces)"

NNS -> Items_NNS
[string] Items
[tree] NNS(Items)
[ud] "(Items<root> / Items)"
[fourlang] "(Items<root> / Items)"

NNP -> Illinois_NNP
[string] Illinois
[tree] NNP(Illinois)
[ud] "(Illinois<root> / Illinois)"
[fourlang] "(Illinois<root> / Illinois)"

NN -> product_NN
[string] product
[tree] NN(product)
[ud] "(product<root> / product)"
[fourlang] "(product<root> / product)"

NNS -> receipts_NNS
[string] receipts
[tree] NNS(receipts)
[ud] "(receipts<root> / receipts)"
[fourlang] "(receipts<root> / receipts)"

NNS -> oils_NNS
[string] oils
[tree] NNS(oils)
[ud] "(oils<root> / oils)"
[fourlang] "(oils<root> / oils)"

NN -> shoulder_NN
[string] shoulder
[tree] NN(shoulder)
[ud] "(shoulder<root> / shoulder)"
[fourlang] "(shoulder<root> / shoulder)"

NNP -> West_NNP
[string] West
[tree] NNP(West)
[ud] "(West<root> / West)"
[fourlang] "(West<root> / West)"

NNP -> APERIOD_NNP
[string] APERIOD
[tree] NNP(APERIOD)
[ud] "(APERIOD<root> / APERIOD)"
[fourlang] "(APERIOD<root> / APERIOD)"

NNP -> Jenrette_NNP
[string] Jenrette
[tree] NNP(Jenrette)
[ud] "(Jenrette<root> / Jenrette)"
[fourlang] "(Jenrette<root> / Jenrette)"

JJ -> fleeting_JJ
[string] fleeting
[tree] JJ(fleeting)
[ud] "(fleeting<root> / fleeting)"
[fourlang] "(fleeting<root> / fleeting)"

NNS -> yen_NNS
[string] yen
[tree] NNS(yen)
[ud] "(yen<root> / yen)"
[fourlang] "(yen<root> / yen)"

NNS -> copies_NNS
[string] copies
[tree] NNS(copies)
[ud] "(copies<root> / copies)"
[fourlang] "(copies<root> / copies)"

JJ -> particular_JJ
[string] particular
[tree] JJ(particular)
[ud] "(particular<root> / particular)"
[fourlang] "(particular<root> / particular)"

NNP -> Somerset_NNP
[string] Somerset
[tree] NNP(Somerset)
[ud] "(Somerset<root> / Somerset)"
[fourlang] "(Somerset<root> / Somerset)"

NNS -> rates_NNS
[string] rates
[tree] NNS(rates)
[ud] "(rates<root> / rates)"
[fourlang] "(rates<root> / rates)"

PUNCT -> IQ_PUNCT
[string] IQ
[tree] PUNCT(IQ)
[ud] "(IQ<root> / IQ)"
[fourlang] "(IQ<root> / IQ)"

JJ -> Typical_JJ
[string] Typical
[tree] JJ(Typical)
[ud] "(Typical<root> / Typical)"
[fourlang] "(Typical<root> / Typical)"

VB -> include_VB
[string] include
[tree] VB(include)
[ud] "(include<root> / include)"
[fourlang] "(include<root> / include)"

NNS -> buildings_NNS
[string] buildings
[tree] NNS(buildings)
[ud] "(buildings<root> / buildings)"
[fourlang] "(buildings<root> / buildings)"

NNP -> CAT_NNP
[string] CAT
[tree] NNP(CAT)
[ud] "(CAT<root> / CAT)"
[fourlang] "(CAT<root> / CAT)"

JJ -> poor_JJ
[string] poor
[tree] JJ(poor)
[ud] "(poor<root> / poor)"
[fourlang] "(poor<root> / poor)"

NNP -> Oklahoma_NNP
[string] Oklahoma
[tree] NNP(Oklahoma)
[ud] "(Oklahoma<root> / Oklahoma)"
[fourlang] "(Oklahoma<root> / Oklahoma)"

JJR -> bigger_JJR
[string] bigger
[tree] JJR(bigger)
[ud] "(bigger<root> / bigger)"
[fourlang] "(bigger<root> / bigger)"

JJ -> DIGITDIGITDIGITHYPHENaHYPHENshare_JJ
[string] DIGITDIGITDIGITHYPHENaHYPHENshare
[tree] JJ(DIGITDIGITDIGITHYPHENaHYPHENshare)
[ud] "(DIGITDIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITDIGITHYPHENaHYPHENshare)"
[fourlang] "(DIGITDIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITDIGITHYPHENaHYPHENshare)"

NNS -> Reasons_NNS
[string] Reasons
[tree] NNS(Reasons)
[ud] "(Reasons<root> / Reasons)"
[fourlang] "(Reasons<root> / Reasons)"

NN -> opportunity_NN
[string] opportunity
[tree] NN(opportunity)
[ud] "(opportunity<root> / opportunity)"
[fourlang] "(opportunity<root> / opportunity)"

NN -> sufficiency_NN
[string] sufficiency
[tree] NN(sufficiency)
[ud] "(sufficiency<root> / sufficiency)"
[fourlang] "(sufficiency<root> / sufficiency)"

JJ -> beautiful_JJ
[string] beautiful
[tree] JJ(beautiful)
[ud] "(beautiful<root> / beautiful)"
[fourlang] "(beautiful<root> / beautiful)"

NN -> manpower_NN
[string] manpower
[tree] NN(manpower)
[ud] "(manpower<root> / manpower)"
[fourlang] "(manpower<root> / manpower)"

VBN -> expected_VBN
[string] expected
[tree] VBN(expected)
[ud] "(expected<root> / expected)"
[fourlang] "(expected<root> / expected)"

NN -> permission_NN
[string] permission
[tree] NN(permission)
[ud] "(permission<root> / permission)"
[fourlang] "(permission<root> / permission)"

NNS -> funds_NNS
[string] funds
[tree] NNS(funds)
[ud] "(funds<root> / funds)"
[fourlang] "(funds<root> / funds)"

NNP -> Water_NNP
[string] Water
[tree] NNP(Water)
[ud] "(Water<root> / Water)"
[fourlang] "(Water<root> / Water)"

NNPS -> Machines_NNPS
[string] Machines
[tree] NNPS(Machines)
[ud] "(Machines<root> / Machines)"
[fourlang] "(Machines<root> / Machines)"

NN -> editor_NN
[string] editor
[tree] NN(editor)
[ud] "(editor<root> / editor)"
[fourlang] "(editor<root> / editor)"

NN -> retardation_NN
[string] retardation
[tree] NN(retardation)
[ud] "(retardation<root> / retardation)"
[fourlang] "(retardation<root> / retardation)"

NN -> collapse_NN
[string] collapse
[tree] NN(collapse)
[ud] "(collapse<root> / collapse)"
[fourlang] "(collapse<root> / collapse)"

NNP -> Loewi_NNP
[string] Loewi
[tree] NNP(Loewi)
[ud] "(Loewi<root> / Loewi)"
[fourlang] "(Loewi<root> / Loewi)"

JJ -> captivating_JJ
[string] captivating
[tree] JJ(captivating)
[ud] "(captivating<root> / captivating)"
[fourlang] "(captivating<root> / captivating)"

NNS -> debts_NNS
[string] debts
[tree] NNS(debts)
[ud] "(debts<root> / debts)"
[fourlang] "(debts<root> / debts)"

NNS -> careers_NNS
[string] careers
[tree] NNS(careers)
[ud] "(careers<root> / careers)"
[fourlang] "(careers<root> / careers)"

NN -> carrier_NN
[string] carrier
[tree] NN(carrier)
[ud] "(carrier<root> / carrier)"
[fourlang] "(carrier<root> / carrier)"

NNS -> shadows_NNS
[string] shadows
[tree] NNS(shadows)
[ud] "(shadows<root> / shadows)"
[fourlang] "(shadows<root> / shadows)"

JJ -> savingsHYPHENandHYPHENloan_JJ
[string] savingsHYPHENandHYPHENloan
[tree] JJ(savingsHYPHENandHYPHENloan)
[ud] "(savingsHYPHENandHYPHENloan<root> / savingsHYPHENandHYPHENloan)"
[fourlang] "(savingsHYPHENandHYPHENloan<root> / savingsHYPHENandHYPHENloan)"

NNP -> Jaguar_NNP
[string] Jaguar
[tree] NNP(Jaguar)
[ud] "(Jaguar<root> / Jaguar)"
[fourlang] "(Jaguar<root> / Jaguar)"

NN -> distribution_NN
[string] distribution
[tree] NN(distribution)
[ud] "(distribution<root> / distribution)"
[fourlang] "(distribution<root> / distribution)"

NNS -> payments_NNS
[string] payments
[tree] NNS(payments)
[ud] "(payments<root> / payments)"
[fourlang] "(payments<root> / payments)"

NNP -> Atlanta_NNP
[string] Atlanta
[tree] NNP(Atlanta)
[ud] "(Atlanta<root> / Atlanta)"
[fourlang] "(Atlanta<root> / Atlanta)"

NN -> principal_NN
[string] principal
[tree] NN(principal)
[ud] "(principal<root> / principal)"
[fourlang] "(principal<root> / principal)"

JJ -> real_JJ
[string] real
[tree] JJ(real)
[ud] "(real<root> / real)"
[fourlang] "(real<root> / real)"

NNP -> Carnival_NNP
[string] Carnival
[tree] NNP(Carnival)
[ud] "(Carnival<root> / Carnival)"
[fourlang] "(Carnival<root> / Carnival)"

NNP -> Brenda_NNP
[string] Brenda
[tree] NNP(Brenda)
[ud] "(Brenda<root> / Brenda)"
[fourlang] "(Brenda<root> / Brenda)"

NN -> competitor_NN
[string] competitor
[tree] NN(competitor)
[ud] "(competitor<root> / competitor)"
[fourlang] "(competitor<root> / competitor)"

NN -> organization_NN
[string] organization
[tree] NN(organization)
[ud] "(organization<root> / organization)"
[fourlang] "(organization<root> / organization)"

DT -> another_DT
[string] another
[tree] DT(another)
[ud] "(another<root> / another)"
[fourlang] "(another<root> / another)"

VB -> suffer_VB
[string] suffer
[tree] VB(suffer)
[ud] "(suffer<root> / suffer)"
[fourlang] "(suffer<root> / suffer)"

VBN -> continued_VBN
[string] continued
[tree] VBN(continued)
[ud] "(continued<root> / continued)"
[fourlang] "(continued<root> / continued)"

NNP -> Soho_NNP
[string] Soho
[tree] NNP(Soho)
[ud] "(Soho<root> / Soho)"
[fourlang] "(Soho<root> / Soho)"

NNP -> Charles_NNP
[string] Charles
[tree] NNP(Charles)
[ud] "(Charles<root> / Charles)"
[fourlang] "(Charles<root> / Charles)"

VBG -> buying_VBG
[string] buying
[tree] VBG(buying)
[ud] "(buying<root> / buying)"
[fourlang] "(buying<root> / buying)"

NNP -> Kenneth_NNP
[string] Kenneth
[tree] NNP(Kenneth)
[ud] "(Kenneth<root> / Kenneth)"
[fourlang] "(Kenneth<root> / Kenneth)"

NNP -> Intermec_NNP
[string] Intermec
[tree] NNP(Intermec)
[ud] "(Intermec<root> / Intermec)"
[fourlang] "(Intermec<root> / Intermec)"

JJ -> careful_JJ
[string] careful
[tree] JJ(careful)
[ud] "(careful<root> / careful)"
[fourlang] "(careful<root> / careful)"

NN -> landing_NN
[string] landing
[tree] NN(landing)
[ud] "(landing<root> / landing)"
[fourlang] "(landing<root> / landing)"

NNS -> Researchers_NNS
[string] Researchers
[tree] NNS(Researchers)
[ud] "(Researchers<root> / Researchers)"
[fourlang] "(Researchers<root> / Researchers)"

NN -> analysis_NN
[string] analysis
[tree] NN(analysis)
[ud] "(analysis<root> / analysis)"
[fourlang] "(analysis<root> / analysis)"

NNP -> Food_NNP
[string] Food
[tree] NNP(Food)
[ud] "(Food<root> / Food)"
[fourlang] "(Food<root> / Food)"

NNP -> JPERIODPPERIOD_NNP
[string] JPERIODPPERIOD
[tree] NNP(JPERIODPPERIOD)
[ud] "(JPERIODPPERIOD<root> / JPERIODPPERIOD)"
[fourlang] "(JPERIODPPERIOD<root> / JPERIODPPERIOD)"

NN -> dissemination_NN
[string] dissemination
[tree] NN(dissemination)
[ud] "(dissemination<root> / dissemination)"
[fourlang] "(dissemination<root> / dissemination)"

VBG -> abridging_VBG
[string] abridging
[tree] VBG(abridging)
[ud] "(abridging<root> / abridging)"
[fourlang] "(abridging<root> / abridging)"

IN -> since_IN
[string] since
[tree] IN(since)
[ud] "(since<root> / since)"
[fourlang] "(since<root> / since)"

NN -> slowdown_NN
[string] slowdown
[tree] NN(slowdown)
[ud] "(slowdown<root> / slowdown)"
[fourlang] "(slowdown<root> / slowdown)"

CD -> DIGITDIGITDIGITCOMMADIGITDIGITDIGIT_CD
[string] DIGITDIGITDIGITCOMMADIGITDIGITDIGIT
[tree] CD(DIGITDIGITDIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"

NNP -> Jerritts_NNP
[string] Jerritts
[tree] NNP(Jerritts)
[ud] "(Jerritts<root> / Jerritts)"
[fourlang] "(Jerritts<root> / Jerritts)"

NNP -> GenCorp_NNP
[string] GenCorp
[tree] NNP(GenCorp)
[ud] "(GenCorp<root> / GenCorp)"
[fourlang] "(GenCorp<root> / GenCorp)"

JJR -> less_JJR
[string] less
[tree] JJR(less)
[ud] "(less<root> / less)"
[fourlang] "(less<root> / less)"

VB -> string_VB
[string] string
[tree] VB(string)
[ud] "(string<root> / string)"
[fourlang] "(string<root> / string)"

NNP -> Catholic_NNP
[string] Catholic
[tree] NNP(Catholic)
[ud] "(Catholic<root> / Catholic)"
[fourlang] "(Catholic<root> / Catholic)"

JJ -> daily_JJ
[string] daily
[tree] JJ(daily)
[ud] "(daily<root> / daily)"
[fourlang] "(daily<root> / daily)"

NN -> precedent_NN
[string] precedent
[tree] NN(precedent)
[ud] "(precedent<root> / precedent)"
[fourlang] "(precedent<root> / precedent)"

JJ -> unrecognizable_JJ
[string] unrecognizable
[tree] JJ(unrecognizable)
[ud] "(unrecognizable<root> / unrecognizable)"
[fourlang] "(unrecognizable<root> / unrecognizable)"

NNP -> Midwesco_NNP
[string] Midwesco
[tree] NNP(Midwesco)
[ud] "(Midwesco<root> / Midwesco)"
[fourlang] "(Midwesco<root> / Midwesco)"

JJ -> botched_JJ
[string] botched
[tree] JJ(botched)
[ud] "(botched<root> / botched)"
[fourlang] "(botched<root> / botched)"

NN -> leeway_NN
[string] leeway
[tree] NN(leeway)
[ud] "(leeway<root> / leeway)"
[fourlang] "(leeway<root> / leeway)"

NNP -> Gas_NNP
[string] Gas
[tree] NNP(Gas)
[ud] "(Gas<root> / Gas)"
[fourlang] "(Gas<root> / Gas)"

NNP -> Fulbright_NNP
[string] Fulbright
[tree] NNP(Fulbright)
[ud] "(Fulbright<root> / Fulbright)"
[fourlang] "(Fulbright<root> / Fulbright)"

NN -> wonder_NN
[string] wonder
[tree] NN(wonder)
[ud] "(wonder<root> / wonder)"
[fourlang] "(wonder<root> / wonder)"

NNP -> Allied_NNP
[string] Allied
[tree] NNP(Allied)
[ud] "(Allied<root> / Allied)"
[fourlang] "(Allied<root> / Allied)"

JJ -> current_JJ
[string] current
[tree] JJ(current)
[ud] "(current<root> / current)"
[fourlang] "(current<root> / current)"

NN -> clouding_NN
[string] clouding
[tree] NN(clouding)
[ud] "(clouding<root> / clouding)"
[fourlang] "(clouding<root> / clouding)"

NNS -> minivans_NNS
[string] minivans
[tree] NNS(minivans)
[ud] "(minivans<root> / minivans)"
[fourlang] "(minivans<root> / minivans)"

PUNCT -> SQ_PUNCT
[string] SQ
[tree] PUNCT(SQ)
[ud] "(SQ<root> / SQ)"
[fourlang] "(SQ<root> / SQ)"

JJ -> pretax_JJ
[string] pretax
[tree] JJ(pretax)
[ud] "(pretax<root> / pretax)"
[fourlang] "(pretax<root> / pretax)"

NNP -> Dan_NNP
[string] Dan
[tree] NNP(Dan)
[ud] "(Dan<root> / Dan)"
[fourlang] "(Dan<root> / Dan)"

NNS -> houses_NNS
[string] houses
[tree] NNS(houses)
[ud] "(houses<root> / houses)"
[fourlang] "(houses<root> / houses)"

NN -> compliance_NN
[string] compliance
[tree] NN(compliance)
[ud] "(compliance<root> / compliance)"
[fourlang] "(compliance<root> / compliance)"

NN -> force_NN
[string] force
[tree] NN(force)
[ud] "(force<root> / force)"
[fourlang] "(force<root> / force)"

NN -> sponsor_NN
[string] sponsor
[tree] NN(sponsor)
[ud] "(sponsor<root> / sponsor)"
[fourlang] "(sponsor<root> / sponsor)"

VB -> pay_VB
[string] pay
[tree] VB(pay)
[ud] "(pay<root> / pay)"
[fourlang] "(pay<root> / pay)"

JJ -> foreignHYPHENled_JJ
[string] foreignHYPHENled
[tree] JJ(foreignHYPHENled)
[ud] "(foreignHYPHENled<root> / foreignHYPHENled)"
[fourlang] "(foreignHYPHENled<root> / foreignHYPHENled)"

NNP -> Midwestern_NNP
[string] Midwestern
[tree] NNP(Midwestern)
[ud] "(Midwestern<root> / Midwestern)"
[fourlang] "(Midwestern<root> / Midwestern)"

VB -> prevent_VB
[string] prevent
[tree] VB(prevent)
[ud] "(prevent<root> / prevent)"
[fourlang] "(prevent<root> / prevent)"

NN -> creditworthiness_NN
[string] creditworthiness
[tree] NN(creditworthiness)
[ud] "(creditworthiness<root> / creditworthiness)"
[fourlang] "(creditworthiness<root> / creditworthiness)"

NNP -> Unico_NNP
[string] Unico
[tree] NNP(Unico)
[ud] "(Unico<root> / Unico)"
[fourlang] "(Unico<root> / Unico)"

JJ -> small_JJ
[string] small
[tree] JJ(small)
[ud] "(small<root> / small)"
[fourlang] "(small<root> / small)"

NNP -> Harvard_NNP
[string] Harvard
[tree] NNP(Harvard)
[ud] "(Harvard<root> / Harvard)"
[fourlang] "(Harvard<root> / Harvard)"

NN -> remainder_NN
[string] remainder
[tree] NN(remainder)
[ud] "(remainder<root> / remainder)"
[fourlang] "(remainder<root> / remainder)"

NNP -> John_NNP
[string] John
[tree] NNP(John)
[ud] "(John<root> / John)"
[fourlang] "(John<root> / John)"

NN -> socialHYPHENstudies_NN
[string] socialHYPHENstudies
[tree] NN(socialHYPHENstudies)
[ud] "(socialHYPHENstudies<root> / socialHYPHENstudies)"
[fourlang] "(socialHYPHENstudies<root> / socialHYPHENstudies)"

CD -> DIGITDIGITDIGITDIGIT_CD
[string] DIGITDIGITDIGITDIGIT
[tree] CD(DIGITDIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"

NN -> underwriter_NN
[string] underwriter
[tree] NN(underwriter)
[ud] "(underwriter<root> / underwriter)"
[fourlang] "(underwriter<root> / underwriter)"

NNP -> Winiarski_NNP
[string] Winiarski
[tree] NNP(Winiarski)
[ud] "(Winiarski<root> / Winiarski)"
[fourlang] "(Winiarski<root> / Winiarski)"

JJ -> minor_JJ
[string] minor
[tree] JJ(minor)
[ud] "(minor<root> / minor)"
[fourlang] "(minor<root> / minor)"

IN -> About_IN
[string] About
[tree] IN(About)
[ud] "(About<root> / About)"
[fourlang] "(About<root> / About)"

NNP -> Perritt_NNP
[string] Perritt
[tree] NNP(Perritt)
[ud] "(Perritt<root> / Perritt)"
[fourlang] "(Perritt<root> / Perritt)"

NN -> reference_NN
[string] reference
[tree] NN(reference)
[ud] "(reference<root> / reference)"
[fourlang] "(reference<root> / reference)"

JJ -> sixHYPHENmonth_JJ
[string] sixHYPHENmonth
[tree] JJ(sixHYPHENmonth)
[ud] "(sixHYPHENmonth<root> / sixHYPHENmonth)"
[fourlang] "(sixHYPHENmonth<root> / sixHYPHENmonth)"

NN -> appointment_NN
[string] appointment
[tree] NN(appointment)
[ud] "(appointment<root> / appointment)"
[fourlang] "(appointment<root> / appointment)"

NNP -> USIA_NNP
[string] USIA
[tree] NNP(USIA)
[ud] "(USIA<root> / USIA)"
[fourlang] "(USIA<root> / USIA)"

NNP -> Columbia_NNP
[string] Columbia
[tree] NNP(Columbia)
[ud] "(Columbia<root> / Columbia)"
[fourlang] "(Columbia<root> / Columbia)"

NN -> spokeswoman_NN
[string] spokeswoman
[tree] NN(spokeswoman)
[ud] "(spokeswoman<root> / spokeswoman)"
[fourlang] "(spokeswoman<root> / spokeswoman)"

CD -> Fourteen_CD
[string] Fourteen
[tree] CD(Fourteen)
[ud] "(Fourteen<root> / Fourteen)"
[fourlang] "(Fourteen<root> / Fourteen)"

NN -> Profit_NN
[string] Profit
[tree] NN(Profit)
[ud] "(Profit<root> / Profit)"
[fourlang] "(Profit<root> / Profit)"

NN -> body_NN
[string] body
[tree] NN(body)
[ud] "(body<root> / body)"
[fourlang] "(body<root> / body)"

NNP -> Einhorn_NNP
[string] Einhorn
[tree] NNP(Einhorn)
[ud] "(Einhorn<root> / Einhorn)"
[fourlang] "(Einhorn<root> / Einhorn)"

NNS -> returns_NNS
[string] returns
[tree] NNS(returns)
[ud] "(returns<root> / returns)"
[fourlang] "(returns<root> / returns)"

NN -> plan_NN
[string] plan
[tree] NN(plan)
[ud] "(plan<root> / plan)"
[fourlang] "(plan<root> / plan)"

NNS -> belfries_NNS
[string] belfries
[tree] NNS(belfries)
[ud] "(belfries<root> / belfries)"
[fourlang] "(belfries<root> / belfries)"

NNP -> Moody_NNP
[string] Moody
[tree] NNP(Moody)
[ud] "(Moody<root> / Moody)"
[fourlang] "(Moody<root> / Moody)"

NNP -> Dunn_NNP
[string] Dunn
[tree] NNP(Dunn)
[ud] "(Dunn<root> / Dunn)"
[fourlang] "(Dunn<root> / Dunn)"

NN -> airline_NN
[string] airline
[tree] NN(airline)
[ud] "(airline<root> / airline)"
[fourlang] "(airline<root> / airline)"

NN -> goodwill_NN
[string] goodwill
[tree] NN(goodwill)
[ud] "(goodwill<root> / goodwill)"
[fourlang] "(goodwill<root> / goodwill)"

NNP -> Spiegel_NNP
[string] Spiegel
[tree] NNP(Spiegel)
[ud] "(Spiegel<root> / Spiegel)"
[fourlang] "(Spiegel<root> / Spiegel)"

VB -> look_VB
[string] look
[tree] VB(look)
[ud] "(look<root> / look)"
[fourlang] "(look<root> / look)"

NNP -> Coleman_NNP
[string] Coleman
[tree] NNP(Coleman)
[ud] "(Coleman<root> / Coleman)"
[fourlang] "(Coleman<root> / Coleman)"

NNS -> pieces_NNS
[string] pieces
[tree] NNS(pieces)
[ud] "(pieces<root> / pieces)"
[fourlang] "(pieces<root> / pieces)"

NN -> prescription_NN
[string] prescription
[tree] NN(prescription)
[ud] "(prescription<root> / prescription)"
[fourlang] "(prescription<root> / prescription)"

NNP -> Code_NNP
[string] Code
[tree] NNP(Code)
[ud] "(Code<root> / Code)"
[fourlang] "(Code<root> / Code)"

JJ -> direct_JJ
[string] direct
[tree] JJ(direct)
[ud] "(direct<root> / direct)"
[fourlang] "(direct<root> / direct)"

VBN -> heated_VBN
[string] heated
[tree] VBN(heated)
[ud] "(heated<root> / heated)"
[fourlang] "(heated<root> / heated)"

NNP -> Loan_NNP
[string] Loan
[tree] NNP(Loan)
[ud] "(Loan<root> / Loan)"
[fourlang] "(Loan<root> / Loan)"

JJ -> independent_JJ
[string] independent
[tree] JJ(independent)
[ud] "(independent<root> / independent)"
[fourlang] "(independent<root> / independent)"

VBN -> alleged_VBN
[string] alleged
[tree] VBN(alleged)
[ud] "(alleged<root> / alleged)"
[fourlang] "(alleged<root> / alleged)"

JJ -> high_JJ
[string] high
[tree] JJ(high)
[ud] "(high<root> / high)"
[fourlang] "(high<root> / high)"

VB -> ease_VB
[string] ease
[tree] VB(ease)
[ud] "(ease<root> / ease)"
[fourlang] "(ease<root> / ease)"

NN -> refusal_NN
[string] refusal
[tree] NN(refusal)
[ud] "(refusal<root> / refusal)"
[fourlang] "(refusal<root> / refusal)"

NNS -> writeHYPHENdowns_NNS
[string] writeHYPHENdowns
[tree] NNS(writeHYPHENdowns)
[ud] "(writeHYPHENdowns<root> / writeHYPHENdowns)"
[fourlang] "(writeHYPHENdowns<root> / writeHYPHENdowns)"

NNS -> refunds_NNS
[string] refunds
[tree] NNS(refunds)
[ud] "(refunds<root> / refunds)"
[fourlang] "(refunds<root> / refunds)"

NNS -> People_NNS
[string] People
[tree] NNS(People)
[ud] "(People<root> / People)"
[fourlang] "(People<root> / People)"

NNP -> Transamerica_NNP
[string] Transamerica
[tree] NNP(Transamerica)
[ud] "(Transamerica<root> / Transamerica)"
[fourlang] "(Transamerica<root> / Transamerica)"

NNS -> openings_NNS
[string] openings
[tree] NNS(openings)
[ud] "(openings<root> / openings)"
[fourlang] "(openings<root> / openings)"

CD -> two_CD
[string] two
[tree] CD(two)
[ud] "(two<root> / two)"
[fourlang] "(two<root> / two)"

NN -> Oil_NN
[string] Oil
[tree] NN(Oil)
[ud] "(Oil<root> / Oil)"
[fourlang] "(Oil<root> / Oil)"

RB -> away_RB
[string] away
[tree] RB(away)
[ud] "(away<root> / away)"
[fourlang] "(away<root> / away)"

VB -> go_VB
[string] go
[tree] VB(go)
[ud] "(go<root> / go)"
[fourlang] "(go<root> / go)"

NNS -> restrictions_NNS
[string] restrictions
[tree] NNS(restrictions)
[ud] "(restrictions<root> / restrictions)"
[fourlang] "(restrictions<root> / restrictions)"

NN -> index_NN
[string] index
[tree] NN(index)
[ud] "(index<root> / index)"
[fourlang] "(index<root> / index)"

NN -> economy_NN
[string] economy
[tree] NN(economy)
[ud] "(economy<root> / economy)"
[fourlang] "(economy<root> / economy)"

NN -> intelligence_NN
[string] intelligence
[tree] NN(intelligence)
[ud] "(intelligence<root> / intelligence)"
[fourlang] "(intelligence<root> / intelligence)"

NNP -> Dollar_NNP
[string] Dollar
[tree] NNP(Dollar)
[ud] "(Dollar<root> / Dollar)"
[fourlang] "(Dollar<root> / Dollar)"

JJ -> investmentHYPHENgrade_JJ
[string] investmentHYPHENgrade
[tree] JJ(investmentHYPHENgrade)
[ud] "(investmentHYPHENgrade<root> / investmentHYPHENgrade)"
[fourlang] "(investmentHYPHENgrade<root> / investmentHYPHENgrade)"

JJ -> mutual_JJ
[string] mutual
[tree] JJ(mutual)
[ud] "(mutual<root> / mutual)"
[fourlang] "(mutual<root> / mutual)"

NN -> connection_NN
[string] connection
[tree] NN(connection)
[ud] "(connection<root> / connection)"
[fourlang] "(connection<root> / connection)"

NN -> tone_NN
[string] tone
[tree] NN(tone)
[ud] "(tone<root> / tone)"
[fourlang] "(tone<root> / tone)"

NN -> rearHYPHENseat_NN
[string] rearHYPHENseat
[tree] NN(rearHYPHENseat)
[ud] "(rearHYPHENseat<root> / rearHYPHENseat)"
[fourlang] "(rearHYPHENseat<root> / rearHYPHENseat)"

NNS -> proteins_NNS
[string] proteins
[tree] NNS(proteins)
[ud] "(proteins<root> / proteins)"
[fourlang] "(proteins<root> / proteins)"

NN -> explosion_NN
[string] explosion
[tree] NN(explosion)
[ud] "(explosion<root> / explosion)"
[fourlang] "(explosion<root> / explosion)"

VBG -> rebounding_VBG
[string] rebounding
[tree] VBG(rebounding)
[ud] "(rebounding<root> / rebounding)"
[fourlang] "(rebounding<root> / rebounding)"

JJ -> extra_JJ
[string] extra
[tree] JJ(extra)
[ud] "(extra<root> / extra)"
[fourlang] "(extra<root> / extra)"

RB -> stringently_RB
[string] stringently
[tree] RB(stringently)
[ud] "(stringently<root> / stringently)"
[fourlang] "(stringently<root> / stringently)"

NN -> character_NN
[string] character
[tree] NN(character)
[ud] "(character<root> / character)"
[fourlang] "(character<root> / character)"

NNP -> Prime_NNP
[string] Prime
[tree] NNP(Prime)
[ud] "(Prime<root> / Prime)"
[fourlang] "(Prime<root> / Prime)"

JJ -> persistent_JJ
[string] persistent
[tree] JJ(persistent)
[ud] "(persistent<root> / persistent)"
[fourlang] "(persistent<root> / persistent)"

RB -> hither_RB
[string] hither
[tree] RB(hither)
[ud] "(hither<root> / hither)"
[fourlang] "(hither<root> / hither)"

NN -> administrator_NN
[string] administrator
[tree] NN(administrator)
[ud] "(administrator<root> / administrator)"
[fourlang] "(administrator<root> / administrator)"

NN -> speech_NN
[string] speech
[tree] NN(speech)
[ud] "(speech<root> / speech)"
[fourlang] "(speech<root> / speech)"

NN -> electricity_NN
[string] electricity
[tree] NN(electricity)
[ud] "(electricity<root> / electricity)"
[fourlang] "(electricity<root> / electricity)"

JJ -> comparable_JJ
[string] comparable
[tree] JJ(comparable)
[ud] "(comparable<root> / comparable)"
[fourlang] "(comparable<root> / comparable)"

NNS -> Fees_NNS
[string] Fees
[tree] NNS(Fees)
[ud] "(Fees<root> / Fees)"
[fourlang] "(Fees<root> / Fees)"

NNP -> Leinonen_NNP
[string] Leinonen
[tree] NNP(Leinonen)
[ud] "(Leinonen<root> / Leinonen)"
[fourlang] "(Leinonen<root> / Leinonen)"

PUNCT -> SEMICOLON_PUNCT
[string] SEMICOLON
[tree] PUNCT(SEMICOLON)
[ud] "(SEMICOLON<root> / SEMICOLON)"
[fourlang] "(SEMICOLON<root> / SEMICOLON)"

NN -> hill_NN
[string] hill
[tree] NN(hill)
[ud] "(hill<root> / hill)"
[fourlang] "(hill<root> / hill)"

JJ -> short_JJ
[string] short
[tree] JJ(short)
[ud] "(short<root> / short)"
[fourlang] "(short<root> / short)"

NNP -> Fishman_NNP
[string] Fishman
[tree] NNP(Fishman)
[ud] "(Fishman<root> / Fishman)"
[fourlang] "(Fishman<root> / Fishman)"

NNS -> eyes_NNS
[string] eyes
[tree] NNS(eyes)
[ud] "(eyes<root> / eyes)"
[fourlang] "(eyes<root> / eyes)"

NNS -> stakes_NNS
[string] stakes
[tree] NNS(stakes)
[ud] "(stakes<root> / stakes)"
[fourlang] "(stakes<root> / stakes)"

NN -> gut_NN
[string] gut
[tree] NN(gut)
[ud] "(gut<root> / gut)"
[fourlang] "(gut<root> / gut)"

NN -> vacation_NN
[string] vacation
[tree] NN(vacation)
[ud] "(vacation<root> / vacation)"
[fourlang] "(vacation<root> / vacation)"

NNP -> Whiting_NNP
[string] Whiting
[tree] NNP(Whiting)
[ud] "(Whiting<root> / Whiting)"
[fourlang] "(Whiting<root> / Whiting)"

JJ -> DIGITDIGITHYPHENyear_JJ
[string] DIGITDIGITHYPHENyear
[tree] JJ(DIGITDIGITHYPHENyear)
[ud] "(DIGITDIGITHYPHENyear<root> / DIGITDIGITHYPHENyear)"
[fourlang] "(DIGITDIGITHYPHENyear<root> / DIGITDIGITHYPHENyear)"

VBG -> packaging_VBG
[string] packaging
[tree] VBG(packaging)
[ud] "(packaging<root> / packaging)"
[fourlang] "(packaging<root> / packaging)"

NNP -> Burnham_NNP
[string] Burnham
[tree] NNP(Burnham)
[ud] "(Burnham<root> / Burnham)"
[fourlang] "(Burnham<root> / Burnham)"

NNS -> investments_NNS
[string] investments
[tree] NNS(investments)
[ud] "(investments<root> / investments)"
[fourlang] "(investments<root> / investments)"

NNP -> Old_NNP
[string] Old
[tree] NNP(Old)
[ud] "(Old<root> / Old)"
[fourlang] "(Old<root> / Old)"

NN -> credit_NN
[string] credit
[tree] NN(credit)
[ud] "(credit<root> / credit)"
[fourlang] "(credit<root> / credit)"

JJ -> bad_JJ
[string] bad
[tree] JJ(bad)
[ud] "(bad<root> / bad)"
[fourlang] "(bad<root> / bad)"

NNP -> Asia_NNP
[string] Asia
[tree] NNP(Asia)
[ud] "(Asia<root> / Asia)"
[fourlang] "(Asia<root> / Asia)"

NN -> account_NN
[string] account
[tree] NN(account)
[ud] "(account<root> / account)"
[fourlang] "(account<root> / account)"

CD -> DIGITBSLPERDIGIT_CD
[string] DIGITBSLPERDIGIT
[tree] CD(DIGITBSLPERDIGIT)
[ud] "(DIGITBSLPERDIGIT<root> / DIGITBSLPERDIGIT)"
[fourlang] "(DIGITBSLPERDIGIT<root> / DIGITBSLPERDIGIT)"

NNS -> buyHYPHENouts_NNS
[string] buyHYPHENouts
[tree] NNS(buyHYPHENouts)
[ud] "(buyHYPHENouts<root> / buyHYPHENouts)"
[fourlang] "(buyHYPHENouts<root> / buyHYPHENouts)"

NN -> half_NN
[string] half
[tree] NN(half)
[ud] "(half<root> / half)"
[fourlang] "(half<root> / half)"

VBN -> OFFERED_VBN
[string] OFFERED
[tree] VBN(OFFERED)
[ud] "(OFFERED<root> / OFFERED)"
[fourlang] "(OFFERED<root> / OFFERED)"

NNP -> UAL_NNP
[string] UAL
[tree] NNP(UAL)
[ud] "(UAL<root> / UAL)"
[fourlang] "(UAL<root> / UAL)"

NNS -> months_NNS
[string] months
[tree] NNS(months)
[ud] "(months<root> / months)"
[fourlang] "(months<root> / months)"

NNP -> Paso_NNP
[string] Paso
[tree] NNP(Paso)
[ud] "(Paso<root> / Paso)"
[fourlang] "(Paso<root> / Paso)"

NN -> ad_NN
[string] ad
[tree] NN(ad)
[ud] "(ad<root> / ad)"
[fourlang] "(ad<root> / ad)"

VBG -> involving_VBG
[string] involving
[tree] VBG(involving)
[ud] "(involving<root> / involving)"
[fourlang] "(involving<root> / involving)"

RB -> there_RB
[string] there
[tree] RB(there)
[ud] "(there<root> / there)"
[fourlang] "(there<root> / there)"

NNP -> Macheski_NNP
[string] Macheski
[tree] NNP(Macheski)
[ud] "(Macheski<root> / Macheski)"
[fourlang] "(Macheski<root> / Macheski)"

VBN -> appropriated_VBN
[string] appropriated
[tree] VBN(appropriated)
[ud] "(appropriated<root> / appropriated)"
[fourlang] "(appropriated<root> / appropriated)"

NNP -> Ilminster_NNP
[string] Ilminster
[tree] NNP(Ilminster)
[ud] "(Ilminster<root> / Ilminster)"
[fourlang] "(Ilminster<root> / Ilminster)"

NNP -> Florida_NNP
[string] Florida
[tree] NNP(Florida)
[ud] "(Florida<root> / Florida)"
[fourlang] "(Florida<root> / Florida)"

VBP -> feel_VBP
[string] feel
[tree] VBP(feel)
[ud] "(feel<root> / feel)"
[fourlang] "(feel<root> / feel)"

JJ -> antitrust_JJ
[string] antitrust
[tree] JJ(antitrust)
[ud] "(antitrust<root> / antitrust)"
[fourlang] "(antitrust<root> / antitrust)"

NNP -> AHYPHEND_NNP
[string] AHYPHEND
[tree] NNP(AHYPHEND)
[ud] "(AHYPHEND<root> / AHYPHEND)"
[fourlang] "(AHYPHEND<root> / AHYPHEND)"

NN -> transportation_NN
[string] transportation
[tree] NN(transportation)
[ud] "(transportation<root> / transportation)"
[fourlang] "(transportation<root> / transportation)"

NN -> theory_NN
[string] theory
[tree] NN(theory)
[ud] "(theory<root> / theory)"
[fourlang] "(theory<root> / theory)"

DT -> those_DT
[string] those
[tree] DT(those)
[ud] "(those<root> / those)"
[fourlang] "(those<root> / those)"

NNS -> sums_NNS
[string] sums
[tree] NNS(sums)
[ud] "(sums<root> / sums)"
[fourlang] "(sums<root> / sums)"

JJ -> capped_JJ
[string] capped
[tree] JJ(capped)
[ud] "(capped<root> / capped)"
[fourlang] "(capped<root> / capped)"

NNS -> appropriations_NNS
[string] appropriations
[tree] NNS(appropriations)
[ud] "(appropriations<root> / appropriations)"
[fourlang] "(appropriations<root> / appropriations)"

NN -> novel_NN
[string] novel
[tree] NN(novel)
[ud] "(novel<root> / novel)"
[fourlang] "(novel<root> / novel)"

NN -> knight_NN
[string] knight
[tree] NN(knight)
[ud] "(knight<root> / knight)"
[fourlang] "(knight<root> / knight)"

NN -> teacher_NN
[string] teacher
[tree] NN(teacher)
[ud] "(teacher<root> / teacher)"
[fourlang] "(teacher<root> / teacher)"

JJ -> sportHYPHENutility_JJ
[string] sportHYPHENutility
[tree] JJ(sportHYPHENutility)
[ud] "(sportHYPHENutility<root> / sportHYPHENutility)"
[fourlang] "(sportHYPHENutility<root> / sportHYPHENutility)"

NNS -> presidents_NNS
[string] presidents
[tree] NNS(presidents)
[ud] "(presidents<root> / presidents)"
[fourlang] "(presidents<root> / presidents)"

NNS -> moments_NNS
[string] moments
[tree] NNS(moments)
[ud] "(moments<root> / moments)"
[fourlang] "(moments<root> / moments)"

NNP -> Nagano_NNP
[string] Nagano
[tree] NNP(Nagano)
[ud] "(Nagano<root> / Nagano)"
[fourlang] "(Nagano<root> / Nagano)"

NNP -> Ratners_NNP
[string] Ratners
[tree] NNP(Ratners)
[ud] "(Ratners<root> / Ratners)"
[fourlang] "(Ratners<root> / Ratners)"

NNP -> Shepperd_NNP
[string] Shepperd
[tree] NNP(Shepperd)
[ud] "(Shepperd<root> / Shepperd)"
[fourlang] "(Shepperd<root> / Shepperd)"

NN -> dust_NN
[string] dust
[tree] NN(dust)
[ud] "(dust<root> / dust)"
[fourlang] "(dust<root> / dust)"

NNP -> Canada_NNP
[string] Canada
[tree] NNP(Canada)
[ud] "(Canada<root> / Canada)"
[fourlang] "(Canada<root> / Canada)"

NN -> leasing_NN
[string] leasing
[tree] NN(leasing)
[ud] "(leasing<root> / leasing)"
[fourlang] "(leasing<root> / leasing)"

NNP -> Bush_NNP
[string] Bush
[tree] NNP(Bush)
[ud] "(Bush<root> / Bush)"
[fourlang] "(Bush<root> / Bush)"

NNS -> analysts_NNS
[string] analysts
[tree] NNS(analysts)
[ud] "(analysts<root> / analysts)"
[fourlang] "(analysts<root> / analysts)"

NNS -> professionals_NNS
[string] professionals
[tree] NNS(professionals)
[ud] "(professionals<root> / professionals)"
[fourlang] "(professionals<root> / professionals)"

JJ -> wide_JJ
[string] wide
[tree] JJ(wide)
[ud] "(wide<root> / wide)"
[fourlang] "(wide<root> / wide)"

NNS -> imports_NNS
[string] imports
[tree] NNS(imports)
[ud] "(imports<root> / imports)"
[fourlang] "(imports<root> / imports)"

NN -> matter_NN
[string] matter
[tree] NN(matter)
[ud] "(matter<root> / matter)"
[fourlang] "(matter<root> / matter)"

RBR -> less_RBR
[string] less
[tree] RBR(less)
[ud] "(less<root> / less)"
[fourlang] "(less<root> / less)"

JJ -> fourHYPHENfootHYPHENhigh_JJ
[string] fourHYPHENfootHYPHENhigh
[tree] JJ(fourHYPHENfootHYPHENhigh)
[ud] "(fourHYPHENfootHYPHENhigh<root> / fourHYPHENfootHYPHENhigh)"
[fourlang] "(fourHYPHENfootHYPHENhigh<root> / fourHYPHENfootHYPHENhigh)"

JJR -> lower_JJR
[string] lower
[tree] JJR(lower)
[ud] "(lower<root> / lower)"
[fourlang] "(lower<root> / lower)"

NN -> air_NN
[string] air
[tree] NN(air)
[ud] "(air<root> / air)"
[fourlang] "(air<root> / air)"

NNS -> details_NNS
[string] details
[tree] NNS(details)
[ud] "(details<root> / details)"
[fourlang] "(details<root> / details)"

NNP -> Group_NNP
[string] Group
[tree] NNP(Group)
[ud] "(Group<root> / Group)"
[fourlang] "(Group<root> / Group)"

NNP -> Christopher_NNP
[string] Christopher
[tree] NNP(Christopher)
[ud] "(Christopher<root> / Christopher)"
[fourlang] "(Christopher<root> / Christopher)"

NNS -> sixHYPHENpacks_NNS
[string] sixHYPHENpacks
[tree] NNS(sixHYPHENpacks)
[ud] "(sixHYPHENpacks<root> / sixHYPHENpacks)"
[fourlang] "(sixHYPHENpacks<root> / sixHYPHENpacks)"

NNP -> Nichol_NNP
[string] Nichol
[tree] NNP(Nichol)
[ud] "(Nichol<root> / Nichol)"
[fourlang] "(Nichol<root> / Nichol)"

VBD -> passed_VBD
[string] passed
[tree] VBD(passed)
[ud] "(passed<root> / passed)"
[fourlang] "(passed<root> / passed)"

DT -> every_DT
[string] every
[tree] DT(every)
[ud] "(every<root> / every)"
[fourlang] "(every<root> / every)"

VBP -> suffer_VBP
[string] suffer
[tree] VBP(suffer)
[ud] "(suffer<root> / suffer)"
[fourlang] "(suffer<root> / suffer)"

CD -> DIGITDIGIT_CD
[string] DIGITDIGIT
[tree] CD(DIGITDIGIT)
[ud] "(DIGITDIGIT<root> / DIGITDIGIT)"
[fourlang] "(DIGITDIGIT<root> / DIGITDIGIT)"

NNS -> causes_NNS
[string] causes
[tree] NNS(causes)
[ud] "(causes<root> / causes)"
[fourlang] "(causes<root> / causes)"

JJ -> Nearby_JJ
[string] Nearby
[tree] JJ(Nearby)
[ud] "(Nearby<root> / Nearby)"
[fourlang] "(Nearby<root> / Nearby)"

NNPS -> Democrats_NNPS
[string] Democrats
[tree] NNPS(Democrats)
[ud] "(Democrats<root> / Democrats)"
[fourlang] "(Democrats<root> / Democrats)"

NN -> shift_NN
[string] shift
[tree] NN(shift)
[ud] "(shift<root> / shift)"
[fourlang] "(shift<root> / shift)"

NNS -> computers_NNS
[string] computers
[tree] NNS(computers)
[ud] "(computers<root> / computers)"
[fourlang] "(computers<root> / computers)"

NNP -> Ruth_NNP
[string] Ruth
[tree] NNP(Ruth)
[ud] "(Ruth<root> / Ruth)"
[fourlang] "(Ruth<root> / Ruth)"

VBP -> follow_VBP
[string] follow
[tree] VBP(follow)
[ud] "(follow<root> / follow)"
[fourlang] "(follow<root> / follow)"

VB -> aid_VB
[string] aid
[tree] VB(aid)
[ud] "(aid<root> / aid)"
[fourlang] "(aid<root> / aid)"

NNP -> LtdPERIOD_NNP
[string] LtdPERIOD
[tree] NNP(LtdPERIOD)
[ud] "(LtdPERIOD<root> / LtdPERIOD)"
[fourlang] "(LtdPERIOD<root> / LtdPERIOD)"

NNP -> Europe_NNP
[string] Europe
[tree] NNP(Europe)
[ud] "(Europe<root> / Europe)"
[fourlang] "(Europe<root> / Europe)"

VB -> allow_VB
[string] allow
[tree] VB(allow)
[ud] "(allow<root> / allow)"
[fourlang] "(allow<root> / allow)"

NNP -> Criticism_NNP
[string] Criticism
[tree] NNP(Criticism)
[ud] "(Criticism<root> / Criticism)"
[fourlang] "(Criticism<root> / Criticism)"

JJ -> wellHYPHENknown_JJ
[string] wellHYPHENknown
[tree] JJ(wellHYPHENknown)
[ud] "(wellHYPHENknown<root> / wellHYPHENknown)"
[fourlang] "(wellHYPHENknown<root> / wellHYPHENknown)"

PUNCT -> PERIOD_PUNCT
[string] PERIOD
[tree] PUNCT(PERIOD)
[ud] "(PERIOD<root> / PERIOD)"
[fourlang] "(PERIOD<root> / PERIOD)"

NNP -> General_NNP
[string] General
[tree] NNP(General)
[ud] "(General<root> / General)"
[fourlang] "(General<root> / General)"

JJ -> infectious_JJ
[string] infectious
[tree] JJ(infectious)
[ud] "(infectious<root> / infectious)"
[fourlang] "(infectious<root> / infectious)"

NNS -> chips_NNS
[string] chips
[tree] NNS(chips)
[ud] "(chips<root> / chips)"
[fourlang] "(chips<root> / chips)"

NNS -> ideas_NNS
[string] ideas
[tree] NNS(ideas)
[ud] "(ideas<root> / ideas)"
[fourlang] "(ideas<root> / ideas)"

NN -> psychology_NN
[string] psychology
[tree] NN(psychology)
[ud] "(psychology<root> / psychology)"
[fourlang] "(psychology<root> / psychology)"

NNP -> Cullowhee_NNP
[string] Cullowhee
[tree] NNP(Cullowhee)
[ud] "(Cullowhee<root> / Cullowhee)"
[fourlang] "(Cullowhee<root> / Cullowhee)"

VB -> lead_VB
[string] lead
[tree] VB(lead)
[ud] "(lead<root> / lead)"
[fourlang] "(lead<root> / lead)"

JJR -> stronger_JJR
[string] stronger
[tree] JJR(stronger)
[ud] "(stronger<root> / stronger)"
[fourlang] "(stronger<root> / stronger)"

NN -> life_NN
[string] life
[tree] NN(life)
[ud] "(life<root> / life)"
[fourlang] "(life<root> / life)"

NN -> development_NN
[string] development
[tree] NN(development)
[ud] "(development<root> / development)"
[fourlang] "(development<root> / development)"

NN -> painting_NN
[string] painting
[tree] NN(painting)
[ud] "(painting<root> / painting)"
[fourlang] "(painting<root> / painting)"

NN -> Seed_NN
[string] Seed
[tree] NN(Seed)
[ud] "(Seed<root> / Seed)"
[fourlang] "(Seed<root> / Seed)"

NN -> text_NN
[string] text
[tree] NN(text)
[ud] "(text<root> / text)"
[fourlang] "(text<root> / text)"

JJ -> professional_JJ
[string] professional
[tree] JJ(professional)
[ud] "(professional<root> / professional)"
[fourlang] "(professional<root> / professional)"

VBN -> completed_VBN
[string] completed
[tree] VBN(completed)
[ud] "(completed<root> / completed)"
[fourlang] "(completed<root> / completed)"

NN -> syndicate_NN
[string] syndicate
[tree] NN(syndicate)
[ud] "(syndicate<root> / syndicate)"
[fourlang] "(syndicate<root> / syndicate)"

NNS -> standards_NNS
[string] standards
[tree] NNS(standards)
[ud] "(standards<root> / standards)"
[fourlang] "(standards<root> / standards)"

JJ -> subsequent_JJ
[string] subsequent
[tree] JJ(subsequent)
[ud] "(subsequent<root> / subsequent)"
[fourlang] "(subsequent<root> / subsequent)"

NNS -> Worksheets_NNS
[string] Worksheets
[tree] NNS(Worksheets)
[ud] "(Worksheets<root> / Worksheets)"
[fourlang] "(Worksheets<root> / Worksheets)"

NN -> offer_NN
[string] offer
[tree] NN(offer)
[ud] "(offer<root> / offer)"
[fourlang] "(offer<root> / offer)"

NNS -> targets_NNS
[string] targets
[tree] NNS(targets)
[ud] "(targets<root> / targets)"
[fourlang] "(targets<root> / targets)"

NNPS -> Investors_NNPS
[string] Investors
[tree] NNPS(Investors)
[ud] "(Investors<root> / Investors)"
[fourlang] "(Investors<root> / Investors)"

NN -> class_NN
[string] class
[tree] NN(class)
[ud] "(class<root> / class)"
[fourlang] "(class<root> / class)"

CD -> DIGITDIGITPERIODDIGITDIGIT_CD
[string] DIGITDIGITPERIODDIGITDIGIT
[tree] CD(DIGITDIGITPERIODDIGITDIGIT)
[ud] "(DIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITPERIODDIGITDIGIT)"

VBG -> protecting_VBG
[string] protecting
[tree] VBG(protecting)
[ud] "(protecting<root> / protecting)"
[fourlang] "(protecting<root> / protecting)"

NNP -> Shugart_NNP
[string] Shugart
[tree] NNP(Shugart)
[ud] "(Shugart<root> / Shugart)"
[fourlang] "(Shugart<root> / Shugart)"

JJ -> low_JJ
[string] low
[tree] JJ(low)
[ud] "(low<root> / low)"
[fourlang] "(low<root> / low)"

NN -> visit_NN
[string] visit
[tree] NN(visit)
[ud] "(visit<root> / visit)"
[fourlang] "(visit<root> / visit)"

JJ -> subject_JJ
[string] subject
[tree] JJ(subject)
[ud] "(subject<root> / subject)"
[fourlang] "(subject<root> / subject)"

JJ -> senior_JJ
[string] senior
[tree] JJ(senior)
[ud] "(senior<root> / senior)"
[fourlang] "(senior<root> / senior)"

NNP -> Michaels_NNP
[string] Michaels
[tree] NNP(Michaels)
[ud] "(Michaels<root> / Michaels)"
[fourlang] "(Michaels<root> / Michaels)"

NN -> benchmark_NN
[string] benchmark
[tree] NN(benchmark)
[ud] "(benchmark<root> / benchmark)"
[fourlang] "(benchmark<root> / benchmark)"

NN -> currency_NN
[string] currency
[tree] NN(currency)
[ud] "(currency<root> / currency)"
[fourlang] "(currency<root> / currency)"

NNS -> restaurants_NNS
[string] restaurants
[tree] NNS(restaurants)
[ud] "(restaurants<root> / restaurants)"
[fourlang] "(restaurants<root> / restaurants)"

NN -> term_NN
[string] term
[tree] NN(term)
[ud] "(term<root> / term)"
[fourlang] "(term<root> / term)"

NNP -> House_NNP
[string] House
[tree] NNP(House)
[ud] "(House<root> / House)"
[fourlang] "(House<root> / House)"

VBN -> used_VBN
[string] used
[tree] VBN(used)
[ud] "(used<root> / used)"
[fourlang] "(used<root> / used)"

IN -> as_IN
[string] as
[tree] IN(as)
[ud] "(as<root> / as)"
[fourlang] "(as<root> / as)"

NN -> fringe_NN
[string] fringe
[tree] NN(fringe)
[ud] "(fringe<root> / fringe)"
[fourlang] "(fringe<root> / fringe)"

JJR -> fewer_JJR
[string] fewer
[tree] JJR(fewer)
[ud] "(fewer<root> / fewer)"
[fourlang] "(fewer<root> / fewer)"

NNS -> commissions_NNS
[string] commissions
[tree] NNS(commissions)
[ud] "(commissions<root> / commissions)"
[fourlang] "(commissions<root> / commissions)"

NNS -> agencies_NNS
[string] agencies
[tree] NNS(agencies)
[ud] "(agencies<root> / agencies)"
[fourlang] "(agencies<root> / agencies)"

NNP -> Mannix_NNP
[string] Mannix
[tree] NNP(Mannix)
[ud] "(Mannix<root> / Mannix)"
[fourlang] "(Mannix<root> / Mannix)"

PRP -> her_PRP
[string] her
[tree] PRP(her)
[ud] "(her<root> / her)"
[fourlang] "(her<root> / her)"

NNP -> Preston_NNP
[string] Preston
[tree] NNP(Preston)
[ud] "(Preston<root> / Preston)"
[fourlang] "(Preston<root> / Preston)"

NNS -> seats_NNS
[string] seats
[tree] NNS(seats)
[ud] "(seats<root> / seats)"
[fourlang] "(seats<root> / seats)"

JJ -> French_JJ
[string] French
[tree] JJ(French)
[ud] "(French<root> / French)"
[fourlang] "(French<root> / French)"

JJ -> unusual_JJ
[string] unusual
[tree] JJ(unusual)
[ud] "(unusual<root> / unusual)"
[fourlang] "(unusual<root> / unusual)"

NNP -> York_NNP
[string] York
[tree] NNP(York)
[ud] "(York<root> / York)"
[fourlang] "(York<root> / York)"

NNS -> changes_NNS
[string] changes
[tree] NNS(changes)
[ud] "(changes<root> / changes)"
[fourlang] "(changes<root> / changes)"

JJ -> twoHYPHENletter_JJ
[string] twoHYPHENletter
[tree] JJ(twoHYPHENletter)
[ud] "(twoHYPHENletter<root> / twoHYPHENletter)"
[fourlang] "(twoHYPHENletter<root> / twoHYPHENletter)"

RB -> Only_RB
[string] Only
[tree] RB(Only)
[ud] "(Only<root> / Only)"
[fourlang] "(Only<root> / Only)"

VBP -> insist_VBP
[string] insist
[tree] VBP(insist)
[ud] "(insist<root> / insist)"
[fourlang] "(insist<root> / insist)"

NNS -> tours_NNS
[string] tours
[tree] NNS(tours)
[ud] "(tours<root> / tours)"
[fourlang] "(tours<root> / tours)"

NN -> someone_NN
[string] someone
[tree] NN(someone)
[ud] "(someone<root> / someone)"
[fourlang] "(someone<root> / someone)"

NNS -> kids_NNS
[string] kids
[tree] NNS(kids)
[ud] "(kids<root> / kids)"
[fourlang] "(kids<root> / kids)"

NN -> farm_NN
[string] farm
[tree] NN(farm)
[ud] "(farm<root> / farm)"
[fourlang] "(farm<root> / farm)"

NN -> collar_NN
[string] collar
[tree] NN(collar)
[ud] "(collar<root> / collar)"
[fourlang] "(collar<root> / collar)"

VBN -> sold_VBN
[string] sold
[tree] VBN(sold)
[ud] "(sold<root> / sold)"
[fourlang] "(sold<root> / sold)"

NNP -> Drug_NNP
[string] Drug
[tree] NNP(Drug)
[ud] "(Drug<root> / Drug)"
[fourlang] "(Drug<root> / Drug)"

NN -> acquisition_NN
[string] acquisition
[tree] NN(acquisition)
[ud] "(acquisition<root> / acquisition)"
[fourlang] "(acquisition<root> / acquisition)"

NNP -> Avon_NNP
[string] Avon
[tree] NNP(Avon)
[ud] "(Avon<root> / Avon)"
[fourlang] "(Avon<root> / Avon)"

NNP -> Public_NNP
[string] Public
[tree] NNP(Public)
[ud] "(Public<root> / Public)"
[fourlang] "(Public<root> / Public)"

MD -> would_MD
[string] would
[tree] MD(would)
[ud] "(would<root> / would)"
[fourlang] "(would<root> / would)"

JJ -> limited_JJ
[string] limited
[tree] JJ(limited)
[ud] "(limited<root> / limited)"
[fourlang] "(limited<root> / limited)"

NNS -> borders_NNS
[string] borders
[tree] NNS(borders)
[ud] "(borders<root> / borders)"
[fourlang] "(borders<root> / borders)"

JJ -> overnight_JJ
[string] overnight
[tree] JJ(overnight)
[ud] "(overnight<root> / overnight)"
[fourlang] "(overnight<root> / overnight)"

NNP -> Garret_NNP
[string] Garret
[tree] NNP(Garret)
[ud] "(Garret<root> / Garret)"
[fourlang] "(Garret<root> / Garret)"

NNP -> READY_NNP
[string] READY
[tree] NNP(READY)
[ud] "(READY<root> / READY)"
[fourlang] "(READY<root> / READY)"

NN -> wine_NN
[string] wine
[tree] NN(wine)
[ud] "(wine<root> / wine)"
[fourlang] "(wine<root> / wine)"

NN -> passage_NN
[string] passage
[tree] NN(passage)
[ud] "(passage<root> / passage)"
[fourlang] "(passage<root> / passage)"

NN -> pace_NN
[string] pace
[tree] NN(pace)
[ud] "(pace<root> / pace)"
[fourlang] "(pace<root> / pace)"

NNS -> mistrials_NNS
[string] mistrials
[tree] NNS(mistrials)
[ud] "(mistrials<root> / mistrials)"
[fourlang] "(mistrials<root> / mistrials)"

NN -> party_NN
[string] party
[tree] NN(party)
[ud] "(party<root> / party)"
[fourlang] "(party<root> / party)"

NNS -> laws_NNS
[string] laws
[tree] NNS(laws)
[ud] "(laws<root> / laws)"
[fourlang] "(laws<root> / laws)"

NNP -> Kearny_NNP
[string] Kearny
[tree] NNP(Kearny)
[ud] "(Kearny<root> / Kearny)"
[fourlang] "(Kearny<root> / Kearny)"

VBP -> encourage_VBP
[string] encourage
[tree] VBP(encourage)
[ud] "(encourage<root> / encourage)"
[fourlang] "(encourage<root> / encourage)"

NN -> telephone_NN
[string] telephone
[tree] NN(telephone)
[ud] "(telephone<root> / telephone)"
[fourlang] "(telephone<root> / telephone)"

NNS -> events_NNS
[string] events
[tree] NNS(events)
[ud] "(events<root> / events)"
[fourlang] "(events<root> / events)"

JJ -> unitary_JJ
[string] unitary
[tree] JJ(unitary)
[ud] "(unitary<root> / unitary)"
[fourlang] "(unitary<root> / unitary)"

JJS -> biggest_JJS
[string] biggest
[tree] JJS(biggest)
[ud] "(biggest<root> / biggest)"
[fourlang] "(biggest<root> / biggest)"

NN -> volume_NN
[string] volume
[tree] NN(volume)
[ud] "(volume<root> / volume)"
[fourlang] "(volume<root> / volume)"

JJ -> automatic_JJ
[string] automatic
[tree] JJ(automatic)
[ud] "(automatic<root> / automatic)"
[fourlang] "(automatic<root> / automatic)"

NNP -> Review_NNP
[string] Review
[tree] NNP(Review)
[ud] "(Review<root> / Review)"
[fourlang] "(Review<root> / Review)"

NNP -> Operations_NNP
[string] Operations
[tree] NNP(Operations)
[ud] "(Operations<root> / Operations)"
[fourlang] "(Operations<root> / Operations)"

VBZ -> seeks_VBZ
[string] seeks
[tree] VBZ(seeks)
[ud] "(seeks<root> / seeks)"
[fourlang] "(seeks<root> / seeks)"

NN -> meeting_NN
[string] meeting
[tree] NN(meeting)
[ud] "(meeting<root> / meeting)"
[fourlang] "(meeting<root> / meeting)"

NN -> approach_NN
[string] approach
[tree] NN(approach)
[ud] "(approach<root> / approach)"
[fourlang] "(approach<root> / approach)"

NNP -> Apple_NNP
[string] Apple
[tree] NNP(Apple)
[ud] "(Apple<root> / Apple)"
[fourlang] "(Apple<root> / Apple)"

JJ -> magnetic_JJ
[string] magnetic
[tree] JJ(magnetic)
[ud] "(magnetic<root> / magnetic)"
[fourlang] "(magnetic<root> / magnetic)"

NN -> season_NN
[string] season
[tree] NN(season)
[ud] "(season<root> / season)"
[fourlang] "(season<root> / season)"

NNP -> Kalamazoo_NNP
[string] Kalamazoo
[tree] NNP(Kalamazoo)
[ud] "(Kalamazoo<root> / Kalamazoo)"
[fourlang] "(Kalamazoo<root> / Kalamazoo)"

NNS -> shipments_NNS
[string] shipments
[tree] NNS(shipments)
[ud] "(shipments<root> / shipments)"
[fourlang] "(shipments<root> / shipments)"

NNP -> Partnership_NNP
[string] Partnership
[tree] NNP(Partnership)
[ud] "(Partnership<root> / Partnership)"
[fourlang] "(Partnership<root> / Partnership)"

JJ -> Andean_JJ
[string] Andean
[tree] JJ(Andean)
[ud] "(Andean<root> / Andean)"
[fourlang] "(Andean<root> / Andean)"

JJ -> few_JJ
[string] few
[tree] JJ(few)
[ud] "(few<root> / few)"
[fourlang] "(few<root> / few)"

JJ -> unchanged_JJ
[string] unchanged
[tree] JJ(unchanged)
[ud] "(unchanged<root> / unchanged)"
[fourlang] "(unchanged<root> / unchanged)"

IN -> behind_IN
[string] behind
[tree] IN(behind)
[ud] "(behind<root> / behind)"
[fourlang] "(behind<root> / behind)"

JJ -> Professional_JJ
[string] Professional
[tree] JJ(Professional)
[ud] "(Professional<root> / Professional)"
[fourlang] "(Professional<root> / Professional)"

VB -> read_VB
[string] read
[tree] VB(read)
[ud] "(read<root> / read)"
[fourlang] "(read<root> / read)"

CD -> DIGITDIGITDIGITDIGITPERIODDIGITDIGIT_CD
[string] DIGITDIGITDIGITDIGITPERIODDIGITDIGIT
[tree] CD(DIGITDIGITDIGITDIGITPERIODDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITDIGITDIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITDIGITDIGITPERIODDIGITDIGIT)"

NN -> DEFENSE_NN
[string] DEFENSE
[tree] NN(DEFENSE)
[ud] "(DEFENSE<root> / DEFENSE)"
[fourlang] "(DEFENSE<root> / DEFENSE)"

RB -> as_RB
[string] as
[tree] RB(as)
[ud] "(as<root> / as)"
[fourlang] "(as<root> / as)"

NNP -> Bureau_NNP
[string] Bureau
[tree] NNP(Bureau)
[ud] "(Bureau<root> / Bureau)"
[fourlang] "(Bureau<root> / Bureau)"

NNP -> Caters_NNP
[string] Caters
[tree] NNP(Caters)
[ud] "(Caters<root> / Caters)"
[fourlang] "(Caters<root> / Caters)"

NNP -> LPERIOD_NNP
[string] LPERIOD
[tree] NNP(LPERIOD)
[ud] "(LPERIOD<root> / LPERIOD)"
[fourlang] "(LPERIOD<root> / LPERIOD)"

VBG -> Buying_VBG
[string] Buying
[tree] VBG(Buying)
[ud] "(Buying<root> / Buying)"
[fourlang] "(Buying<root> / Buying)"

JJ -> damaged_JJ
[string] damaged
[tree] JJ(damaged)
[ud] "(damaged<root> / damaged)"
[fourlang] "(damaged<root> / damaged)"

PRP$ -> your_PRP$
[string] your
[tree] PRP$(your)
[ud] "(your<root> / your)"
[fourlang] "(your<root> / your)"

NNS -> deficiencies_NNS
[string] deficiencies
[tree] NNS(deficiencies)
[ud] "(deficiencies<root> / deficiencies)"
[fourlang] "(deficiencies<root> / deficiencies)"

NN -> attention_NN
[string] attention
[tree] NN(attention)
[ud] "(attention<root> / attention)"
[fourlang] "(attention<root> / attention)"

NN -> FEATURE_NN
[string] FEATURE
[tree] NN(FEATURE)
[ud] "(FEATURE<root> / FEATURE)"
[fourlang] "(FEATURE<root> / FEATURE)"

NNP -> Georgia_NNP
[string] Georgia
[tree] NNP(Georgia)
[ud] "(Georgia<root> / Georgia)"
[fourlang] "(Georgia<root> / Georgia)"

IN -> among_IN
[string] among
[tree] IN(among)
[ud] "(among<root> / among)"
[fourlang] "(among<root> / among)"

NNS -> warehouses_NNS
[string] warehouses
[tree] NNS(warehouses)
[ud] "(warehouses<root> / warehouses)"
[fourlang] "(warehouses<root> / warehouses)"

VBN -> identified_VBN
[string] identified
[tree] VBN(identified)
[ud] "(identified<root> / identified)"
[fourlang] "(identified<root> / identified)"

NN -> ballroom_NN
[string] ballroom
[tree] NN(ballroom)
[ud] "(ballroom<root> / ballroom)"
[fourlang] "(ballroom<root> / ballroom)"

NNP -> Chile_NNP
[string] Chile
[tree] NNP(Chile)
[ud] "(Chile<root> / Chile)"
[fourlang] "(Chile<root> / Chile)"

NNP -> Sebastian_NNP
[string] Sebastian
[tree] NNP(Sebastian)
[ud] "(Sebastian<root> / Sebastian)"
[fourlang] "(Sebastian<root> / Sebastian)"

NNP -> Commerce_NNP
[string] Commerce
[tree] NNP(Commerce)
[ud] "(Commerce<root> / Commerce)"
[fourlang] "(Commerce<root> / Commerce)"

VBN -> written_VBN
[string] written
[tree] VBN(written)
[ud] "(written<root> / written)"
[fourlang] "(written<root> / written)"

VBG -> crossing_VBG
[string] crossing
[tree] VBG(crossing)
[ud] "(crossing<root> / crossing)"
[fourlang] "(crossing<root> / crossing)"

JJ -> warHYPHENrationed_JJ
[string] warHYPHENrationed
[tree] JJ(warHYPHENrationed)
[ud] "(warHYPHENrationed<root> / warHYPHENrationed)"
[fourlang] "(warHYPHENrationed<root> / warHYPHENrationed)"

NNP -> Management_NNP
[string] Management
[tree] NNP(Management)
[ud] "(Management<root> / Management)"
[fourlang] "(Management<root> / Management)"

JJ -> international_JJ
[string] international
[tree] JJ(international)
[ud] "(international<root> / international)"
[fourlang] "(international<root> / international)"

WDT -> which_WDT
[string] which
[tree] WDT(which)
[ud] "(which<root> / which)"
[fourlang] "(which<root> / which)"

NN -> statement_NN
[string] statement
[tree] NN(statement)
[ud] "(statement<root> / statement)"
[fourlang] "(statement<root> / statement)"

JJ -> halfHYPHENhour_JJ
[string] halfHYPHENhour
[tree] JJ(halfHYPHENhour)
[ud] "(halfHYPHENhour<root> / halfHYPHENhour)"
[fourlang] "(halfHYPHENhour<root> / halfHYPHENhour)"

RB -> enough_RB
[string] enough
[tree] RB(enough)
[ud] "(enough<root> / enough)"
[fourlang] "(enough<root> / enough)"

NNP -> Society_NNP
[string] Society
[tree] NNP(Society)
[ud] "(Society<root> / Society)"
[fourlang] "(Society<root> / Society)"

NN -> harm_NN
[string] harm
[tree] NN(harm)
[ud] "(harm<root> / harm)"
[fourlang] "(harm<root> / harm)"

NN -> resistance_NN
[string] resistance
[tree] NN(resistance)
[ud] "(resistance<root> / resistance)"
[fourlang] "(resistance<root> / resistance)"

NNP -> Kondo_NNP
[string] Kondo
[tree] NNP(Kondo)
[ud] "(Kondo<root> / Kondo)"
[fourlang] "(Kondo<root> / Kondo)"

NNP -> Publishing_NNP
[string] Publishing
[tree] NNP(Publishing)
[ud] "(Publishing<root> / Publishing)"
[fourlang] "(Publishing<root> / Publishing)"

NNP -> Journal_NNP
[string] Journal
[tree] NNP(Journal)
[ud] "(Journal<root> / Journal)"
[fourlang] "(Journal<root> / Journal)"

VB -> have_VB
[string] have
[tree] VB(have)
[ud] "(have<root> / have)"
[fourlang] "(have<root> / have)"

NNP -> Breakey_NNP
[string] Breakey
[tree] NNP(Breakey)
[ud] "(Breakey<root> / Breakey)"
[fourlang] "(Breakey<root> / Breakey)"

NNP -> Edwards_NNP
[string] Edwards
[tree] NNP(Edwards)
[ud] "(Edwards<root> / Edwards)"
[fourlang] "(Edwards<root> / Edwards)"

NNS -> scenes_NNS
[string] scenes
[tree] NNS(scenes)
[ud] "(scenes<root> / scenes)"
[fourlang] "(scenes<root> / scenes)"

NNP -> MrPERIOD_NNP
[string] MrPERIOD
[tree] NNP(MrPERIOD)
[ud] "(MrPERIOD<root> / MrPERIOD)"
[fourlang] "(MrPERIOD<root> / MrPERIOD)"

NNS -> shudders_NNS
[string] shudders
[tree] NNS(shudders)
[ud] "(shudders<root> / shudders)"
[fourlang] "(shudders<root> / shudders)"

NNP -> Montgomery_NNP
[string] Montgomery
[tree] NNP(Montgomery)
[ud] "(Montgomery<root> / Montgomery)"
[fourlang] "(Montgomery<root> / Montgomery)"

NN -> compensation_NN
[string] compensation
[tree] NN(compensation)
[ud] "(compensation<root> / compensation)"
[fourlang] "(compensation<root> / compensation)"

NN -> tradition_NN
[string] tradition
[tree] NN(tradition)
[ud] "(tradition<root> / tradition)"
[fourlang] "(tradition<root> / tradition)"

JJ -> industrywide_JJ
[string] industrywide
[tree] JJ(industrywide)
[ud] "(industrywide<root> / industrywide)"
[fourlang] "(industrywide<root> / industrywide)"

NN -> radio_NN
[string] radio
[tree] NN(radio)
[ud] "(radio<root> / radio)"
[fourlang] "(radio<root> / radio)"

NNP -> Fund_NNP
[string] Fund
[tree] NNP(Fund)
[ud] "(Fund<root> / Fund)"
[fourlang] "(Fund<root> / Fund)"

NN -> operation_NN
[string] operation
[tree] NN(operation)
[ud] "(operation<root> / operation)"
[fourlang] "(operation<root> / operation)"

NNS -> lives_NNS
[string] lives
[tree] NNS(lives)
[ud] "(lives<root> / lives)"
[fourlang] "(lives<root> / lives)"

NN -> back_NN
[string] back
[tree] NN(back)
[ud] "(back<root> / back)"
[fourlang] "(back<root> / back)"

RB -> very_RB
[string] very
[tree] RB(very)
[ud] "(very<root> / very)"
[fourlang] "(very<root> / very)"

JJ -> light_JJ
[string] light
[tree] JJ(light)
[ud] "(light<root> / light)"
[fourlang] "(light<root> / light)"

NNP -> Allen_NNP
[string] Allen
[tree] NNP(Allen)
[ud] "(Allen<root> / Allen)"
[fourlang] "(Allen<root> / Allen)"

NNS -> pyramids_NNS
[string] pyramids
[tree] NNS(pyramids)
[ud] "(pyramids<root> / pyramids)"
[fourlang] "(pyramids<root> / pyramids)"

NN -> crocidolite_NN
[string] crocidolite
[tree] NN(crocidolite)
[ud] "(crocidolite<root> / crocidolite)"
[fourlang] "(crocidolite<root> / crocidolite)"

NNPS -> Futures_NNPS
[string] Futures
[tree] NNPS(Futures)
[ud] "(Futures<root> / Futures)"
[fourlang] "(Futures<root> / Futures)"

NN -> taxation_NN
[string] taxation
[tree] NN(taxation)
[ud] "(taxation<root> / taxation)"
[fourlang] "(taxation<root> / taxation)"

NNPS -> Contras_NNPS
[string] Contras
[tree] NNPS(Contras)
[ud] "(Contras<root> / Contras)"
[fourlang] "(Contras<root> / Contras)"

NNP -> Derel_NNP
[string] Derel
[tree] NNP(Derel)
[ud] "(Derel<root> / Derel)"
[fourlang] "(Derel<root> / Derel)"

NNP -> R_NNP
[string] R
[tree] NNP(R)
[ud] "(R<root> / R)"
[fourlang] "(R<root> / R)"

DT -> That_DT
[string] That
[tree] DT(That)
[ud] "(That<root> / That)"
[fourlang] "(That<root> / That)"

JJ -> overall_JJ
[string] overall
[tree] JJ(overall)
[ud] "(overall<root> / overall)"
[fourlang] "(overall<root> / overall)"

VB -> match_VB
[string] match
[tree] VB(match)
[ud] "(match<root> / match)"
[fourlang] "(match<root> / match)"

NN -> proponent_NN
[string] proponent
[tree] NN(proponent)
[ud] "(proponent<root> / proponent)"
[fourlang] "(proponent<root> / proponent)"

NNP -> Walters_NNP
[string] Walters
[tree] NNP(Walters)
[ud] "(Walters<root> / Walters)"
[fourlang] "(Walters<root> / Walters)"

NNS -> fees_NNS
[string] fees
[tree] NNS(fees)
[ud] "(fees<root> / fees)"
[fourlang] "(fees<root> / fees)"

NN -> meal_NN
[string] meal
[tree] NN(meal)
[ud] "(meal<root> / meal)"
[fourlang] "(meal<root> / meal)"

NNS -> buses_NNS
[string] buses
[tree] NNS(buses)
[ud] "(buses<root> / buses)"
[fourlang] "(buses<root> / buses)"

NNS -> forestHYPHENproducts_NNS
[string] forestHYPHENproducts
[tree] NNS(forestHYPHENproducts)
[ud] "(forestHYPHENproducts<root> / forestHYPHENproducts)"
[fourlang] "(forestHYPHENproducts<root> / forestHYPHENproducts)"

NNP -> Trudeau_NNP
[string] Trudeau
[tree] NNP(Trudeau)
[ud] "(Trudeau<root> / Trudeau)"
[fourlang] "(Trudeau<root> / Trudeau)"

NNP -> Manufacturing_NNP
[string] Manufacturing
[tree] NNP(Manufacturing)
[ud] "(Manufacturing<root> / Manufacturing)"
[fourlang] "(Manufacturing<root> / Manufacturing)"

NN -> compilation_NN
[string] compilation
[tree] NN(compilation)
[ud] "(compilation<root> / compilation)"
[fourlang] "(compilation<root> / compilation)"

NN -> project_NN
[string] project
[tree] NN(project)
[ud] "(project<root> / project)"
[fourlang] "(project<root> / project)"

JJ -> cardiovascular_JJ
[string] cardiovascular
[tree] JJ(cardiovascular)
[ud] "(cardiovascular<root> / cardiovascular)"
[fourlang] "(cardiovascular<root> / cardiovascular)"

NNS -> strategies_NNS
[string] strategies
[tree] NNS(strategies)
[ud] "(strategies<root> / strategies)"
[fourlang] "(strategies<root> / strategies)"

NN -> vicar_NN
[string] vicar
[tree] NN(vicar)
[ud] "(vicar<root> / vicar)"
[fourlang] "(vicar<root> / vicar)"

VBG -> purchasing_VBG
[string] purchasing
[tree] VBG(purchasing)
[ud] "(purchasing<root> / purchasing)"
[fourlang] "(purchasing<root> / purchasing)"

NNP -> Tribune_NNP
[string] Tribune
[tree] NNP(Tribune)
[ud] "(Tribune<root> / Tribune)"
[fourlang] "(Tribune<root> / Tribune)"

NNP -> Intermediate_NNP
[string] Intermediate
[tree] NNP(Intermediate)
[ud] "(Intermediate<root> / Intermediate)"
[fourlang] "(Intermediate<root> / Intermediate)"

NNP -> Us_NNP
[string] Us
[tree] NNP(Us)
[ud] "(Us<root> / Us)"
[fourlang] "(Us<root> / Us)"

VBP -> violate_VBP
[string] violate
[tree] VBP(violate)
[ud] "(violate<root> / violate)"
[fourlang] "(violate<root> / violate)"

NN -> eye_NN
[string] eye
[tree] NN(eye)
[ud] "(eye<root> / eye)"
[fourlang] "(eye<root> / eye)"

NN -> mix_NN
[string] mix
[tree] NN(mix)
[ud] "(mix<root> / mix)"
[fourlang] "(mix<root> / mix)"

NNPS -> Stores_NNPS
[string] Stores
[tree] NNPS(Stores)
[ud] "(Stores<root> / Stores)"
[fourlang] "(Stores<root> / Stores)"

NNS -> ads_NNS
[string] ads
[tree] NNS(ads)
[ud] "(ads<root> / ads)"
[fourlang] "(ads<root> / ads)"

NNP -> Monticello_NNP
[string] Monticello
[tree] NNP(Monticello)
[ud] "(Monticello<root> / Monticello)"
[fourlang] "(Monticello<root> / Monticello)"

NN -> weight_NN
[string] weight
[tree] NN(weight)
[ud] "(weight<root> / weight)"
[fourlang] "(weight<root> / weight)"

NNP -> Hong_NNP
[string] Hong
[tree] NNP(Hong)
[ud] "(Hong<root> / Hong)"
[fourlang] "(Hong<root> / Hong)"

NN -> committee_NN
[string] committee
[tree] NN(committee)
[ud] "(committee<root> / committee)"
[fourlang] "(committee<root> / committee)"

NNS -> billions_NNS
[string] billions
[tree] NNS(billions)
[ud] "(billions<root> / billions)"
[fourlang] "(billions<root> / billions)"

NNS -> rumors_NNS
[string] rumors
[tree] NNS(rumors)
[ud] "(rumors<root> / rumors)"
[fourlang] "(rumors<root> / rumors)"

NNP -> DelPERIOD_NNP
[string] DelPERIOD
[tree] NNP(DelPERIOD)
[ud] "(DelPERIOD<root> / DelPERIOD)"
[fourlang] "(DelPERIOD<root> / DelPERIOD)"

NNS -> samples_NNS
[string] samples
[tree] NNS(samples)
[ud] "(samples<root> / samples)"
[fourlang] "(samples<root> / samples)"

NNS -> belts_NNS
[string] belts
[tree] NNS(belts)
[ud] "(belts<root> / belts)"
[fourlang] "(belts<root> / belts)"

VBN -> desired_VBN
[string] desired
[tree] VBN(desired)
[ud] "(desired<root> / desired)"
[fourlang] "(desired<root> / desired)"

PUNCT -> COLON_PUNCT
[string] COLON
[tree] PUNCT(COLON)
[ud] "(COLON<root> / COLON)"
[fourlang] "(COLON<root> / COLON)"

JJ -> classic_JJ
[string] classic
[tree] JJ(classic)
[ud] "(classic<root> / classic)"
[fourlang] "(classic<root> / classic)"

NN -> auction_NN
[string] auction
[tree] NN(auction)
[ud] "(auction<root> / auction)"
[fourlang] "(auction<root> / auction)"

NNPS -> States_NNPS
[string] States
[tree] NNPS(States)
[ud] "(States<root> / States)"
[fourlang] "(States<root> / States)"

NNP -> Exxon_NNP
[string] Exxon
[tree] NNP(Exxon)
[ud] "(Exxon<root> / Exxon)"
[fourlang] "(Exxon<root> / Exxon)"

NNP -> Education_NNP
[string] Education
[tree] NNP(Education)
[ud] "(Education<root> / Education)"
[fourlang] "(Education<root> / Education)"

NNP -> Edelman_NNP
[string] Edelman
[tree] NNP(Edelman)
[ud] "(Edelman<root> / Edelman)"
[fourlang] "(Edelman<root> / Edelman)"

NNS -> twoHYPHENthirds_NNS
[string] twoHYPHENthirds
[tree] NNS(twoHYPHENthirds)
[ud] "(twoHYPHENthirds<root> / twoHYPHENthirds)"
[fourlang] "(twoHYPHENthirds<root> / twoHYPHENthirds)"

PRP -> we_PRP
[string] we
[tree] PRP(we)
[ud] "(we<root> / we)"
[fourlang] "(we<root> / we)"

NNP -> Honduras_NNP
[string] Honduras
[tree] NNP(Honduras)
[ud] "(Honduras<root> / Honduras)"
[fourlang] "(Honduras<root> / Honduras)"

NNP -> Israel_NNP
[string] Israel
[tree] NNP(Israel)
[ud] "(Israel<root> / Israel)"
[fourlang] "(Israel<root> / Israel)"

JJ -> studentHYPHENtest_JJ
[string] studentHYPHENtest
[tree] JJ(studentHYPHENtest)
[ud] "(studentHYPHENtest<root> / studentHYPHENtest)"
[fourlang] "(studentHYPHENtest<root> / studentHYPHENtest)"

JJ -> numerous_JJ
[string] numerous
[tree] JJ(numerous)
[ud] "(numerous<root> / numerous)"
[fourlang] "(numerous<root> / numerous)"

VBD -> expanded_VBD
[string] expanded
[tree] VBD(expanded)
[ud] "(expanded<root> / expanded)"
[fourlang] "(expanded<root> / expanded)"

NNS -> patients_NNS
[string] patients
[tree] NNS(patients)
[ud] "(patients<root> / patients)"
[fourlang] "(patients<root> / patients)"

NNP -> Order_NNP
[string] Order
[tree] NNP(Order)
[ud] "(Order<root> / Order)"
[fourlang] "(Order<root> / Order)"

NNP -> In_NNP
[string] In
[tree] NNP(In)
[ud] "(In<root> / In)"
[fourlang] "(In<root> / In)"

NNP -> Utilities_NNP
[string] Utilities
[tree] NNP(Utilities)
[ud] "(Utilities<root> / Utilities)"
[fourlang] "(Utilities<root> / Utilities)"

VBN -> purchased_VBN
[string] purchased
[tree] VBN(purchased)
[ud] "(purchased<root> / purchased)"
[fourlang] "(purchased<root> / purchased)"

NN -> retail_NN
[string] retail
[tree] NN(retail)
[ud] "(retail<root> / retail)"
[fourlang] "(retail<root> / retail)"

NNP -> CALL_NNP
[string] CALL
[tree] NNP(CALL)
[ud] "(CALL<root> / CALL)"
[fourlang] "(CALL<root> / CALL)"

NNP -> Washington_NNP
[string] Washington
[tree] NNP(Washington)
[ud] "(Washington<root> / Washington)"
[fourlang] "(Washington<root> / Washington)"

NN -> business_NN
[string] business
[tree] NN(business)
[ud] "(business<root> / business)"
[fourlang] "(business<root> / business)"

NNP -> Artist_NNP
[string] Artist
[tree] NNP(Artist)
[ud] "(Artist<root> / Artist)"
[fourlang] "(Artist<root> / Artist)"

NN -> apartment_NN
[string] apartment
[tree] NN(apartment)
[ud] "(apartment<root> / apartment)"
[fourlang] "(apartment<root> / apartment)"

JJ -> Italian_JJ
[string] Italian
[tree] JJ(Italian)
[ud] "(Italian<root> / Italian)"
[fourlang] "(Italian<root> / Italian)"

NNP -> Donald_NNP
[string] Donald
[tree] NNP(Donald)
[ud] "(Donald<root> / Donald)"
[fourlang] "(Donald<root> / Donald)"

NNP -> Entertainment_NNP
[string] Entertainment
[tree] NNP(Entertainment)
[ud] "(Entertainment<root> / Entertainment)"
[fourlang] "(Entertainment<root> / Entertainment)"

NNS -> jockeys_NNS
[string] jockeys
[tree] NNS(jockeys)
[ud] "(jockeys<root> / jockeys)"
[fourlang] "(jockeys<root> / jockeys)"

NN -> DEPOSIT_NN
[string] DEPOSIT
[tree] NN(DEPOSIT)
[ud] "(DEPOSIT<root> / DEPOSIT)"
[fourlang] "(DEPOSIT<root> / DEPOSIT)"

NNS -> options_NNS
[string] options
[tree] NNS(options)
[ud] "(options<root> / options)"
[fourlang] "(options<root> / options)"

NNP -> England_NNP
[string] England
[tree] NNP(England)
[ud] "(England<root> / England)"
[fourlang] "(England<root> / England)"

NN -> spilling_NN
[string] spilling
[tree] NN(spilling)
[ud] "(spilling<root> / spilling)"
[fourlang] "(spilling<root> / spilling)"

NNP -> Frankfurt_NNP
[string] Frankfurt
[tree] NNP(Frankfurt)
[ud] "(Frankfurt<root> / Frankfurt)"
[fourlang] "(Frankfurt<root> / Frankfurt)"

NNPS -> Inns_NNPS
[string] Inns
[tree] NNPS(Inns)
[ud] "(Inns<root> / Inns)"
[fourlang] "(Inns<root> / Inns)"

NN -> balloon_NN
[string] balloon
[tree] NN(balloon)
[ud] "(balloon<root> / balloon)"
[fourlang] "(balloon<root> / balloon)"

VBN -> required_VBN
[string] required
[tree] VBN(required)
[ud] "(required<root> / required)"
[fourlang] "(required<root> / required)"

NN -> card_NN
[string] card
[tree] NN(card)
[ud] "(card<root> / card)"
[fourlang] "(card<root> / card)"

NN -> barrier_NN
[string] barrier
[tree] NN(barrier)
[ud] "(barrier<root> / barrier)"
[fourlang] "(barrier<root> / barrier)"

NNP -> HeraldHYPHENAmerican_NNP
[string] HeraldHYPHENAmerican
[tree] NNP(HeraldHYPHENAmerican)
[ud] "(HeraldHYPHENAmerican<root> / HeraldHYPHENAmerican)"
[fourlang] "(HeraldHYPHENAmerican<root> / HeraldHYPHENAmerican)"

NN -> factor_NN
[string] factor
[tree] NN(factor)
[ud] "(factor<root> / factor)"
[fourlang] "(factor<root> / factor)"

NN -> thirdHYPHENquarter_NN
[string] thirdHYPHENquarter
[tree] NN(thirdHYPHENquarter)
[ud] "(thirdHYPHENquarter<root> / thirdHYPHENquarter)"
[fourlang] "(thirdHYPHENquarter<root> / thirdHYPHENquarter)"

NNP -> Phelan_NNP
[string] Phelan
[tree] NNP(Phelan)
[ud] "(Phelan<root> / Phelan)"
[fourlang] "(Phelan<root> / Phelan)"

JJ -> influential_JJ
[string] influential
[tree] JJ(influential)
[ud] "(influential<root> / influential)"
[fourlang] "(influential<root> / influential)"

PRP$ -> her_PRP$
[string] her
[tree] PRP$(her)
[ud] "(her<root> / her)"
[fourlang] "(her<root> / her)"

NN -> chest_NN
[string] chest
[tree] NN(chest)
[ud] "(chest<root> / chest)"
[fourlang] "(chest<root> / chest)"

NN -> thing_NN
[string] thing
[tree] NN(thing)
[ud] "(thing<root> / thing)"
[fourlang] "(thing<root> / thing)"

NNS -> newspapers_NNS
[string] newspapers
[tree] NNS(newspapers)
[ud] "(newspapers<root> / newspapers)"
[fourlang] "(newspapers<root> / newspapers)"

NN -> association_NN
[string] association
[tree] NN(association)
[ud] "(association<root> / association)"
[fourlang] "(association<root> / association)"

JJ -> healthy_JJ
[string] healthy
[tree] JJ(healthy)
[ud] "(healthy<root> / healthy)"
[fourlang] "(healthy<root> / healthy)"

NN -> rival_NN
[string] rival
[tree] NN(rival)
[ud] "(rival<root> / rival)"
[fourlang] "(rival<root> / rival)"

NNP -> Bob_NNP
[string] Bob
[tree] NNP(Bob)
[ud] "(Bob<root> / Bob)"
[fourlang] "(Bob<root> / Bob)"

JJ -> highHYPHENspeed_JJ
[string] highHYPHENspeed
[tree] JJ(highHYPHENspeed)
[ud] "(highHYPHENspeed<root> / highHYPHENspeed)"
[fourlang] "(highHYPHENspeed<root> / highHYPHENspeed)"

NN -> Business_NN
[string] Business
[tree] NN(Business)
[ud] "(Business<root> / Business)"
[fourlang] "(Business<root> / Business)"

NN -> contrast_NN
[string] contrast
[tree] NN(contrast)
[ud] "(contrast<root> / contrast)"
[fourlang] "(contrast<root> / contrast)"

VB -> contest_VB
[string] contest
[tree] VB(contest)
[ud] "(contest<root> / contest)"
[fourlang] "(contest<root> / contest)"

NNP -> Limited_NNP
[string] Limited
[tree] NNP(Limited)
[ud] "(Limited<root> / Limited)"
[fourlang] "(Limited<root> / Limited)"

NNS -> THYPHENshirts_NNS
[string] THYPHENshirts
[tree] NNS(THYPHENshirts)
[ud] "(THYPHENshirts<root> / THYPHENshirts)"
[fourlang] "(THYPHENshirts<root> / THYPHENshirts)"

NNP -> DrPERIOD_NNP
[string] DrPERIOD
[tree] NNP(DrPERIOD)
[ud] "(DrPERIOD<root> / DrPERIOD)"
[fourlang] "(DrPERIOD<root> / DrPERIOD)"

NNS -> types_NNS
[string] types
[tree] NNS(types)
[ud] "(types<root> / types)"
[fourlang] "(types<root> / types)"

NNP -> Life_NNP
[string] Life
[tree] NNP(Life)
[ud] "(Life<root> / Life)"
[fourlang] "(Life<root> / Life)"

NNS -> backlogs_NNS
[string] backlogs
[tree] NNS(backlogs)
[ud] "(backlogs<root> / backlogs)"
[fourlang] "(backlogs<root> / backlogs)"

NNS -> periods_NNS
[string] periods
[tree] NNS(periods)
[ud] "(periods<root> / periods)"
[fourlang] "(periods<root> / periods)"

NNS -> lights_NNS
[string] lights
[tree] NNS(lights)
[ud] "(lights<root> / lights)"
[fourlang] "(lights<root> / lights)"

NNP -> Haruki_NNP
[string] Haruki
[tree] NNP(Haruki)
[ud] "(Haruki<root> / Haruki)"
[fourlang] "(Haruki<root> / Haruki)"

NN -> attitude_NN
[string] attitude
[tree] NN(attitude)
[ud] "(attitude<root> / attitude)"
[fourlang] "(attitude<root> / attitude)"

NN -> target_NN
[string] target
[tree] NN(target)
[ud] "(target<root> / target)"
[fourlang] "(target<root> / target)"

NN -> ACHYPHENDIGITDIGITDIGITU_NN
[string] ACHYPHENDIGITDIGITDIGITU
[tree] NN(ACHYPHENDIGITDIGITDIGITU)
[ud] "(ACHYPHENDIGITDIGITDIGITU<root> / ACHYPHENDIGITDIGITDIGITU)"
[fourlang] "(ACHYPHENDIGITDIGITDIGITU<root> / ACHYPHENDIGITDIGITDIGITU)"

NNP -> Grandsire_NNP
[string] Grandsire
[tree] NNP(Grandsire)
[ud] "(Grandsire<root> / Grandsire)"
[fourlang] "(Grandsire<root> / Grandsire)"

NNS -> assets_NNS
[string] assets
[tree] NNS(assets)
[ud] "(assets<root> / assets)"
[fourlang] "(assets<root> / assets)"

NN -> interview_NN
[string] interview
[tree] NN(interview)
[ud] "(interview<root> / interview)"
[fourlang] "(interview<root> / interview)"

NNP -> Simmons_NNP
[string] Simmons
[tree] NNP(Simmons)
[ud] "(Simmons<root> / Simmons)"
[fourlang] "(Simmons<root> / Simmons)"

CD -> three_CD
[string] three
[tree] CD(three)
[ud] "(three<root> / three)"
[fourlang] "(three<root> / three)"

RB -> ahead_RB
[string] ahead
[tree] RB(ahead)
[ud] "(ahead<root> / ahead)"
[fourlang] "(ahead<root> / ahead)"

NN -> reform_NN
[string] reform
[tree] NN(reform)
[ud] "(reform<root> / reform)"
[fourlang] "(reform<root> / reform)"

NN -> upscale_NN
[string] upscale
[tree] NN(upscale)
[ud] "(upscale<root> / upscale)"
[fourlang] "(upscale<root> / upscale)"

NN -> test_NN
[string] test
[tree] NN(test)
[ud] "(test<root> / test)"
[fourlang] "(test<root> / test)"

NNP -> Bordeaux_NNP
[string] Bordeaux
[tree] NNP(Bordeaux)
[ud] "(Bordeaux<root> / Bordeaux)"
[fourlang] "(Bordeaux<root> / Bordeaux)"

JJ -> popular_JJ
[string] popular
[tree] JJ(popular)
[ud] "(popular<root> / popular)"
[fourlang] "(popular<root> / popular)"

NN -> facility_NN
[string] facility
[tree] NN(facility)
[ud] "(facility<root> / facility)"
[fourlang] "(facility<root> / facility)"

JJ -> mortgageHYPHENbacked_JJ
[string] mortgageHYPHENbacked
[tree] JJ(mortgageHYPHENbacked)
[ud] "(mortgageHYPHENbacked<root> / mortgageHYPHENbacked)"
[fourlang] "(mortgageHYPHENbacked<root> / mortgageHYPHENbacked)"

NNP -> Controls_NNP
[string] Controls
[tree] NNP(Controls)
[ud] "(Controls<root> / Controls)"
[fourlang] "(Controls<root> / Controls)"

NNS -> cars_NNS
[string] cars
[tree] NNS(cars)
[ud] "(cars<root> / cars)"
[fourlang] "(cars<root> / cars)"

JJ -> different_JJ
[string] different
[tree] JJ(different)
[ud] "(different<root> / different)"
[fourlang] "(different<root> / different)"

NN -> mechanism_NN
[string] mechanism
[tree] NN(mechanism)
[ud] "(mechanism<root> / mechanism)"
[fourlang] "(mechanism<root> / mechanism)"

NNS -> guarantees_NNS
[string] guarantees
[tree] NNS(guarantees)
[ud] "(guarantees<root> / guarantees)"
[fourlang] "(guarantees<root> / guarantees)"

JJ -> nonprofit_JJ
[string] nonprofit
[tree] JJ(nonprofit)
[ud] "(nonprofit<root> / nonprofit)"
[fourlang] "(nonprofit<root> / nonprofit)"

IN -> before_IN
[string] before
[tree] IN(before)
[ud] "(before<root> / before)"
[fourlang] "(before<root> / before)"

NNP -> Gorman_NNP
[string] Gorman
[tree] NNP(Gorman)
[ud] "(Gorman<root> / Gorman)"
[fourlang] "(Gorman<root> / Gorman)"

NN -> disagreement_NN
[string] disagreement
[tree] NN(disagreement)
[ud] "(disagreement<root> / disagreement)"
[fourlang] "(disagreement<root> / disagreement)"

NN -> swap_NN
[string] swap
[tree] NN(swap)
[ud] "(swap<root> / swap)"
[fourlang] "(swap<root> / swap)"

NNS -> Customers_NNS
[string] Customers
[tree] NNS(Customers)
[ud] "(Customers<root> / Customers)"
[fourlang] "(Customers<root> / Customers)"

DT -> some_DT
[string] some
[tree] DT(some)
[ud] "(some<root> / some)"
[fourlang] "(some<root> / some)"

JJ -> aggressive_JJ
[string] aggressive
[tree] JJ(aggressive)
[ud] "(aggressive<root> / aggressive)"
[fourlang] "(aggressive<root> / aggressive)"

NN -> fracture_NN
[string] fracture
[tree] NN(fracture)
[ud] "(fracture<root> / fracture)"
[fourlang] "(fracture<root> / fracture)"

VBP -> SQve_VBP
[string] SQve
[tree] VBP(SQve)
[ud] "(SQve<root> / SQve)"
[fourlang] "(SQve<root> / SQve)"

VBD -> did_VBD
[string] did
[tree] VBD(did)
[ud] "(did<root> / did)"
[fourlang] "(did<root> / did)"

JJ -> antiHYPHENChina_JJ
[string] antiHYPHENChina
[tree] JJ(antiHYPHENChina)
[ud] "(antiHYPHENChina<root> / antiHYPHENChina)"
[fourlang] "(antiHYPHENChina<root> / antiHYPHENChina)"

NNP -> Younkers_NNP
[string] Younkers
[tree] NNP(Younkers)
[ud] "(Younkers<root> / Younkers)"
[fourlang] "(Younkers<root> / Younkers)"

NNS -> loans_NNS
[string] loans
[tree] NNS(loans)
[ud] "(loans<root> / loans)"
[fourlang] "(loans<root> / loans)"

PRP$ -> my_PRP$
[string] my
[tree] PRP$(my)
[ud] "(my<root> / my)"
[fourlang] "(my<root> / my)"

CC -> ET_CC
[string] ET
[tree] CC(ET)
[ud] "(ET<root> / ET)"
[fourlang] "(ET<root> / ET)"

JJ -> shortHYPHENwave_JJ
[string] shortHYPHENwave
[tree] JJ(shortHYPHENwave)
[ud] "(shortHYPHENwave<root> / shortHYPHENwave)"
[fourlang] "(shortHYPHENwave<root> / shortHYPHENwave)"

VBN -> launched_VBN
[string] launched
[tree] VBN(launched)
[ud] "(launched<root> / launched)"
[fourlang] "(launched<root> / launched)"

NNP -> Dow_NNP
[string] Dow
[tree] NNP(Dow)
[ud] "(Dow<root> / Dow)"
[fourlang] "(Dow<root> / Dow)"

JJ -> consecutive_JJ
[string] consecutive
[tree] JJ(consecutive)
[ud] "(consecutive<root> / consecutive)"
[fourlang] "(consecutive<root> / consecutive)"

DT -> No_DT
[string] No
[tree] DT(No)
[ud] "(No<root> / No)"
[fourlang] "(No<root> / No)"

VBD -> took_VBD
[string] took
[tree] VBD(took)
[ud] "(took<root> / took)"
[fourlang] "(took<root> / took)"

NN -> identityHYPHENmanagement_NN
[string] identityHYPHENmanagement
[tree] NN(identityHYPHENmanagement)
[ud] "(identityHYPHENmanagement<root> / identityHYPHENmanagement)"
[fourlang] "(identityHYPHENmanagement<root> / identityHYPHENmanagement)"

PRP -> You_PRP
[string] You
[tree] PRP(You)
[ud] "(You<root> / You)"
[fourlang] "(You<root> / You)"

JJ -> brilliant_JJ
[string] brilliant
[tree] JJ(brilliant)
[ud] "(brilliant<root> / brilliant)"
[fourlang] "(brilliant<root> / brilliant)"

NN -> blender_NN
[string] blender
[tree] NN(blender)
[ud] "(blender<root> / blender)"
[fourlang] "(blender<root> / blender)"

NNS -> rentals_NNS
[string] rentals
[tree] NNS(rentals)
[ud] "(rentals<root> / rentals)"
[fourlang] "(rentals<root> / rentals)"

NNP -> GPERIOD_NNP
[string] GPERIOD
[tree] NNP(GPERIOD)
[ud] "(GPERIOD<root> / GPERIOD)"
[fourlang] "(GPERIOD<root> / GPERIOD)"

VB -> stem_VB
[string] stem
[tree] VB(stem)
[ud] "(stem<root> / stem)"
[fourlang] "(stem<root> / stem)"

NNS -> clues_NNS
[string] clues
[tree] NNS(clues)
[ud] "(clues<root> / clues)"
[fourlang] "(clues<root> / clues)"

NN -> Use_NN
[string] Use
[tree] NN(Use)
[ud] "(Use<root> / Use)"
[fourlang] "(Use<root> / Use)"

JJ -> definitive_JJ
[string] definitive
[tree] JJ(definitive)
[ud] "(definitive<root> / definitive)"
[fourlang] "(definitive<root> / definitive)"

NNPS -> Services_NNPS
[string] Services
[tree] NNPS(Services)
[ud] "(Services<root> / Services)"
[fourlang] "(Services<root> / Services)"

NN -> police_NN
[string] police
[tree] NN(police)
[ud] "(police<root> / police)"
[fourlang] "(police<root> / police)"

VBN -> valued_VBN
[string] valued
[tree] VBN(valued)
[ud] "(valued<root> / valued)"
[fourlang] "(valued<root> / valued)"

NNS -> debentures_NNS
[string] debentures
[tree] NNS(debentures)
[ud] "(debentures<root> / debentures)"
[fourlang] "(debentures<root> / debentures)"

NNP -> Bernstein_NNP
[string] Bernstein
[tree] NNP(Bernstein)
[ud] "(Bernstein<root> / Bernstein)"
[fourlang] "(Bernstein<root> / Bernstein)"

CD -> trillion_CD
[string] trillion
[tree] CD(trillion)
[ud] "(trillion<root> / trillion)"
[fourlang] "(trillion<root> / trillion)"

JJ -> surprising_JJ
[string] surprising
[tree] JJ(surprising)
[ud] "(surprising<root> / surprising)"
[fourlang] "(surprising<root> / surprising)"

VB -> seek_VB
[string] seek
[tree] VB(seek)
[ud] "(seek<root> / seek)"
[fourlang] "(seek<root> / seek)"

NN -> funding_NN
[string] funding
[tree] NN(funding)
[ud] "(funding<root> / funding)"
[fourlang] "(funding<root> / funding)"

NN -> sewingHYPHENmachine_NN
[string] sewingHYPHENmachine
[tree] NN(sewingHYPHENmachine)
[ud] "(sewingHYPHENmachine<root> / sewingHYPHENmachine)"
[fourlang] "(sewingHYPHENmachine<root> / sewingHYPHENmachine)"

NN -> equalHYPHENopportunity_NN
[string] equalHYPHENopportunity
[tree] NN(equalHYPHENopportunity)
[ud] "(equalHYPHENopportunity<root> / equalHYPHENopportunity)"
[fourlang] "(equalHYPHENopportunity<root> / equalHYPHENopportunity)"

MD -> Can_MD
[string] Can
[tree] MD(Can)
[ud] "(Can<root> / Can)"
[fourlang] "(Can<root> / Can)"

NN -> issue_NN
[string] issue
[tree] NN(issue)
[ud] "(issue<root> / issue)"
[fourlang] "(issue<root> / issue)"

NN -> financing_NN
[string] financing
[tree] NN(financing)
[ud] "(financing<root> / financing)"
[fourlang] "(financing<root> / financing)"

NNP -> Time_NNP
[string] Time
[tree] NNP(Time)
[ud] "(Time<root> / Time)"
[fourlang] "(Time<root> / Time)"

NN -> Dividend_NN
[string] Dividend
[tree] NN(Dividend)
[ud] "(Dividend<root> / Dividend)"
[fourlang] "(Dividend<root> / Dividend)"

RB -> Much_RB
[string] Much
[tree] RB(Much)
[ud] "(Much<root> / Much)"
[fourlang] "(Much<root> / Much)"

NNP -> Meridian_NNP
[string] Meridian
[tree] NNP(Meridian)
[ud] "(Meridian<root> / Meridian)"
[fourlang] "(Meridian<root> / Meridian)"

JJ -> abortionHYPHENrelated_JJ
[string] abortionHYPHENrelated
[tree] JJ(abortionHYPHENrelated)
[ud] "(abortionHYPHENrelated<root> / abortionHYPHENrelated)"
[fourlang] "(abortionHYPHENrelated<root> / abortionHYPHENrelated)"

IN -> of_IN
[string] of
[tree] IN(of)
[ud] "(of<root> / of)"
[fourlang] "(of<root> / of)"

JJ -> advanced_JJ
[string] advanced
[tree] JJ(advanced)
[ud] "(advanced<root> / advanced)"
[fourlang] "(advanced<root> / advanced)"

NN -> choice_NN
[string] choice
[tree] NN(choice)
[ud] "(choice<root> / choice)"
[fourlang] "(choice<root> / choice)"

_NONE_ -> ASTERISKPPAASTERISKHYPHENDIGIT__NONE_
[string] ASTERISKPPAASTERISKHYPHENDIGIT
[tree] _NONE_(ASTERISKPPAASTERISKHYPHENDIGIT)
[ud] "(ASTERISKPPAASTERISKHYPHENDIGIT<root> / ASTERISKPPAASTERISKHYPHENDIGIT)"
[fourlang] "(ASTERISKPPAASTERISKHYPHENDIGIT<root> / ASTERISKPPAASTERISKHYPHENDIGIT)"

NNP -> Salty_NNP
[string] Salty
[tree] NNP(Salty)
[ud] "(Salty<root> / Salty)"
[fourlang] "(Salty<root> / Salty)"

NN -> garbage_NN
[string] garbage
[tree] NN(garbage)
[ud] "(garbage<root> / garbage)"
[fourlang] "(garbage<root> / garbage)"

NNP -> Team_NNP
[string] Team
[tree] NNP(Team)
[ud] "(Team<root> / Team)"
[fourlang] "(Team<root> / Team)"

NNP -> DOONESBURY_NNP
[string] DOONESBURY
[tree] NNP(DOONESBURY)
[ud] "(DOONESBURY<root> / DOONESBURY)"
[fourlang] "(DOONESBURY<root> / DOONESBURY)"

NNS -> polluters_NNS
[string] polluters
[tree] NNS(polluters)
[ud] "(polluters<root> / polluters)"
[fourlang] "(polluters<root> / polluters)"

NN -> directorship_NN
[string] directorship
[tree] NN(directorship)
[ud] "(directorship<root> / directorship)"
[fourlang] "(directorship<root> / directorship)"

NNS -> drops_NNS
[string] drops
[tree] NNS(drops)
[ud] "(drops<root> / drops)"
[fourlang] "(drops<root> / drops)"

NNS -> Results_NNS
[string] Results
[tree] NNS(Results)
[ud] "(Results<root> / Results)"
[fourlang] "(Results<root> / Results)"

JJ -> certain_JJ
[string] certain
[tree] JJ(certain)
[ud] "(certain<root> / certain)"
[fourlang] "(certain<root> / certain)"

NN -> compassion_NN
[string] compassion
[tree] NN(compassion)
[ud] "(compassion<root> / compassion)"
[fourlang] "(compassion<root> / compassion)"

NNP -> Takeshi_NNP
[string] Takeshi
[tree] NNP(Takeshi)
[ud] "(Takeshi<root> / Takeshi)"
[fourlang] "(Takeshi<root> / Takeshi)"

NN -> fall_NN
[string] fall
[tree] NN(fall)
[ud] "(fall<root> / fall)"
[fourlang] "(fall<root> / fall)"

JJ -> black_JJ
[string] black
[tree] JJ(black)
[ud] "(black<root> / black)"
[fourlang] "(black<root> / black)"

JJ -> derivative_JJ
[string] derivative
[tree] JJ(derivative)
[ud] "(derivative<root> / derivative)"
[fourlang] "(derivative<root> / derivative)"

_NONE_ -> ASTERISKICHASTERISKHYPHENDIGIT__NONE_
[string] ASTERISKICHASTERISKHYPHENDIGIT
[tree] _NONE_(ASTERISKICHASTERISKHYPHENDIGIT)
[ud] "(ASTERISKICHASTERISKHYPHENDIGIT<root> / ASTERISKICHASTERISKHYPHENDIGIT)"
[fourlang] "(ASTERISKICHASTERISKHYPHENDIGIT<root> / ASTERISKICHASTERISKHYPHENDIGIT)"

RB -> here_RB
[string] here
[tree] RB(here)
[ud] "(here<root> / here)"
[fourlang] "(here<root> / here)"

NN -> review_NN
[string] review
[tree] NN(review)
[ud] "(review<root> / review)"
[fourlang] "(review<root> / review)"

NNS -> Relations_NNS
[string] Relations
[tree] NNS(Relations)
[ud] "(Relations<root> / Relations)"
[fourlang] "(Relations<root> / Relations)"

NN -> machine_NN
[string] machine
[tree] NN(machine)
[ud] "(machine<root> / machine)"
[fourlang] "(machine<root> / machine)"

NNS -> results_NNS
[string] results
[tree] NNS(results)
[ud] "(results<root> / results)"
[fourlang] "(results<root> / results)"

CD -> DIGITPERIODDIGIT_CD
[string] DIGITPERIODDIGIT
[tree] CD(DIGITPERIODDIGIT)
[ud] "(DIGITPERIODDIGIT<root> / DIGITPERIODDIGIT)"
[fourlang] "(DIGITPERIODDIGIT<root> / DIGITPERIODDIGIT)"

NNS -> thrifts_NNS
[string] thrifts
[tree] NNS(thrifts)
[ud] "(thrifts<root> / thrifts)"
[fourlang] "(thrifts<root> / thrifts)"

NN -> speculation_NN
[string] speculation
[tree] NN(speculation)
[ud] "(speculation<root> / speculation)"
[fourlang] "(speculation<root> / speculation)"

NN -> litany_NN
[string] litany
[tree] NN(litany)
[ud] "(litany<root> / litany)"
[fourlang] "(litany<root> / litany)"

NNS -> Officials_NNS
[string] Officials
[tree] NNS(Officials)
[ud] "(Officials<root> / Officials)"
[fourlang] "(Officials<root> / Officials)"

NN -> contingent_NN
[string] contingent
[tree] NN(contingent)
[ud] "(contingent<root> / contingent)"
[fourlang] "(contingent<root> / contingent)"

NNP -> Ackerman_NNP
[string] Ackerman
[tree] NNP(Ackerman)
[ud] "(Ackerman<root> / Ackerman)"
[fourlang] "(Ackerman<root> / Ackerman)"

JJ -> broad_JJ
[string] broad
[tree] JJ(broad)
[ud] "(broad<root> / broad)"
[fourlang] "(broad<root> / broad)"

VBN -> accelerated_VBN
[string] accelerated
[tree] VBN(accelerated)
[ud] "(accelerated<root> / accelerated)"
[fourlang] "(accelerated<root> / accelerated)"

NN -> band_NN
[string] band
[tree] NN(band)
[ud] "(band<root> / band)"
[fourlang] "(band<root> / band)"

NN -> subsidiary_NN
[string] subsidiary
[tree] NN(subsidiary)
[ud] "(subsidiary<root> / subsidiary)"
[fourlang] "(subsidiary<root> / subsidiary)"

NNS -> Plans_NNS
[string] Plans
[tree] NNS(Plans)
[ud] "(Plans<root> / Plans)"
[fourlang] "(Plans<root> / Plans)"

NN -> merger_NN
[string] merger
[tree] NN(merger)
[ud] "(merger<root> / merger)"
[fourlang] "(merger<root> / merger)"

VBZ -> expects_VBZ
[string] expects
[tree] VBZ(expects)
[ud] "(expects<root> / expects)"
[fourlang] "(expects<root> / expects)"

NNP -> Donaldson_NNP
[string] Donaldson
[tree] NNP(Donaldson)
[ud] "(Donaldson<root> / Donaldson)"
[fourlang] "(Donaldson<root> / Donaldson)"

NN -> crystal_NN
[string] crystal
[tree] NN(crystal)
[ud] "(crystal<root> / crystal)"
[fourlang] "(crystal<root> / crystal)"

NNP -> Virgin_NNP
[string] Virgin
[tree] NNP(Virgin)
[ud] "(Virgin<root> / Virgin)"
[fourlang] "(Virgin<root> / Virgin)"

IN -> from_IN
[string] from
[tree] IN(from)
[ud] "(from<root> / from)"
[fourlang] "(from<root> / from)"

NNS -> combinations_NNS
[string] combinations
[tree] NNS(combinations)
[ud] "(combinations<root> / combinations)"
[fourlang] "(combinations<root> / combinations)"

CD -> THREE_CD
[string] THREE
[tree] CD(THREE)
[ud] "(THREE<root> / THREE)"
[fourlang] "(THREE<root> / THREE)"

NN -> confidence_NN
[string] confidence
[tree] NN(confidence)
[ud] "(confidence<root> / confidence)"
[fourlang] "(confidence<root> / confidence)"

NN -> worth_NN
[string] worth
[tree] NN(worth)
[ud] "(worth<root> / worth)"
[fourlang] "(worth<root> / worth)"

NNS -> losses_NNS
[string] losses
[tree] NNS(losses)
[ud] "(losses<root> / losses)"
[fourlang] "(losses<root> / losses)"

NN -> subminimum_NN
[string] subminimum
[tree] NN(subminimum)
[ud] "(subminimum<root> / subminimum)"
[fourlang] "(subminimum<root> / subminimum)"

JJ -> young_JJ
[string] young
[tree] JJ(young)
[ud] "(young<root> / young)"
[fourlang] "(young<root> / young)"

NNP -> London_NNP
[string] London
[tree] NNP(London)
[ud] "(London<root> / London)"
[fourlang] "(London<root> / London)"

NNP -> midHYPHENOctober_NNP
[string] midHYPHENOctober
[tree] NNP(midHYPHENOctober)
[ud] "(midHYPHENOctober<root> / midHYPHENOctober)"
[fourlang] "(midHYPHENOctober<root> / midHYPHENOctober)"

VBN -> issued_VBN
[string] issued
[tree] VBN(issued)
[ud] "(issued<root> / issued)"
[fourlang] "(issued<root> / issued)"

IN -> during_IN
[string] during
[tree] IN(during)
[ud] "(during<root> / during)"
[fourlang] "(during<root> / during)"

NNP -> Central_NNP
[string] Central
[tree] NNP(Central)
[ud] "(Central<root> / Central)"
[fourlang] "(Central<root> / Central)"

NN -> region_NN
[string] region
[tree] NN(region)
[ud] "(region<root> / region)"
[fourlang] "(region<root> / region)"

NN -> writing_NN
[string] writing
[tree] NN(writing)
[ud] "(writing<root> / writing)"
[fourlang] "(writing<root> / writing)"

NN -> claim_NN
[string] claim
[tree] NN(claim)
[ud] "(claim<root> / claim)"
[fourlang] "(claim<root> / claim)"

JJ -> lowerHYPHENpriority_JJ
[string] lowerHYPHENpriority
[tree] JJ(lowerHYPHENpriority)
[ud] "(lowerHYPHENpriority<root> / lowerHYPHENpriority)"
[fourlang] "(lowerHYPHENpriority<root> / lowerHYPHENpriority)"

DT -> no_DT
[string] no
[tree] DT(no)
[ud] "(no<root> / no)"
[fourlang] "(no<root> / no)"

RB -> ago_RB
[string] ago
[tree] RB(ago)
[ud] "(ago<root> / ago)"
[fourlang] "(ago<root> / ago)"

NNP -> Bank_NNP
[string] Bank
[tree] NNP(Bank)
[ud] "(Bank<root> / Bank)"
[fourlang] "(Bank<root> / Bank)"

NNP -> Nixon_NNP
[string] Nixon
[tree] NNP(Nixon)
[ud] "(Nixon<root> / Nixon)"
[fourlang] "(Nixon<root> / Nixon)"

JJ -> longHYPHENtime_JJ
[string] longHYPHENtime
[tree] JJ(longHYPHENtime)
[ud] "(longHYPHENtime<root> / longHYPHENtime)"
[fourlang] "(longHYPHENtime<root> / longHYPHENtime)"

NN -> partnership_NN
[string] partnership
[tree] NN(partnership)
[ud] "(partnership<root> / partnership)"
[fourlang] "(partnership<root> / partnership)"

VB -> print_VB
[string] print
[tree] VB(print)
[ud] "(print<root> / print)"
[fourlang] "(print<root> / print)"

JJ -> nonexecutive_JJ
[string] nonexecutive
[tree] JJ(nonexecutive)
[ud] "(nonexecutive<root> / nonexecutive)"
[fourlang] "(nonexecutive<root> / nonexecutive)"

NN -> memory_NN
[string] memory
[tree] NN(memory)
[ud] "(memory<root> / memory)"
[fourlang] "(memory<root> / memory)"

NNP -> Labouisse_NNP
[string] Labouisse
[tree] NNP(Labouisse)
[ud] "(Labouisse<root> / Labouisse)"
[fourlang] "(Labouisse<root> / Labouisse)"

JJ -> buyHYPHENout_JJ
[string] buyHYPHENout
[tree] JJ(buyHYPHENout)
[ud] "(buyHYPHENout<root> / buyHYPHENout)"
[fourlang] "(buyHYPHENout<root> / buyHYPHENout)"

NNS -> subskills_NNS
[string] subskills
[tree] NNS(subskills)
[ud] "(subskills<root> / subskills)"
[fourlang] "(subskills<root> / subskills)"

NNP -> Capitol_NNP
[string] Capitol
[tree] NNP(Capitol)
[ud] "(Capitol<root> / Capitol)"
[fourlang] "(Capitol<root> / Capitol)"

JJ -> pageHYPHENone_JJ
[string] pageHYPHENone
[tree] JJ(pageHYPHENone)
[ud] "(pageHYPHENone<root> / pageHYPHENone)"
[fourlang] "(pageHYPHENone<root> / pageHYPHENone)"

NN -> family_NN
[string] family
[tree] NN(family)
[ud] "(family<root> / family)"
[fourlang] "(family<root> / family)"

NNPS -> Dealers_NNPS
[string] Dealers
[tree] NNPS(Dealers)
[ud] "(Dealers<root> / Dealers)"
[fourlang] "(Dealers<root> / Dealers)"

NN -> recordHYPHENkeeping_NN
[string] recordHYPHENkeeping
[tree] NN(recordHYPHENkeeping)
[ud] "(recordHYPHENkeeping<root> / recordHYPHENkeeping)"
[fourlang] "(recordHYPHENkeeping<root> / recordHYPHENkeeping)"

JJ -> prestigious_JJ
[string] prestigious
[tree] JJ(prestigious)
[ud] "(prestigious<root> / prestigious)"
[fourlang] "(prestigious<root> / prestigious)"

NNS -> dollars_NNS
[string] dollars
[tree] NNS(dollars)
[ud] "(dollars<root> / dollars)"
[fourlang] "(dollars<root> / dollars)"

NN -> Quant_NN
[string] Quant
[tree] NN(Quant)
[ud] "(Quant<root> / Quant)"
[fourlang] "(Quant<root> / Quant)"

NNS -> experts_NNS
[string] experts
[tree] NNS(experts)
[ud] "(experts<root> / experts)"
[fourlang] "(experts<root> / experts)"

JJ -> Hawaiian_JJ
[string] Hawaiian
[tree] JJ(Hawaiian)
[ud] "(Hawaiian<root> / Hawaiian)"
[fourlang] "(Hawaiian<root> / Hawaiian)"

NN -> trade_NN
[string] trade
[tree] NN(trade)
[ud] "(trade<root> / trade)"
[fourlang] "(trade<root> / trade)"

NNP -> Berson_NNP
[string] Berson
[tree] NNP(Berson)
[ud] "(Berson<root> / Berson)"
[fourlang] "(Berson<root> / Berson)"

JJ -> long_JJ
[string] long
[tree] JJ(long)
[ud] "(long<root> / long)"
[fourlang] "(long<root> / long)"

JJ -> national_JJ
[string] national
[tree] JJ(national)
[ud] "(national<root> / national)"
[fourlang] "(national<root> / national)"

NNP -> Cristal_NNP
[string] Cristal
[tree] NNP(Cristal)
[ud] "(Cristal<root> / Cristal)"
[fourlang] "(Cristal<root> / Cristal)"

NNS -> Investors_NNS
[string] Investors
[tree] NNS(Investors)
[ud] "(Investors<root> / Investors)"
[fourlang] "(Investors<root> / Investors)"

VBN -> failed_VBN
[string] failed
[tree] VBN(failed)
[ud] "(failed<root> / failed)"
[fourlang] "(failed<root> / failed)"

VBN -> armed_VBN
[string] armed
[tree] VBN(armed)
[ud] "(armed<root> / armed)"
[fourlang] "(armed<root> / armed)"

WDT -> that_WDT
[string] that
[tree] WDT(that)
[ud] "(that<root> / that)"
[fourlang] "(that<root> / that)"

JJ -> sevenHYPHENday_JJ
[string] sevenHYPHENday
[tree] JJ(sevenHYPHENday)
[ud] "(sevenHYPHENday<root> / sevenHYPHENday)"
[fourlang] "(sevenHYPHENday<root> / sevenHYPHENday)"

NNP -> March_NNP
[string] March
[tree] NNP(March)
[ud] "(March<root> / March)"
[fourlang] "(March<root> / March)"

JJ -> moderate_JJ
[string] moderate
[tree] JJ(moderate)
[ud] "(moderate<root> / moderate)"
[fourlang] "(moderate<root> / moderate)"

VB -> bar_VB
[string] bar
[tree] VB(bar)
[ud] "(bar<root> / bar)"
[fourlang] "(bar<root> / bar)"

JJS -> thirdHYPHENhighest_JJS
[string] thirdHYPHENhighest
[tree] JJS(thirdHYPHENhighest)
[ud] "(thirdHYPHENhighest<root> / thirdHYPHENhighest)"
[fourlang] "(thirdHYPHENhighest<root> / thirdHYPHENhighest)"

NNP -> Princeton_NNP
[string] Princeton
[tree] NNP(Princeton)
[ud] "(Princeton<root> / Princeton)"
[fourlang] "(Princeton<root> / Princeton)"

NNS -> services_NNS
[string] services
[tree] NNS(services)
[ud] "(services<root> / services)"
[fourlang] "(services<root> / services)"

NNP -> Express_NNP
[string] Express
[tree] NNP(Express)
[ud] "(Express<root> / Express)"
[fourlang] "(Express<root> / Express)"

RB -> widely_RB
[string] widely
[tree] RB(widely)
[ud] "(widely<root> / widely)"
[fourlang] "(widely<root> / widely)"

NNS -> governors_NNS
[string] governors
[tree] NNS(governors)
[ud] "(governors<root> / governors)"
[fourlang] "(governors<root> / governors)"

NN -> premium_NN
[string] premium
[tree] NN(premium)
[ud] "(premium<root> / premium)"
[fourlang] "(premium<root> / premium)"

NNP -> Harris_NNP
[string] Harris
[tree] NNP(Harris)
[ud] "(Harris<root> / Harris)"
[fourlang] "(Harris<root> / Harris)"

NNS -> decliners_NNS
[string] decliners
[tree] NNS(decliners)
[ud] "(decliners<root> / decliners)"
[fourlang] "(decliners<root> / decliners)"

NN -> laser_NN
[string] laser
[tree] NN(laser)
[ud] "(laser<root> / laser)"
[fourlang] "(laser<root> / laser)"

VB -> build_VB
[string] build
[tree] VB(build)
[ud] "(build<root> / build)"
[fourlang] "(build<root> / build)"

NNS -> actions_NNS
[string] actions
[tree] NNS(actions)
[ud] "(actions<root> / actions)"
[fourlang] "(actions<root> / actions)"

NN -> wage_NN
[string] wage
[tree] NN(wage)
[ud] "(wage<root> / wage)"
[fourlang] "(wage<root> / wage)"

CD -> five_CD
[string] five
[tree] CD(five)
[ud] "(five<root> / five)"
[fourlang] "(five<root> / five)"

VBN -> performed_VBN
[string] performed
[tree] VBN(performed)
[ud] "(performed<root> / performed)"
[fourlang] "(performed<root> / performed)"

NNS -> fines_NNS
[string] fines
[tree] NNS(fines)
[ud] "(fines<root> / fines)"
[fourlang] "(fines<root> / fines)"

NNS -> brokers_NNS
[string] brokers
[tree] NNS(brokers)
[ud] "(brokers<root> / brokers)"
[fourlang] "(brokers<root> / brokers)"

NN -> temptation_NN
[string] temptation
[tree] NN(temptation)
[ud] "(temptation<root> / temptation)"
[fourlang] "(temptation<root> / temptation)"

NN -> ankle_NN
[string] ankle
[tree] NN(ankle)
[ud] "(ankle<root> / ankle)"
[fourlang] "(ankle<root> / ankle)"

NNS -> days_NNS
[string] days
[tree] NNS(days)
[ud] "(days<root> / days)"
[fourlang] "(days<root> / days)"

VB -> conclude_VB
[string] conclude
[tree] VB(conclude)
[ud] "(conclude<root> / conclude)"
[fourlang] "(conclude<root> / conclude)"

JJ -> Huge_JJ
[string] Huge
[tree] JJ(Huge)
[ud] "(Huge<root> / Huge)"
[fourlang] "(Huge<root> / Huge)"

NNS -> pistols_NNS
[string] pistols
[tree] NNS(pistols)
[ud] "(pistols<root> / pistols)"
[fourlang] "(pistols<root> / pistols)"

NN -> crash_NN
[string] crash
[tree] NN(crash)
[ud] "(crash<root> / crash)"
[fourlang] "(crash<root> / crash)"

NN -> minister_NN
[string] minister
[tree] NN(minister)
[ud] "(minister<root> / minister)"
[fourlang] "(minister<root> / minister)"

NNP -> Droz_NNP
[string] Droz
[tree] NNP(Droz)
[ud] "(Droz<root> / Droz)"
[fourlang] "(Droz<root> / Droz)"

VB -> require_VB
[string] require
[tree] VB(require)
[ud] "(require<root> / require)"
[fourlang] "(require<root> / require)"

NNP -> Orange_NNP
[string] Orange
[tree] NNP(Orange)
[ud] "(Orange<root> / Orange)"
[fourlang] "(Orange<root> / Orange)"

VBZ -> includes_VBZ
[string] includes
[tree] VBZ(includes)
[ud] "(includes<root> / includes)"
[fourlang] "(includes<root> / includes)"

NNS -> magnets_NNS
[string] magnets
[tree] NNS(magnets)
[ud] "(magnets<root> / magnets)"
[fourlang] "(magnets<root> / magnets)"

NNP -> Great_NNP
[string] Great
[tree] NNP(Great)
[ud] "(Great<root> / Great)"
[fourlang] "(Great<root> / Great)"

JJ -> protracted_JJ
[string] protracted
[tree] JJ(protracted)
[ud] "(protracted<root> / protracted)"
[fourlang] "(protracted<root> / protracted)"

NN -> peace_NN
[string] peace
[tree] NN(peace)
[ud] "(peace<root> / peace)"
[fourlang] "(peace<root> / peace)"

NNS -> Cartons_NNS
[string] Cartons
[tree] NNS(Cartons)
[ud] "(Cartons<root> / Cartons)"
[fourlang] "(Cartons<root> / Cartons)"

VB -> give_VB
[string] give
[tree] VB(give)
[ud] "(give<root> / give)"
[fourlang] "(give<root> / give)"

NN -> church_NN
[string] church
[tree] NN(church)
[ud] "(church<root> / church)"
[fourlang] "(church<root> / church)"

JJ -> sharp_JJ
[string] sharp
[tree] JJ(sharp)
[ud] "(sharp<root> / sharp)"
[fourlang] "(sharp<root> / sharp)"

NN -> phaseHYPHENout_NN
[string] phaseHYPHENout
[tree] NN(phaseHYPHENout)
[ud] "(phaseHYPHENout<root> / phaseHYPHENout)"
[fourlang] "(phaseHYPHENout<root> / phaseHYPHENout)"

NN -> Barge_NN
[string] Barge
[tree] NN(Barge)
[ud] "(Barge<root> / Barge)"
[fourlang] "(Barge<root> / Barge)"

NNP -> France_NNP
[string] France
[tree] NNP(France)
[ud] "(France<root> / France)"
[fourlang] "(France<root> / France)"

NNS -> situations_NNS
[string] situations
[tree] NNS(situations)
[ud] "(situations<root> / situations)"
[fourlang] "(situations<root> / situations)"

JJ -> corporate_JJ
[string] corporate
[tree] JJ(corporate)
[ud] "(corporate<root> / corporate)"
[fourlang] "(corporate<root> / corporate)"

NNS -> cities_NNS
[string] cities
[tree] NNS(cities)
[ud] "(cities<root> / cities)"
[fourlang] "(cities<root> / cities)"

NNP -> Pauline_NNP
[string] Pauline
[tree] NNP(Pauline)
[ud] "(Pauline<root> / Pauline)"
[fourlang] "(Pauline<root> / Pauline)"

NNS -> dividends_NNS
[string] dividends
[tree] NNS(dividends)
[ud] "(dividends<root> / dividends)"
[fourlang] "(dividends<root> / dividends)"

NN -> participant_NN
[string] participant
[tree] NN(participant)
[ud] "(participant<root> / participant)"
[fourlang] "(participant<root> / participant)"

NN -> risk_NN
[string] risk
[tree] NN(risk)
[ud] "(risk<root> / risk)"
[fourlang] "(risk<root> / risk)"

NNP -> Shaw_NNP
[string] Shaw
[tree] NNP(Shaw)
[ud] "(Shaw<root> / Shaw)"
[fourlang] "(Shaw<root> / Shaw)"

JJ -> commercial_JJ
[string] commercial
[tree] JJ(commercial)
[ud] "(commercial<root> / commercial)"
[fourlang] "(commercial<root> / commercial)"

JJ -> Strategic_JJ
[string] Strategic
[tree] JJ(Strategic)
[ud] "(Strategic<root> / Strategic)"
[fourlang] "(Strategic<root> / Strategic)"

VBZ -> relies_VBZ
[string] relies
[tree] VBZ(relies)
[ud] "(relies<root> / relies)"
[fourlang] "(relies<root> / relies)"

NN -> squeeze_NN
[string] squeeze
[tree] NN(squeeze)
[ud] "(squeeze<root> / squeeze)"
[fourlang] "(squeeze<root> / squeeze)"

JJ -> cashHYPHENandHYPHENstock_JJ
[string] cashHYPHENandHYPHENstock
[tree] JJ(cashHYPHENandHYPHENstock)
[ud] "(cashHYPHENandHYPHENstock<root> / cashHYPHENandHYPHENstock)"
[fourlang] "(cashHYPHENandHYPHENstock<root> / cashHYPHENandHYPHENstock)"

JJ -> bankHYPHENbacked_JJ
[string] bankHYPHENbacked
[tree] JJ(bankHYPHENbacked)
[ud] "(bankHYPHENbacked<root> / bankHYPHENbacked)"
[fourlang] "(bankHYPHENbacked<root> / bankHYPHENbacked)"

PUNCT -> DOLLAR_PUNCT
[string] DOLLAR
[tree] PUNCT(DOLLAR)
[ud] "(DOLLAR<root> / DOLLAR)"
[fourlang] "(DOLLAR<root> / DOLLAR)"

VBN -> offered_VBN
[string] offered
[tree] VBN(offered)
[ud] "(offered<root> / offered)"
[fourlang] "(offered<root> / offered)"

NN -> insurance_NN
[string] insurance
[tree] NN(insurance)
[ud] "(insurance<root> / insurance)"
[fourlang] "(insurance<root> / insurance)"

NNP -> Terrence_NNP
[string] Terrence
[tree] NNP(Terrence)
[ud] "(Terrence<root> / Terrence)"
[fourlang] "(Terrence<root> / Terrence)"

JJ -> threeHYPHENyear_JJ
[string] threeHYPHENyear
[tree] JJ(threeHYPHENyear)
[ud] "(threeHYPHENyear<root> / threeHYPHENyear)"
[fourlang] "(threeHYPHENyear<root> / threeHYPHENyear)"

NN -> delivery_NN
[string] delivery
[tree] NN(delivery)
[ud] "(delivery<root> / delivery)"
[fourlang] "(delivery<root> / delivery)"

NNS -> materials_NNS
[string] materials
[tree] NNS(materials)
[ud] "(materials<root> / materials)"
[fourlang] "(materials<root> / materials)"

NN -> necklace_NN
[string] necklace
[tree] NN(necklace)
[ud] "(necklace<root> / necklace)"
[fourlang] "(necklace<root> / necklace)"

NNP -> WPERIOD_NNP
[string] WPERIOD
[tree] NNP(WPERIOD)
[ud] "(WPERIOD<root> / WPERIOD)"
[fourlang] "(WPERIOD<root> / WPERIOD)"

NN -> junkHYPHENbond_NN
[string] junkHYPHENbond
[tree] NN(junkHYPHENbond)
[ud] "(junkHYPHENbond<root> / junkHYPHENbond)"
[fourlang] "(junkHYPHENbond<root> / junkHYPHENbond)"

NNP -> PRIME_NNP
[string] PRIME
[tree] NNP(PRIME)
[ud] "(PRIME<root> / PRIME)"
[fourlang] "(PRIME<root> / PRIME)"

NN -> following_NN
[string] following
[tree] NN(following)
[ud] "(following<root> / following)"
[fourlang] "(following<root> / following)"

NN -> conversion_NN
[string] conversion
[tree] NN(conversion)
[ud] "(conversion<root> / conversion)"
[fourlang] "(conversion<root> / conversion)"

VBN -> associated_VBN
[string] associated
[tree] VBN(associated)
[ud] "(associated<root> / associated)"
[fourlang] "(associated<root> / associated)"

NNP -> Finance_NNP
[string] Finance
[tree] NNP(Finance)
[ud] "(Finance<root> / Finance)"
[fourlang] "(Finance<root> / Finance)"

JJ -> domestic_JJ
[string] domestic
[tree] JJ(domestic)
[ud] "(domestic<root> / domestic)"
[fourlang] "(domestic<root> / domestic)"

JJ -> Lead_JJ
[string] Lead
[tree] JJ(Lead)
[ud] "(Lead<root> / Lead)"
[fourlang] "(Lead<root> / Lead)"

NNP -> Tokyu_NNP
[string] Tokyu
[tree] NNP(Tokyu)
[ud] "(Tokyu<root> / Tokyu)"
[fourlang] "(Tokyu<root> / Tokyu)"

NNS -> Contracts_NNS
[string] Contracts
[tree] NNS(Contracts)
[ud] "(Contracts<root> / Contracts)"
[fourlang] "(Contracts<root> / Contracts)"

NNPS -> Friends_NNPS
[string] Friends
[tree] NNPS(Friends)
[ud] "(Friends<root> / Friends)"
[fourlang] "(Friends<root> / Friends)"

JJ -> old_JJ
[string] old
[tree] JJ(old)
[ud] "(old<root> / old)"
[fourlang] "(old<root> / old)"

VBP -> do_VBP
[string] do
[tree] VBP(do)
[ud] "(do<root> / do)"
[fourlang] "(do<root> / do)"

CC -> or_CC
[string] or
[tree] CC(or)
[ud] "(or<root> / or)"
[fourlang] "(or<root> / or)"

NNS -> proposals_NNS
[string] proposals
[tree] NNS(proposals)
[ud] "(proposals<root> / proposals)"
[fourlang] "(proposals<root> / proposals)"

NNP -> Occupational_NNP
[string] Occupational
[tree] NNP(Occupational)
[ud] "(Occupational<root> / Occupational)"
[fourlang] "(Occupational<root> / Occupational)"

NNS -> specialists_NNS
[string] specialists
[tree] NNS(specialists)
[ud] "(specialists<root> / specialists)"
[fourlang] "(specialists<root> / specialists)"

NN -> end_NN
[string] end
[tree] NN(end)
[ud] "(end<root> / end)"
[fourlang] "(end<root> / end)"

CC -> vPERIOD_CC
[string] vPERIOD
[tree] CC(vPERIOD)
[ud] "(vPERIOD<root> / vPERIOD)"
[fourlang] "(vPERIOD<root> / vPERIOD)"

NNS -> commitments_NNS
[string] commitments
[tree] NNS(commitments)
[ud] "(commitments<root> / commitments)"
[fourlang] "(commitments<root> / commitments)"

NN -> smattering_NN
[string] smattering
[tree] NN(smattering)
[ud] "(smattering<root> / smattering)"
[fourlang] "(smattering<root> / smattering)"

NN -> signal_NN
[string] signal
[tree] NN(signal)
[ud] "(signal<root> / signal)"
[fourlang] "(signal<root> / signal)"

NNP -> Leo_NNP
[string] Leo
[tree] NNP(Leo)
[ud] "(Leo<root> / Leo)"
[fourlang] "(Leo<root> / Leo)"

JJ -> Chinese_JJ
[string] Chinese
[tree] JJ(Chinese)
[ud] "(Chinese<root> / Chinese)"
[fourlang] "(Chinese<root> / Chinese)"

NN -> fuel_NN
[string] fuel
[tree] NN(fuel)
[ud] "(fuel<root> / fuel)"
[fourlang] "(fuel<root> / fuel)"

VBZ -> happens_VBZ
[string] happens
[tree] VBZ(happens)
[ud] "(happens<root> / happens)"
[fourlang] "(happens<root> / happens)"

NNS -> accessories_NNS
[string] accessories
[tree] NNS(accessories)
[ud] "(accessories<root> / accessories)"
[fourlang] "(accessories<root> / accessories)"

NN -> maker_NN
[string] maker
[tree] NN(maker)
[ud] "(maker<root> / maker)"
[fourlang] "(maker<root> / maker)"

NN -> burlap_NN
[string] burlap
[tree] NN(burlap)
[ud] "(burlap<root> / burlap)"
[fourlang] "(burlap<root> / burlap)"

RB -> No_RB
[string] No
[tree] RB(No)
[ud] "(No<root> / No)"
[fourlang] "(No<root> / No)"

NNS -> differences_NNS
[string] differences
[tree] NNS(differences)
[ud] "(differences<root> / differences)"
[fourlang] "(differences<root> / differences)"

VBP -> promote_VBP
[string] promote
[tree] VBP(promote)
[ud] "(promote<root> / promote)"
[fourlang] "(promote<root> / promote)"

NNPS -> Preferences_NNPS
[string] Preferences
[tree] NNPS(Preferences)
[ud] "(Preferences<root> / Preferences)"
[fourlang] "(Preferences<root> / Preferences)"

NN -> understanding_NN
[string] understanding
[tree] NN(understanding)
[ud] "(understanding<root> / understanding)"
[fourlang] "(understanding<root> / understanding)"

VB -> exercise_VB
[string] exercise
[tree] VB(exercise)
[ud] "(exercise<root> / exercise)"
[fourlang] "(exercise<root> / exercise)"

JJ -> fixedHYPHENincome_JJ
[string] fixedHYPHENincome
[tree] JJ(fixedHYPHENincome)
[ud] "(fixedHYPHENincome<root> / fixedHYPHENincome)"
[fourlang] "(fixedHYPHENincome<root> / fixedHYPHENincome)"

NN -> penny_NN
[string] penny
[tree] NN(penny)
[ud] "(penny<root> / penny)"
[fourlang] "(penny<root> / penny)"

JJS -> oldest_JJS
[string] oldest
[tree] JJS(oldest)
[ud] "(oldest<root> / oldest)"
[fourlang] "(oldest<root> / oldest)"

_NONE_ -> ASTERISKRNRASTERISKHYPHENDIGIT__NONE_
[string] ASTERISKRNRASTERISKHYPHENDIGIT
[tree] _NONE_(ASTERISKRNRASTERISKHYPHENDIGIT)
[ud] "(ASTERISKRNRASTERISKHYPHENDIGIT<root> / ASTERISKRNRASTERISKHYPHENDIGIT)"
[fourlang] "(ASTERISKRNRASTERISKHYPHENDIGIT<root> / ASTERISKRNRASTERISKHYPHENDIGIT)"

NNS -> chairs_NNS
[string] chairs
[tree] NNS(chairs)
[ud] "(chairs<root> / chairs)"
[fourlang] "(chairs<root> / chairs)"

JJ -> lucrative_JJ
[string] lucrative
[tree] JJ(lucrative)
[ud] "(lucrative<root> / lucrative)"
[fourlang] "(lucrative<root> / lucrative)"

NN -> future_NN
[string] future
[tree] NN(future)
[ud] "(future<root> / future)"
[fourlang] "(future<root> / future)"

NN -> center_NN
[string] center
[tree] NN(center)
[ud] "(center<root> / center)"
[fourlang] "(center<root> / center)"

VB -> say_VB
[string] say
[tree] VB(say)
[ud] "(say<root> / say)"
[fourlang] "(say<root> / say)"

NNS -> highs_NNS
[string] highs
[tree] NNS(highs)
[ud] "(highs<root> / highs)"
[fourlang] "(highs<root> / highs)"

NN -> metal_NN
[string] metal
[tree] NN(metal)
[ud] "(metal<root> / metal)"
[fourlang] "(metal<root> / metal)"

DT -> either_DT
[string] either
[tree] DT(either)
[ud] "(either<root> / either)"
[fourlang] "(either<root> / either)"

VBN -> tested_VBN
[string] tested
[tree] VBN(tested)
[ud] "(tested<root> / tested)"
[fourlang] "(tested<root> / tested)"

VBN -> provided_VBN
[string] provided
[tree] VBN(provided)
[ud] "(provided<root> / provided)"
[fourlang] "(provided<root> / provided)"

NNP -> Dogs_NNP
[string] Dogs
[tree] NNP(Dogs)
[ud] "(Dogs<root> / Dogs)"
[fourlang] "(Dogs<root> / Dogs)"

IN -> OF_IN
[string] OF
[tree] IN(OF)
[ud] "(OF<root> / OF)"
[fourlang] "(OF<root> / OF)"

JJ -> Criminal_JJ
[string] Criminal
[tree] JJ(Criminal)
[ud] "(Criminal<root> / Criminal)"
[fourlang] "(Criminal<root> / Criminal)"

JJ -> hard_JJ
[string] hard
[tree] JJ(hard)
[ud] "(hard<root> / hard)"
[fourlang] "(hard<root> / hard)"

NNS -> hearings_NNS
[string] hearings
[tree] NNS(hearings)
[ud] "(hearings<root> / hearings)"
[fourlang] "(hearings<root> / hearings)"

NNP -> Yang_NNP
[string] Yang
[tree] NNP(Yang)
[ud] "(Yang<root> / Yang)"
[fourlang] "(Yang<root> / Yang)"

NNP -> Lobo_NNP
[string] Lobo
[tree] NNP(Lobo)
[ud] "(Lobo<root> / Lobo)"
[fourlang] "(Lobo<root> / Lobo)"

VBN -> Posted_VBN
[string] Posted
[tree] VBN(Posted)
[ud] "(Posted<root> / Posted)"
[fourlang] "(Posted<root> / Posted)"

NN -> breaker_NN
[string] breaker
[tree] NN(breaker)
[ud] "(breaker<root> / breaker)"
[fourlang] "(breaker<root> / breaker)"

VB -> do_VB
[string] do
[tree] VB(do)
[ud] "(do<root> / do)"
[fourlang] "(do<root> / do)"

NNS -> ounces_NNS
[string] ounces
[tree] NNS(ounces)
[ud] "(ounces<root> / ounces)"
[fourlang] "(ounces<root> / ounces)"

VBP -> air_VBP
[string] air
[tree] VBP(air)
[ud] "(air<root> / air)"
[fourlang] "(air<root> / air)"

NN -> stance_NN
[string] stance
[tree] NN(stance)
[ud] "(stance<root> / stance)"
[fourlang] "(stance<root> / stance)"

NNP -> Knopf_NNP
[string] Knopf
[tree] NNP(Knopf)
[ud] "(Knopf<root> / Knopf)"
[fourlang] "(Knopf<root> / Knopf)"

NNP -> Chateau_NNP
[string] Chateau
[tree] NNP(Chateau)
[ud] "(Chateau<root> / Chateau)"
[fourlang] "(Chateau<root> / Chateau)"

JJ -> familyHYPHENplanning_JJ
[string] familyHYPHENplanning
[tree] JJ(familyHYPHENplanning)
[ud] "(familyHYPHENplanning<root> / familyHYPHENplanning)"
[fourlang] "(familyHYPHENplanning<root> / familyHYPHENplanning)"

JJ -> twoHYPHENyear_JJ
[string] twoHYPHENyear
[tree] JJ(twoHYPHENyear)
[ud] "(twoHYPHENyear<root> / twoHYPHENyear)"
[fourlang] "(twoHYPHENyear<root> / twoHYPHENyear)"

NNP -> HartHYPHENScottHYPHENRodino_NNP
[string] HartHYPHENScottHYPHENRodino
[tree] NNP(HartHYPHENScottHYPHENRodino)
[ud] "(HartHYPHENScottHYPHENRodino<root> / HartHYPHENScottHYPHENRodino)"
[fourlang] "(HartHYPHENScottHYPHENRodino<root> / HartHYPHENScottHYPHENRodino)"

NN -> wake_NN
[string] wake
[tree] NN(wake)
[ud] "(wake<root> / wake)"
[fourlang] "(wake<root> / wake)"

JJ -> historic_JJ
[string] historic
[tree] JJ(historic)
[ud] "(historic<root> / historic)"
[fourlang] "(historic<root> / historic)"

RB -> Too_RB
[string] Too
[tree] RB(Too)
[ud] "(Too<root> / Too)"
[fourlang] "(Too<root> / Too)"

VB -> seem_VB
[string] seem
[tree] VB(seem)
[ud] "(seem<root> / seem)"
[fourlang] "(seem<root> / seem)"

IN -> and_IN
[string] and
[tree] IN(and)
[ud] "(and<root> / and)"
[fourlang] "(and<root> / and)"

JJ -> tense_JJ
[string] tense
[tree] JJ(tense)
[ud] "(tense<root> / tense)"
[fourlang] "(tense<root> / tense)"

NNS -> lobbies_NNS
[string] lobbies
[tree] NNS(lobbies)
[ud] "(lobbies<root> / lobbies)"
[fourlang] "(lobbies<root> / lobbies)"

NN -> voting_NN
[string] voting
[tree] NN(voting)
[ud] "(voting<root> / voting)"
[fourlang] "(voting<root> / voting)"

NNS -> mergers_NNS
[string] mergers
[tree] NNS(mergers)
[ud] "(mergers<root> / mergers)"
[fourlang] "(mergers<root> / mergers)"

NNP -> Series_NNP
[string] Series
[tree] NNP(Series)
[ud] "(Series<root> / Series)"
[fourlang] "(Series<root> / Series)"

NN -> warrant_NN
[string] warrant
[tree] NN(warrant)
[ud] "(warrant<root> / warrant)"
[fourlang] "(warrant<root> / warrant)"

NNPS -> METALS_NNPS
[string] METALS
[tree] NNPS(METALS)
[ud] "(METALS<root> / METALS)"
[fourlang] "(METALS<root> / METALS)"

NNP -> Agency_NNP
[string] Agency
[tree] NNP(Agency)
[ud] "(Agency<root> / Agency)"
[fourlang] "(Agency<root> / Agency)"

NN -> turnaround_NN
[string] turnaround
[tree] NN(turnaround)
[ud] "(turnaround<root> / turnaround)"
[fourlang] "(turnaround<root> / turnaround)"

NNP -> Premier_NNP
[string] Premier
[tree] NNP(Premier)
[ud] "(Premier<root> / Premier)"
[fourlang] "(Premier<root> / Premier)"

NNS -> charges_NNS
[string] charges
[tree] NNS(charges)
[ud] "(charges<root> / charges)"
[fourlang] "(charges<root> / charges)"

NNP -> VaPERIOD_NNP
[string] VaPERIOD
[tree] NNP(VaPERIOD)
[ud] "(VaPERIOD<root> / VaPERIOD)"
[fourlang] "(VaPERIOD<root> / VaPERIOD)"

NN -> blank_NN
[string] blank
[tree] NN(blank)
[ud] "(blank<root> / blank)"
[fourlang] "(blank<root> / blank)"

VBZ -> sends_VBZ
[string] sends
[tree] VBZ(sends)
[ud] "(sends<root> / sends)"
[fourlang] "(sends<root> / sends)"

JJ -> Little_JJ
[string] Little
[tree] JJ(Little)
[ud] "(Little<root> / Little)"
[fourlang] "(Little<root> / Little)"

NN -> advisory_NN
[string] advisory
[tree] NN(advisory)
[ud] "(advisory<root> / advisory)"
[fourlang] "(advisory<root> / advisory)"

PRP$ -> its_PRP$
[string] its
[tree] PRP$(its)
[ud] "(its<root> / its)"
[fourlang] "(its<root> / its)"

VB -> take_VB
[string] take
[tree] VB(take)
[ud] "(take<root> / take)"
[fourlang] "(take<root> / take)"

RB -> unrealistically_RB
[string] unrealistically
[tree] RB(unrealistically)
[ud] "(unrealistically<root> / unrealistically)"
[fourlang] "(unrealistically<root> / unrealistically)"

NNS -> railcars_NNS
[string] railcars
[tree] NNS(railcars)
[ud] "(railcars<root> / railcars)"
[fourlang] "(railcars<root> / railcars)"

NNP -> Estate_NNP
[string] Estate
[tree] NNP(Estate)
[ud] "(Estate<root> / Estate)"
[fourlang] "(Estate<root> / Estate)"

NNP -> Del_NNP
[string] Del
[tree] NNP(Del)
[ud] "(Del<root> / Del)"
[fourlang] "(Del<root> / Del)"

NNS -> texts_NNS
[string] texts
[tree] NNS(texts)
[ud] "(texts<root> / texts)"
[fourlang] "(texts<root> / texts)"

NNP -> January_NNP
[string] January
[tree] NNP(January)
[ud] "(January<root> / January)"
[fourlang] "(January<root> / January)"

NN -> exhaust_NN
[string] exhaust
[tree] NN(exhaust)
[ud] "(exhaust<root> / exhaust)"
[fourlang] "(exhaust<root> / exhaust)"

NN -> frenzy_NN
[string] frenzy
[tree] NN(frenzy)
[ud] "(frenzy<root> / frenzy)"
[fourlang] "(frenzy<root> / frenzy)"

JJ -> European_JJ
[string] European
[tree] JJ(European)
[ud] "(European<root> / European)"
[fourlang] "(European<root> / European)"

VBG -> replacing_VBG
[string] replacing
[tree] VBG(replacing)
[ud] "(replacing<root> / replacing)"
[fourlang] "(replacing<root> / replacing)"

NNP -> Marty_NNP
[string] Marty
[tree] NNP(Marty)
[ud] "(Marty<root> / Marty)"
[fourlang] "(Marty<root> / Marty)"

NN -> weather_NN
[string] weather
[tree] NN(weather)
[ud] "(weather<root> / weather)"
[fourlang] "(weather<root> / weather)"

NN -> bat_NN
[string] bat
[tree] NN(bat)
[ud] "(bat<root> / bat)"
[fourlang] "(bat<root> / bat)"

NNP -> Schwab_NNP
[string] Schwab
[tree] NNP(Schwab)
[ud] "(Schwab<root> / Schwab)"
[fourlang] "(Schwab<root> / Schwab)"

NN -> turn_NN
[string] turn
[tree] NN(turn)
[ud] "(turn<root> / turn)"
[fourlang] "(turn<root> / turn)"

JJ -> journalistic_JJ
[string] journalistic
[tree] JJ(journalistic)
[ud] "(journalistic<root> / journalistic)"
[fourlang] "(journalistic<root> / journalistic)"

JJ -> mortgageHYPHENbased_JJ
[string] mortgageHYPHENbased
[tree] JJ(mortgageHYPHENbased)
[ud] "(mortgageHYPHENbased<root> / mortgageHYPHENbased)"
[fourlang] "(mortgageHYPHENbased<root> / mortgageHYPHENbased)"

NNS -> friends_NNS
[string] friends
[tree] NNS(friends)
[ud] "(friends<root> / friends)"
[fourlang] "(friends<root> / friends)"

RB -> closely_RB
[string] closely
[tree] RB(closely)
[ud] "(closely<root> / closely)"
[fourlang] "(closely<root> / closely)"

NN -> provision_NN
[string] provision
[tree] NN(provision)
[ud] "(provision<root> / provision)"
[fourlang] "(provision<root> / provision)"

NNP -> Tower_NNP
[string] Tower
[tree] NNP(Tower)
[ud] "(Tower<root> / Tower)"
[fourlang] "(Tower<root> / Tower)"

VBN -> retired_VBN
[string] retired
[tree] VBN(retired)
[ud] "(retired<root> / retired)"
[fourlang] "(retired<root> / retired)"

NNP -> Trace_NNP
[string] Trace
[tree] NNP(Trace)
[ud] "(Trace<root> / Trace)"
[fourlang] "(Trace<root> / Trace)"

NNS -> spreads_NNS
[string] spreads
[tree] NNS(spreads)
[ud] "(spreads<root> / spreads)"
[fourlang] "(spreads<root> / spreads)"

NN -> plant_NN
[string] plant
[tree] NN(plant)
[ud] "(plant<root> / plant)"
[fourlang] "(plant<root> / plant)"

JJ -> adjustable_JJ
[string] adjustable
[tree] JJ(adjustable)
[ud] "(adjustable<root> / adjustable)"
[fourlang] "(adjustable<root> / adjustable)"

NN -> wrath_NN
[string] wrath
[tree] NN(wrath)
[ud] "(wrath<root> / wrath)"
[fourlang] "(wrath<root> / wrath)"

NN -> grain_NN
[string] grain
[tree] NN(grain)
[ud] "(grain<root> / grain)"
[fourlang] "(grain<root> / grain)"

NNS -> fields_NNS
[string] fields
[tree] NNS(fields)
[ud] "(fields<root> / fields)"
[fourlang] "(fields<root> / fields)"

RB -> still_RB
[string] still
[tree] RB(still)
[ud] "(still<root> / still)"
[fourlang] "(still<root> / still)"

JJ -> private_JJ
[string] private
[tree] JJ(private)
[ud] "(private<root> / private)"
[fourlang] "(private<root> / private)"

NN -> composting_NN
[string] composting
[tree] NN(composting)
[ud] "(composting<root> / composting)"
[fourlang] "(composting<root> / composting)"

NN -> exchange_NN
[string] exchange
[tree] NN(exchange)
[ud] "(exchange<root> / exchange)"
[fourlang] "(exchange<root> / exchange)"

NN -> package_NN
[string] package
[tree] NN(package)
[ud] "(package<root> / package)"
[fourlang] "(package<root> / package)"

NNP -> Zenith_NNP
[string] Zenith
[tree] NNP(Zenith)
[ud] "(Zenith<root> / Zenith)"
[fourlang] "(Zenith<root> / Zenith)"

NNP -> Deryck_NNP
[string] Deryck
[tree] NNP(Deryck)
[ud] "(Deryck<root> / Deryck)"
[fourlang] "(Deryck<root> / Deryck)"

NN -> editing_NN
[string] editing
[tree] NN(editing)
[ud] "(editing<root> / editing)"
[fourlang] "(editing<root> / editing)"

NN -> discretion_NN
[string] discretion
[tree] NN(discretion)
[ud] "(discretion<root> / discretion)"
[fourlang] "(discretion<root> / discretion)"

NN -> interference_NN
[string] interference
[tree] NN(interference)
[ud] "(interference<root> / interference)"
[fourlang] "(interference<root> / interference)"

RB -> overseas_RB
[string] overseas
[tree] RB(overseas)
[ud] "(overseas<root> / overseas)"
[fourlang] "(overseas<root> / overseas)"

JJ -> asbestosHYPHENrelated_JJ
[string] asbestosHYPHENrelated
[tree] JJ(asbestosHYPHENrelated)
[ud] "(asbestosHYPHENrelated<root> / asbestosHYPHENrelated)"
[fourlang] "(asbestosHYPHENrelated<root> / asbestosHYPHENrelated)"

NN -> movie_NN
[string] movie
[tree] NN(movie)
[ud] "(movie<root> / movie)"
[fourlang] "(movie<root> / movie)"

NNP -> Soups_NNP
[string] Soups
[tree] NNP(Soups)
[ud] "(Soups<root> / Soups)"
[fourlang] "(Soups<root> / Soups)"

VBG -> declining_VBG
[string] declining
[tree] VBG(declining)
[ud] "(declining<root> / declining)"
[fourlang] "(declining<root> / declining)"

JJ -> square_JJ
[string] square
[tree] JJ(square)
[ud] "(square<root> / square)"
[fourlang] "(square<root> / square)"

NN -> post_NN
[string] post
[tree] NN(post)
[ud] "(post<root> / post)"
[fourlang] "(post<root> / post)"

NN -> overhead_NN
[string] overhead
[tree] NN(overhead)
[ud] "(overhead<root> / overhead)"
[fourlang] "(overhead<root> / overhead)"

VB -> review_VB
[string] review
[tree] VB(review)
[ud] "(review<root> / review)"
[fourlang] "(review<root> / review)"

NNP -> MassPERIOD_NNP
[string] MassPERIOD
[tree] NNP(MassPERIOD)
[ud] "(MassPERIOD<root> / MassPERIOD)"
[fourlang] "(MassPERIOD<root> / MassPERIOD)"

NNS -> Sales_NNS
[string] Sales
[tree] NNS(Sales)
[ud] "(Sales<root> / Sales)"
[fourlang] "(Sales<root> / Sales)"

NN -> ball_NN
[string] ball
[tree] NN(ball)
[ud] "(ball<root> / ball)"
[fourlang] "(ball<root> / ball)"

NN -> palace_NN
[string] palace
[tree] NN(palace)
[ud] "(palace<root> / palace)"
[fourlang] "(palace<root> / palace)"

NN -> limit_NN
[string] limit
[tree] NN(limit)
[ud] "(limit<root> / limit)"
[fourlang] "(limit<root> / limit)"

NNP -> County_NNP
[string] County
[tree] NNP(County)
[ud] "(County<root> / County)"
[fourlang] "(County<root> / County)"

NN -> markkaa_NN
[string] markkaa
[tree] NN(markkaa)
[ud] "(markkaa<root> / markkaa)"
[fourlang] "(markkaa<root> / markkaa)"

NNS -> Americana_NNS
[string] Americana
[tree] NNS(Americana)
[ud] "(Americana<root> / Americana)"
[fourlang] "(Americana<root> / Americana)"

NNS -> points_NNS
[string] points
[tree] NNS(points)
[ud] "(points<root> / points)"
[fourlang] "(points<root> / points)"

NN -> way_NN
[string] way
[tree] NN(way)
[ud] "(way<root> / way)"
[fourlang] "(way<root> / way)"

JJ -> absolute_JJ
[string] absolute
[tree] JJ(absolute)
[ud] "(absolute<root> / absolute)"
[fourlang] "(absolute<root> / absolute)"

NN -> filing_NN
[string] filing
[tree] NN(filing)
[ud] "(filing<root> / filing)"
[fourlang] "(filing<root> / filing)"

IN -> except_IN
[string] except
[tree] IN(except)
[ud] "(except<root> / except)"
[fourlang] "(except<root> / except)"

NNP -> Department_NNP
[string] Department
[tree] NNP(Department)
[ud] "(Department<root> / Department)"
[fourlang] "(Department<root> / Department)"

NN -> undersecretary_NN
[string] undersecretary
[tree] NN(undersecretary)
[ud] "(undersecretary<root> / undersecretary)"
[fourlang] "(undersecretary<root> / undersecretary)"

NNP -> White_NNP
[string] White
[tree] NNP(White)
[ud] "(White<root> / White)"
[fourlang] "(White<root> / White)"

NN -> pressman_NN
[string] pressman
[tree] NN(pressman)
[ud] "(pressman<root> / pressman)"
[fourlang] "(pressman<root> / pressman)"

NNP -> Administration_NNP
[string] Administration
[tree] NNP(Administration)
[ud] "(Administration<root> / Administration)"
[fourlang] "(Administration<root> / Administration)"

NNP -> Drexel_NNP
[string] Drexel
[tree] NNP(Drexel)
[ud] "(Drexel<root> / Drexel)"
[fourlang] "(Drexel<root> / Drexel)"

RB -> not_RB
[string] not
[tree] RB(not)
[ud] "(not<root> / not)"
[fourlang] "(not<root> / not)"

NNP -> Generalized_NNP
[string] Generalized
[tree] NNP(Generalized)
[ud] "(Generalized<root> / Generalized)"
[fourlang] "(Generalized<root> / Generalized)"

NN -> prejudice_NN
[string] prejudice
[tree] NN(prejudice)
[ud] "(prejudice<root> / prejudice)"
[fourlang] "(prejudice<root> / prejudice)"

JJ -> considerable_JJ
[string] considerable
[tree] JJ(considerable)
[ud] "(considerable<root> / considerable)"
[fourlang] "(considerable<root> / considerable)"

NNP -> Illuminating_NNP
[string] Illuminating
[tree] NNP(Illuminating)
[ud] "(Illuminating<root> / Illuminating)"
[fourlang] "(Illuminating<root> / Illuminating)"

NNP -> Federal_NNP
[string] Federal
[tree] NNP(Federal)
[ud] "(Federal<root> / Federal)"
[fourlang] "(Federal<root> / Federal)"

VBN -> prepared_VBN
[string] prepared
[tree] VBN(prepared)
[ud] "(prepared<root> / prepared)"
[fourlang] "(prepared<root> / prepared)"

JJ -> fourHYPHENcolor_JJ
[string] fourHYPHENcolor
[tree] JJ(fourHYPHENcolor)
[ud] "(fourHYPHENcolor<root> / fourHYPHENcolor)"
[fourlang] "(fourHYPHENcolor<root> / fourHYPHENcolor)"

NN -> Chapter_NN
[string] Chapter
[tree] NN(Chapter)
[ud] "(Chapter<root> / Chapter)"
[fourlang] "(Chapter<root> / Chapter)"

NNP -> Triton_NNP
[string] Triton
[tree] NNP(Triton)
[ud] "(Triton<root> / Triton)"
[fourlang] "(Triton<root> / Triton)"

NNP -> PRECIOUS_NNP
[string] PRECIOUS
[tree] NNP(PRECIOUS)
[ud] "(PRECIOUS<root> / PRECIOUS)"
[fourlang] "(PRECIOUS<root> / PRECIOUS)"

NN -> minimum_NN
[string] minimum
[tree] NN(minimum)
[ud] "(minimum<root> / minimum)"
[fourlang] "(minimum<root> / minimum)"

NNP -> Glass_NNP
[string] Glass
[tree] NNP(Glass)
[ud] "(Glass<root> / Glass)"
[fourlang] "(Glass<root> / Glass)"

NNP -> Peng_NNP
[string] Peng
[tree] NNP(Peng)
[ud] "(Peng<root> / Peng)"
[fourlang] "(Peng<root> / Peng)"

NN -> revenue_NN
[string] revenue
[tree] NN(revenue)
[ud] "(revenue<root> / revenue)"
[fourlang] "(revenue<root> / revenue)"

VBD -> were_VBD
[string] were
[tree] VBD(were)
[ud] "(were<root> / were)"
[fourlang] "(were<root> / were)"

JJ -> securityHYPHENtype_JJ
[string] securityHYPHENtype
[tree] JJ(securityHYPHENtype)
[ud] "(securityHYPHENtype<root> / securityHYPHENtype)"
[fourlang] "(securityHYPHENtype<root> / securityHYPHENtype)"

JJ -> myriad_JJ
[string] myriad
[tree] JJ(myriad)
[ud] "(myriad<root> / myriad)"
[fourlang] "(myriad<root> / myriad)"

NNS -> octogenarians_NNS
[string] octogenarians
[tree] NNS(octogenarians)
[ud] "(octogenarians<root> / octogenarians)"
[fourlang] "(octogenarians<root> / octogenarians)"

NNP -> Hungary_NNP
[string] Hungary
[tree] NNP(Hungary)
[ud] "(Hungary<root> / Hungary)"
[fourlang] "(Hungary<root> / Hungary)"

NN -> expert_NN
[string] expert
[tree] NN(expert)
[ud] "(expert<root> / expert)"
[fourlang] "(expert<root> / expert)"

JJ -> tailorHYPHENmade_JJ
[string] tailorHYPHENmade
[tree] JJ(tailorHYPHENmade)
[ud] "(tailorHYPHENmade<root> / tailorHYPHENmade)"
[fourlang] "(tailorHYPHENmade<root> / tailorHYPHENmade)"

NN -> announcement_NN
[string] announcement
[tree] NN(announcement)
[ud] "(announcement<root> / announcement)"
[fourlang] "(announcement<root> / announcement)"

NNS -> wires_NNS
[string] wires
[tree] NNS(wires)
[ud] "(wires<root> / wires)"
[fourlang] "(wires<root> / wires)"

NN -> unemployment_NN
[string] unemployment
[tree] NN(unemployment)
[ud] "(unemployment<root> / unemployment)"
[fourlang] "(unemployment<root> / unemployment)"

NNS -> breakers_NNS
[string] breakers
[tree] NNS(breakers)
[ud] "(breakers<root> / breakers)"
[fourlang] "(breakers<root> / breakers)"

NN -> biscuit_NN
[string] biscuit
[tree] NN(biscuit)
[ud] "(biscuit<root> / biscuit)"
[fourlang] "(biscuit<root> / biscuit)"

NN -> principle_NN
[string] principle
[tree] NN(principle)
[ud] "(principle<root> / principle)"
[fourlang] "(principle<root> / principle)"

NNS -> sales_NNS
[string] sales
[tree] NNS(sales)
[ud] "(sales<root> / sales)"
[fourlang] "(sales<root> / sales)"

NNP -> Middlesex_NNP
[string] Middlesex
[tree] NNP(Middlesex)
[ud] "(Middlesex<root> / Middlesex)"
[fourlang] "(Middlesex<root> / Middlesex)"

VB -> suggest_VB
[string] suggest
[tree] VB(suggest)
[ud] "(suggest<root> / suggest)"
[fourlang] "(suggest<root> / suggest)"

NNP -> MERRILL_NNP
[string] MERRILL
[tree] NNP(MERRILL)
[ud] "(MERRILL<root> / MERRILL)"
[fourlang] "(MERRILL<root> / MERRILL)"

NN -> softening_NN
[string] softening
[tree] NN(softening)
[ud] "(softening<root> / softening)"
[fourlang] "(softening<root> / softening)"

NN -> training_NN
[string] training
[tree] NN(training)
[ud] "(training<root> / training)"
[fourlang] "(training<root> / training)"

NNS -> Assets_NNS
[string] Assets
[tree] NNS(Assets)
[ud] "(Assets<root> / Assets)"
[fourlang] "(Assets<root> / Assets)"

NNS -> businesses_NNS
[string] businesses
[tree] NNS(businesses)
[ud] "(businesses<root> / businesses)"
[fourlang] "(businesses<root> / businesses)"

VBG -> cutting_VBG
[string] cutting
[tree] VBG(cutting)
[ud] "(cutting<root> / cutting)"
[fourlang] "(cutting<root> / cutting)"

NNP -> Spillane_NNP
[string] Spillane
[tree] NNP(Spillane)
[ud] "(Spillane<root> / Spillane)"
[fourlang] "(Spillane<root> / Spillane)"

NN -> deadline_NN
[string] deadline
[tree] NN(deadline)
[ud] "(deadline<root> / deadline)"
[fourlang] "(deadline<root> / deadline)"

JJ -> last_JJ
[string] last
[tree] JJ(last)
[ud] "(last<root> / last)"
[fourlang] "(last<root> / last)"

VBZ -> SQs_VBZ
[string] SQs
[tree] VBZ(SQs)
[ud] "(SQs<root> / SQs)"
[fourlang] "(SQs<root> / SQs)"

NNP -> Rally_NNP
[string] Rally
[tree] NNP(Rally)
[ud] "(Rally<root> / Rally)"
[fourlang] "(Rally<root> / Rally)"

NN -> microphone_NN
[string] microphone
[tree] NN(microphone)
[ud] "(microphone<root> / microphone)"
[fourlang] "(microphone<root> / microphone)"

NN -> programHYPHENtrading_NN
[string] programHYPHENtrading
[tree] NN(programHYPHENtrading)
[ud] "(programHYPHENtrading<root> / programHYPHENtrading)"
[fourlang] "(programHYPHENtrading<root> / programHYPHENtrading)"

NNS -> broadcasts_NNS
[string] broadcasts
[tree] NNS(broadcasts)
[ud] "(broadcasts<root> / broadcasts)"
[fourlang] "(broadcasts<root> / broadcasts)"

NNP -> FBI_NNP
[string] FBI
[tree] NNP(FBI)
[ud] "(FBI<root> / FBI)"
[fourlang] "(FBI<root> / FBI)"

JJ -> psychiatric_JJ
[string] psychiatric
[tree] JJ(psychiatric)
[ud] "(psychiatric<root> / psychiatric)"
[fourlang] "(psychiatric<root> / psychiatric)"

NNP -> Occidental_NNP
[string] Occidental
[tree] NNP(Occidental)
[ud] "(Occidental<root> / Occidental)"
[fourlang] "(Occidental<root> / Occidental)"

NNS -> quotations_NNS
[string] quotations
[tree] NNS(quotations)
[ud] "(quotations<root> / quotations)"
[fourlang] "(quotations<root> / quotations)"

NNS -> bells_NNS
[string] bells
[tree] NNS(bells)
[ud] "(bells<root> / bells)"
[fourlang] "(bells<root> / bells)"

JJ -> oneHYPHENtime_JJ
[string] oneHYPHENtime
[tree] JJ(oneHYPHENtime)
[ud] "(oneHYPHENtime<root> / oneHYPHENtime)"
[fourlang] "(oneHYPHENtime<root> / oneHYPHENtime)"

NN -> widow_NN
[string] widow
[tree] NN(widow)
[ud] "(widow<root> / widow)"
[fourlang] "(widow<root> / widow)"

NNS -> pirates_NNS
[string] pirates
[tree] NNS(pirates)
[ud] "(pirates<root> / pirates)"
[fourlang] "(pirates<root> / pirates)"

NN -> value_NN
[string] value
[tree] NN(value)
[ud] "(value<root> / value)"
[fourlang] "(value<root> / value)"

MD -> might_MD
[string] might
[tree] MD(might)
[ud] "(might<root> / might)"
[fourlang] "(might<root> / might)"

VBP -> manage_VBP
[string] manage
[tree] VBP(manage)
[ud] "(manage<root> / manage)"
[fourlang] "(manage<root> / manage)"

NNS -> disposables_NNS
[string] disposables
[tree] NNS(disposables)
[ud] "(disposables<root> / disposables)"
[fourlang] "(disposables<root> / disposables)"

VBG -> slowing_VBG
[string] slowing
[tree] VBG(slowing)
[ud] "(slowing<root> / slowing)"
[fourlang] "(slowing<root> / slowing)"

NNP -> Jenkins_NNP
[string] Jenkins
[tree] NNP(Jenkins)
[ud] "(Jenkins<root> / Jenkins)"
[fourlang] "(Jenkins<root> / Jenkins)"

NNPS -> Charities_NNPS
[string] Charities
[tree] NNPS(Charities)
[ud] "(Charities<root> / Charities)"
[fourlang] "(Charities<root> / Charities)"

NN -> fourthHYPHENquarter_NN
[string] fourthHYPHENquarter
[tree] NN(fourthHYPHENquarter)
[ud] "(fourthHYPHENquarter<root> / fourthHYPHENquarter)"
[fourlang] "(fourthHYPHENquarter<root> / fourthHYPHENquarter)"

NNS -> alternatives_NNS
[string] alternatives
[tree] NNS(alternatives)
[ud] "(alternatives<root> / alternatives)"
[fourlang] "(alternatives<root> / alternatives)"

NN -> asset_NN
[string] asset
[tree] NN(asset)
[ud] "(asset<root> / asset)"
[fourlang] "(asset<root> / asset)"

NN -> road_NN
[string] road
[tree] NN(road)
[ud] "(road<root> / road)"
[fourlang] "(road<root> / road)"

NNS -> measures_NNS
[string] measures
[tree] NNS(measures)
[ud] "(measures<root> / measures)"
[fourlang] "(measures<root> / measures)"

JJ -> Nasty_JJ
[string] Nasty
[tree] JJ(Nasty)
[ud] "(Nasty<root> / Nasty)"
[fourlang] "(Nasty<root> / Nasty)"

NNP -> Transportation_NNP
[string] Transportation
[tree] NNP(Transportation)
[ud] "(Transportation<root> / Transportation)"
[fourlang] "(Transportation<root> / Transportation)"

RB -> otherwise_RB
[string] otherwise
[tree] RB(otherwise)
[ud] "(otherwise<root> / otherwise)"
[fourlang] "(otherwise<root> / otherwise)"

NN -> Metallgesellschaft_NN
[string] Metallgesellschaft
[tree] NN(Metallgesellschaft)
[ud] "(Metallgesellschaft<root> / Metallgesellschaft)"
[fourlang] "(Metallgesellschaft<root> / Metallgesellschaft)"

JJ -> open_JJ
[string] open
[tree] JJ(open)
[ud] "(open<root> / open)"
[fourlang] "(open<root> / open)"

VBN -> changed_VBN
[string] changed
[tree] VBN(changed)
[ud] "(changed<root> / changed)"
[fourlang] "(changed<root> / changed)"

NN -> governor_NN
[string] governor
[tree] NN(governor)
[ud] "(governor<root> / governor)"
[fourlang] "(governor<root> / governor)"

NNP -> Average_NNP
[string] Average
[tree] NNP(Average)
[ud] "(Average<root> / Average)"
[fourlang] "(Average<root> / Average)"

NNS -> means_NNS
[string] means
[tree] NNS(means)
[ud] "(means<root> / means)"
[fourlang] "(means<root> / means)"

NNP -> Schweiz_NNP
[string] Schweiz
[tree] NNP(Schweiz)
[ud] "(Schweiz<root> / Schweiz)"
[fourlang] "(Schweiz<root> / Schweiz)"

VBP -> argue_VBP
[string] argue
[tree] VBP(argue)
[ud] "(argue<root> / argue)"
[fourlang] "(argue<root> / argue)"

JJ -> similar_JJ
[string] similar
[tree] JJ(similar)
[ud] "(similar<root> / similar)"
[fourlang] "(similar<root> / similar)"

NN -> estimate_NN
[string] estimate
[tree] NN(estimate)
[ud] "(estimate<root> / estimate)"
[fourlang] "(estimate<root> / estimate)"

NNP -> Alan_NNP
[string] Alan
[tree] NNP(Alan)
[ud] "(Alan<root> / Alan)"
[fourlang] "(Alan<root> / Alan)"

NNS -> environmentalists_NNS
[string] environmentalists
[tree] NNS(environmentalists)
[ud] "(environmentalists<root> / environmentalists)"
[fourlang] "(environmentalists<root> / environmentalists)"

NNP -> GaPERIOD_NNP
[string] GaPERIOD
[tree] NNP(GaPERIOD)
[ud] "(GaPERIOD<root> / GaPERIOD)"
[fourlang] "(GaPERIOD<root> / GaPERIOD)"

NNP -> Merrill_NNP
[string] Merrill
[tree] NNP(Merrill)
[ud] "(Merrill<root> / Merrill)"
[fourlang] "(Merrill<root> / Merrill)"

NNP -> Salvador_NNP
[string] Salvador
[tree] NNP(Salvador)
[ud] "(Salvador<root> / Salvador)"
[fourlang] "(Salvador<root> / Salvador)"

JJ -> disturbing_JJ
[string] disturbing
[tree] JJ(disturbing)
[ud] "(disturbing<root> / disturbing)"
[fourlang] "(disturbing<root> / disturbing)"

NN -> homeless_NN
[string] homeless
[tree] NN(homeless)
[ud] "(homeless<root> / homeless)"
[fourlang] "(homeless<root> / homeless)"

JJ -> homeless_JJ
[string] homeless
[tree] JJ(homeless)
[ud] "(homeless<root> / homeless)"
[fourlang] "(homeless<root> / homeless)"

NN -> referral_NN
[string] referral
[tree] NN(referral)
[ud] "(referral<root> / referral)"
[fourlang] "(referral<root> / referral)"

JJR -> greater_JJR
[string] greater
[tree] JJR(greater)
[ud] "(greater<root> / greater)"
[fourlang] "(greater<root> / greater)"

NN -> enrollment_NN
[string] enrollment
[tree] NN(enrollment)
[ud] "(enrollment<root> / enrollment)"
[fourlang] "(enrollment<root> / enrollment)"

NNP -> Young_NNP
[string] Young
[tree] NNP(Young)
[ud] "(Young<root> / Young)"
[fourlang] "(Young<root> / Young)"

NNS -> numbers_NNS
[string] numbers
[tree] NNS(numbers)
[ud] "(numbers<root> / numbers)"
[fourlang] "(numbers<root> / numbers)"

JJ -> sympathetic_JJ
[string] sympathetic
[tree] JJ(sympathetic)
[ud] "(sympathetic<root> / sympathetic)"
[fourlang] "(sympathetic<root> / sympathetic)"

NNP -> FOREIGN_NNP
[string] FOREIGN
[tree] NNP(FOREIGN)
[ud] "(FOREIGN<root> / FOREIGN)"
[fourlang] "(FOREIGN<root> / FOREIGN)"

JJ -> big_JJ
[string] big
[tree] JJ(big)
[ud] "(big<root> / big)"
[fourlang] "(big<root> / big)"

JJ -> same_JJ
[string] same
[tree] JJ(same)
[ud] "(same<root> / same)"
[fourlang] "(same<root> / same)"

NN -> decision_NN
[string] decision
[tree] NN(decision)
[ud] "(decision<root> / decision)"
[fourlang] "(decision<root> / decision)"

NN -> purpose_NN
[string] purpose
[tree] NN(purpose)
[ud] "(purpose<root> / purpose)"
[fourlang] "(purpose<root> / purpose)"

NN -> somebody_NN
[string] somebody
[tree] NN(somebody)
[ud] "(somebody<root> / somebody)"
[fourlang] "(somebody<root> / somebody)"

NNP -> Anderson_NNP
[string] Anderson
[tree] NNP(Anderson)
[ud] "(Anderson<root> / Anderson)"
[fourlang] "(Anderson<root> / Anderson)"

NN -> creditHYPHENrating_NN
[string] creditHYPHENrating
[tree] NN(creditHYPHENrating)
[ud] "(creditHYPHENrating<root> / creditHYPHENrating)"
[fourlang] "(creditHYPHENrating<root> / creditHYPHENrating)"

NN -> classroom_NN
[string] classroom
[tree] NN(classroom)
[ud] "(classroom<root> / classroom)"
[fourlang] "(classroom<root> / classroom)"

NNP -> Basham_NNP
[string] Basham
[tree] NNP(Basham)
[ud] "(Basham<root> / Basham)"
[fourlang] "(Basham<root> / Basham)"

DT -> A_DT
[string] A
[tree] DT(A)
[ud] "(A<root> / A)"
[fourlang] "(A<root> / A)"

NNP -> BallantineBSLPERDel_NNP
[string] BallantineBSLPERDel
[tree] NNP(BallantineBSLPERDel)
[ud] "(BallantineBSLPERDel<root> / BallantineBSLPERDel)"
[fourlang] "(BallantineBSLPERDel<root> / BallantineBSLPERDel)"

NNP -> Union_NNP
[string] Union
[tree] NNP(Union)
[ud] "(Union<root> / Union)"
[fourlang] "(Union<root> / Union)"

VBG -> drawing_VBG
[string] drawing
[tree] VBG(drawing)
[ud] "(drawing<root> / drawing)"
[fourlang] "(drawing<root> / drawing)"

NN -> turmoil_NN
[string] turmoil
[tree] NN(turmoil)
[ud] "(turmoil<root> / turmoil)"
[fourlang] "(turmoil<root> / turmoil)"

NNP -> IBM_NNP
[string] IBM
[tree] NNP(IBM)
[ud] "(IBM<root> / IBM)"
[fourlang] "(IBM<root> / IBM)"

NNP -> Bridge_NNP
[string] Bridge
[tree] NNP(Bridge)
[ud] "(Bridge<root> / Bridge)"
[fourlang] "(Bridge<root> / Bridge)"

NNPS -> Containers_NNPS
[string] Containers
[tree] NNPS(Containers)
[ud] "(Containers<root> / Containers)"
[fourlang] "(Containers<root> / Containers)"

NN -> appeal_NN
[string] appeal
[tree] NN(appeal)
[ud] "(appeal<root> / appeal)"
[fourlang] "(appeal<root> / appeal)"

NN -> purhasing_NN
[string] purhasing
[tree] NN(purhasing)
[ud] "(purhasing<root> / purhasing)"
[fourlang] "(purhasing<root> / purhasing)"

NN -> estate_NN
[string] estate
[tree] NN(estate)
[ud] "(estate<root> / estate)"
[fourlang] "(estate<root> / estate)"

NNS -> people_NNS
[string] people
[tree] NNS(people)
[ud] "(people<root> / people)"
[fourlang] "(people<root> / people)"

NNP -> Texas_NNP
[string] Texas
[tree] NNP(Texas)
[ud] "(Texas<root> / Texas)"
[fourlang] "(Texas<root> / Texas)"

VBZ -> perceives_VBZ
[string] perceives
[tree] VBZ(perceives)
[ud] "(perceives<root> / perceives)"
[fourlang] "(perceives<root> / perceives)"

NN -> war_NN
[string] war
[tree] NN(war)
[ud] "(war<root> / war)"
[fourlang] "(war<root> / war)"

NN -> investing_NN
[string] investing
[tree] NN(investing)
[ud] "(investing<root> / investing)"
[fourlang] "(investing<root> / investing)"

VBG -> trying_VBG
[string] trying
[tree] VBG(trying)
[ud] "(trying<root> / trying)"
[fourlang] "(trying<root> / trying)"

NNS -> methods_NNS
[string] methods
[tree] NNS(methods)
[ud] "(methods<root> / methods)"
[fourlang] "(methods<root> / methods)"

IN -> for_IN
[string] for
[tree] IN(for)
[ud] "(for<root> / for)"
[fourlang] "(for<root> / for)"

JJ -> UPERIODNPERIODHYPHENsupervised_JJ
[string] UPERIODNPERIODHYPHENsupervised
[tree] JJ(UPERIODNPERIODHYPHENsupervised)
[ud] "(UPERIODNPERIODHYPHENsupervised<root> / UPERIODNPERIODHYPHENsupervised)"
[fourlang] "(UPERIODNPERIODHYPHENsupervised<root> / UPERIODNPERIODHYPHENsupervised)"

NN -> Bond_NN
[string] Bond
[tree] NN(Bond)
[ud] "(Bond<root> / Bond)"
[fourlang] "(Bond<root> / Bond)"

NN -> bribery_NN
[string] bribery
[tree] NN(bribery)
[ud] "(bribery<root> / bribery)"
[fourlang] "(bribery<root> / bribery)"

NN -> barge_NN
[string] barge
[tree] NN(barge)
[ud] "(barge<root> / barge)"
[fourlang] "(barge<root> / barge)"

NN -> sellHYPHENoff_NN
[string] sellHYPHENoff
[tree] NN(sellHYPHENoff)
[ud] "(sellHYPHENoff<root> / sellHYPHENoff)"
[fourlang] "(sellHYPHENoff<root> / sellHYPHENoff)"

VBN -> acquired_VBN
[string] acquired
[tree] VBN(acquired)
[ud] "(acquired<root> / acquired)"
[fourlang] "(acquired<root> / acquired)"

NN -> interpretation_NN
[string] 'interpretation'
[tree] NN('interpretation')
[ud] "(interpretation<root> / interpretation)"
[fourlang] "(interpretation<root> / interpretation)"

NNP -> Oil_NNP
[string] Oil
[tree] NNP(Oil)
[ud] "(Oil<root> / Oil)"
[fourlang] "(Oil<root> / Oil)"

JJ -> ancillary_JJ
[string] ancillary
[tree] JJ(ancillary)
[ud] "(ancillary<root> / ancillary)"
[fourlang] "(ancillary<root> / ancillary)"

NNS -> resources_NNS
[string] resources
[tree] NNS(resources)
[ud] "(resources<root> / resources)"
[fourlang] "(resources<root> / resources)"

CD -> hundred_CD
[string] hundred
[tree] CD(hundred)
[ud] "(hundred<root> / hundred)"
[fourlang] "(hundred<root> / hundred)"

NNP -> AND_NNP
[string] AND
[tree] NNP(AND)
[ud] "(AND<root> / AND)"
[fourlang] "(AND<root> / AND)"

NNS -> bases_NNS
[string] bases
[tree] NNS(bases)
[ud] "(bases<root> / bases)"
[fourlang] "(bases<root> / bases)"

CD -> DIGIT_CD
[string] DIGIT
[tree] CD(DIGIT)
[ud] "(DIGIT<root> / DIGIT)"
[fourlang] "(DIGIT<root> / DIGIT)"

NNP -> Beth_NNP
[string] Beth
[tree] NNP(Beth)
[ud] "(Beth<root> / Beth)"
[fourlang] "(Beth<root> / Beth)"

NN -> JUDGE_NN
[string] JUDGE
[tree] NN(JUDGE)
[ud] "(JUDGE<root> / JUDGE)"
[fourlang] "(JUDGE<root> / JUDGE)"

NNS -> organizations_NNS
[string] organizations
[tree] NNS(organizations)
[ud] "(organizations<root> / organizations)"
[fourlang] "(organizations<root> / organizations)"

VBN -> funded_VBN
[string] funded
[tree] VBN(funded)
[ud] "(funded<root> / funded)"
[fourlang] "(funded<root> / funded)"

NNS -> waters_NNS
[string] waters
[tree] NNS(waters)
[ud] "(waters<root> / waters)"
[fourlang] "(waters<root> / waters)"

NN -> buyHYPHENout_NN
[string] buyHYPHENout
[tree] NN(buyHYPHENout)
[ud] "(buyHYPHENout<root> / buyHYPHENout)"
[fourlang] "(buyHYPHENout<root> / buyHYPHENout)"

NNPS -> Writers_NNPS
[string] Writers
[tree] NNPS(Writers)
[ud] "(Writers<root> / Writers)"
[fourlang] "(Writers<root> / Writers)"

NN -> survival_NN
[string] survival
[tree] NN(survival)
[ud] "(survival<root> / survival)"
[fourlang] "(survival<root> / survival)"

NN -> expansion_NN
[string] expansion
[tree] NN(expansion)
[ud] "(expansion<root> / expansion)"
[fourlang] "(expansion<root> / expansion)"

JJ -> DIGITDIGITHYPHENaHYPHENshare_JJ
[string] DIGITDIGITHYPHENaHYPHENshare
[tree] JJ(DIGITDIGITHYPHENaHYPHENshare)
[ud] "(DIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITHYPHENaHYPHENshare)"
[fourlang] "(DIGITDIGITHYPHENaHYPHENshare<root> / DIGITDIGITHYPHENaHYPHENshare)"

NNP -> SPERIOD_NNP
[string] SPERIOD
[tree] NNP(SPERIOD)
[ud] "(SPERIOD<root> / SPERIOD)"
[fourlang] "(SPERIOD<root> / SPERIOD)"

NN -> detectiveHYPHENstory_NN
[string] detectiveHYPHENstory
[tree] NN(detectiveHYPHENstory)
[ud] "(detectiveHYPHENstory<root> / detectiveHYPHENstory)"
[fourlang] "(detectiveHYPHENstory<root> / detectiveHYPHENstory)"

NNS -> appeals_NNS
[string] appeals
[tree] NNS(appeals)
[ud] "(appeals<root> / appeals)"
[fourlang] "(appeals<root> / appeals)"

VB -> pursue_VB
[string] pursue
[tree] VB(pursue)
[ud] "(pursue<root> / pursue)"
[fourlang] "(pursue<root> / pursue)"

DT -> that_DT
[string] that
[tree] DT(that)
[ud] "(that<root> / that)"
[fourlang] "(that<root> / that)"

NNP -> Savings_NNP
[string] Savings
[tree] NNP(Savings)
[ud] "(Savings<root> / Savings)"
[fourlang] "(Savings<root> / Savings)"

NN -> reorganization_NN
[string] reorganization
[tree] NN(reorganization)
[ud] "(reorganization<root> / reorganization)"
[fourlang] "(reorganization<root> / reorganization)"

VBG -> losing_VBG
[string] losing
[tree] VBG(losing)
[ud] "(losing<root> / losing)"
[fourlang] "(losing<root> / losing)"

NNP -> Bromwich_NNP
[string] Bromwich
[tree] NNP(Bromwich)
[ud] "(Bromwich<root> / Bromwich)"
[fourlang] "(Bromwich<root> / Bromwich)"

NN -> baseball_NN
[string] baseball
[tree] NN(baseball)
[ud] "(baseball<root> / baseball)"
[fourlang] "(baseball<root> / baseball)"

NN -> flood_NN
[string] flood
[tree] NN(flood)
[ud] "(flood<root> / flood)"
[fourlang] "(flood<root> / flood)"

NN -> passport_NN
[string] passport
[tree] NN(passport)
[ud] "(passport<root> / passport)"
[fourlang] "(passport<root> / passport)"

VBG -> operating_VBG
[string] operating
[tree] VBG(operating)
[ud] "(operating<root> / operating)"
[fourlang] "(operating<root> / operating)"

NNP -> Beverly_NNP
[string] Beverly
[tree] NNP(Beverly)
[ud] "(Beverly<root> / Beverly)"
[fourlang] "(Beverly<root> / Beverly)"

JJ -> positive_JJ
[string] positive
[tree] JJ(positive)
[ud] "(positive<root> / positive)"
[fourlang] "(positive<root> / positive)"

NNS -> stores_NNS
[string] stores
[tree] NNS(stores)
[ud] "(stores<root> / stores)"
[fourlang] "(stores<root> / stores)"

JJ -> active_JJ
[string] active
[tree] JJ(active)
[ud] "(active<root> / active)"
[fourlang] "(active<root> / active)"

NN -> increase_NN
[string] increase
[tree] NN(increase)
[ud] "(increase<root> / increase)"
[fourlang] "(increase<root> / increase)"

NNP -> Common_NNP
[string] Common
[tree] NNP(Common)
[ud] "(Common<root> / Common)"
[fourlang] "(Common<root> / Common)"

NNP -> War_NNP
[string] War
[tree] NNP(War)
[ud] "(War<root> / War)"
[fourlang] "(War<root> / War)"

VBP -> SQm_VBP
[string] SQm
[tree] VBP(SQm)
[ud] "(SQm<root> / SQm)"
[fourlang] "(SQm<root> / SQm)"

NNP -> Fujitsu_NNP
[string] Fujitsu
[tree] NNP(Fujitsu)
[ud] "(Fujitsu<root> / Fujitsu)"
[fourlang] "(Fujitsu<root> / Fujitsu)"

NNS -> powers_NNS
[string] powers
[tree] NNS(powers)
[ud] "(powers<root> / powers)"
[fourlang] "(powers<root> / powers)"

NNS -> motors_NNS
[string] motors
[tree] NNS(motors)
[ud] "(motors<root> / motors)"
[fourlang] "(motors<root> / motors)"

NNPS -> Philippines_NNPS
[string] Philippines
[tree] NNPS(Philippines)
[ud] "(Philippines<root> / Philippines)"
[fourlang] "(Philippines<root> / Philippines)"

NN -> silicon_NN
[string] silicon
[tree] NN(silicon)
[ud] "(silicon<root> / silicon)"
[fourlang] "(silicon<root> / silicon)"

NNP -> Dreyfus_NNP
[string] Dreyfus
[tree] NNP(Dreyfus)
[ud] "(Dreyfus<root> / Dreyfus)"
[fourlang] "(Dreyfus<root> / Dreyfus)"

NN -> parking_NN
[string] parking
[tree] NN(parking)
[ud] "(parking<root> / parking)"
[fourlang] "(parking<root> / parking)"

VB -> file_VB
[string] file
[tree] VB(file)
[ud] "(file<root> / file)"
[fourlang] "(file<root> / file)"

VB -> Put_VB
[string] Put
[tree] VB(Put)
[ud] "(Put<root> / Put)"
[fourlang] "(Put<root> / Put)"

NNS -> trades_NNS
[string] trades
[tree] NNS(trades)
[ud] "(trades<root> / trades)"
[fourlang] "(trades<root> / trades)"

VBP -> read_VBP
[string] read
[tree] VBP(read)
[ud] "(read<root> / read)"
[fourlang] "(read<root> / read)"

NNP -> El_NNP
[string] El
[tree] NNP(El)
[ud] "(El<root> / El)"
[fourlang] "(El<root> / El)"

NNS -> matters_NNS
[string] matters
[tree] NNS(matters)
[ud] "(matters<root> / matters)"
[fourlang] "(matters<root> / matters)"

JJ -> global_JJ
[string] global
[tree] JJ(global)
[ud] "(global<root> / global)"
[fourlang] "(global<root> / global)"

JJR -> higher_JJR
[string] higher
[tree] JJR(higher)
[ud] "(higher<root> / higher)"
[fourlang] "(higher<root> / higher)"

JJ -> individual_JJ
[string] individual
[tree] JJ(individual)
[ud] "(individual<root> / individual)"
[fourlang] "(individual<root> / individual)"

JJ -> judicial_JJ
[string] judicial
[tree] JJ(judicial)
[ud] "(judicial<root> / judicial)"
[fourlang] "(judicial<root> / judicial)"

NNS -> wrists_NNS
[string] wrists
[tree] NNS(wrists)
[ud] "(wrists<root> / wrists)"
[fourlang] "(wrists<root> / wrists)"

VBP -> seem_VBP
[string] seem
[tree] VBP(seem)
[ud] "(seem<root> / seem)"
[fourlang] "(seem<root> / seem)"

NNP -> Chemical_NNP
[string] Chemical
[tree] NNP(Chemical)
[ud] "(Chemical<root> / Chemical)"
[fourlang] "(Chemical<root> / Chemical)"

NN -> aftermath_NN
[string] aftermath
[tree] NN(aftermath)
[ud] "(aftermath<root> / aftermath)"
[fourlang] "(aftermath<root> / aftermath)"

NN -> material_NN
[string] material
[tree] NN(material)
[ud] "(material<root> / material)"
[fourlang] "(material<root> / material)"

NNS -> underwriters_NNS
[string] underwriters
[tree] NNS(underwriters)
[ud] "(underwriters<root> / underwriters)"
[fourlang] "(underwriters<root> / underwriters)"

NNS -> Plains_NNS
[string] Plains
[tree] NNS(Plains)
[ud] "(Plains<root> / Plains)"
[fourlang] "(Plains<root> / Plains)"

NN -> wrongdoing_NN
[string] wrongdoing
[tree] NN(wrongdoing)
[ud] "(wrongdoing<root> / wrongdoing)"
[fourlang] "(wrongdoing<root> / wrongdoing)"

NNS -> meals_NNS
[string] meals
[tree] NNS(meals)
[ud] "(meals<root> / meals)"
[fourlang] "(meals<root> / meals)"

NNP -> Belt_NNP
[string] Belt
[tree] NNP(Belt)
[ud] "(Belt<root> / Belt)"
[fourlang] "(Belt<root> / Belt)"

JJ -> useful_JJ
[string] useful
[tree] JJ(useful)
[ud] "(useful<root> / useful)"
[fourlang] "(useful<root> / useful)"

NNS -> Savings_NNS
[string] Savings
[tree] NNS(Savings)
[ud] "(Savings<root> / Savings)"
[fourlang] "(Savings<root> / Savings)"

NN -> commitment_NN
[string] commitment
[tree] NN(commitment)
[ud] "(commitment<root> / commitment)"
[fourlang] "(commitment<root> / commitment)"

NNP -> Mason_NNP
[string] Mason
[tree] NNP(Mason)
[ud] "(Mason<root> / Mason)"
[fourlang] "(Mason<root> / Mason)"

NNP -> America_NNP
[string] America
[tree] NNP(America)
[ud] "(America<root> / America)"
[fourlang] "(America<root> / America)"

NNP -> nonHYPHENUPERIODSPERIOD_NNP
[string] nonHYPHENUPERIODSPERIOD
[tree] NNP(nonHYPHENUPERIODSPERIOD)
[ud] "(nonHYPHENUPERIODSPERIOD<root> / nonHYPHENUPERIODSPERIOD)"
[fourlang] "(nonHYPHENUPERIODSPERIOD<root> / nonHYPHENUPERIODSPERIOD)"

IN -> next_IN
[string] next
[tree] IN(next)
[ud] "(next<root> / next)"
[fourlang] "(next<root> / next)"

NN -> course_NN
[string] course
[tree] NN(course)
[ud] "(course<root> / course)"
[fourlang] "(course<root> / course)"

NNP -> Maxwell_NNP
[string] Maxwell
[tree] NNP(Maxwell)
[ud] "(Maxwell<root> / Maxwell)"
[fourlang] "(Maxwell<root> / Maxwell)"

VBG -> explaining_VBG
[string] explaining
[tree] VBG(explaining)
[ud] "(explaining<root> / explaining)"
[fourlang] "(explaining<root> / explaining)"

JJ -> many_JJ
[string] many
[tree] JJ(many)
[ud] "(many<root> / many)"
[fourlang] "(many<root> / many)"

JJ -> forthcoming_JJ
[string] forthcoming
[tree] JJ(forthcoming)
[ud] "(forthcoming<root> / forthcoming)"
[fourlang] "(forthcoming<root> / forthcoming)"

NN -> sunlight_NN
[string] sunlight
[tree] NN(sunlight)
[ud] "(sunlight<root> / sunlight)"
[fourlang] "(sunlight<root> / sunlight)"

NN -> estimation_NN
[string] estimation
[tree] NN(estimation)
[ud] "(estimation<root> / estimation)"
[fourlang] "(estimation<root> / estimation)"

JJ -> fiberHYPHENoptic_JJ
[string] fiberHYPHENoptic
[tree] JJ(fiberHYPHENoptic)
[ud] "(fiberHYPHENoptic<root> / fiberHYPHENoptic)"
[fourlang] "(fiberHYPHENoptic<root> / fiberHYPHENoptic)"

CD -> DIGITDIGITDIGITPERIODDIGITDIGIT_CD
[string] DIGITDIGITDIGITPERIODDIGITDIGIT
[tree] CD(DIGITDIGITDIGITPERIODDIGITDIGIT)
[ud] "(DIGITDIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITDIGITPERIODDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITPERIODDIGITDIGIT<root> / DIGITDIGITDIGITPERIODDIGITDIGIT)"

NN -> ENERGY_NN
[string] ENERGY
[tree] NN(ENERGY)
[ud] "(ENERGY<root> / ENERGY)"
[fourlang] "(ENERGY<root> / ENERGY)"

NN -> battle_NN
[string] battle
[tree] NN(battle)
[ud] "(battle<root> / battle)"
[fourlang] "(battle<root> / battle)"

VBG -> struggling_VBG
[string] struggling
[tree] VBG(struggling)
[ud] "(struggling<root> / struggling)"
[fourlang] "(struggling<root> / struggling)"

VBG -> snaking_VBG
[string] snaking
[tree] VBG(snaking)
[ud] "(snaking<root> / snaking)"
[fourlang] "(snaking<root> / snaking)"

JJ -> close_JJ
[string] close
[tree] JJ(close)
[ud] "(close<root> / close)"
[fourlang] "(close<root> / close)"

NN -> vehicle_NN
[string] vehicle
[tree] NN(vehicle)
[ud] "(vehicle<root> / vehicle)"
[fourlang] "(vehicle<root> / vehicle)"

WP -> What_WP
[string] What
[tree] WP(What)
[ud] "(What<root> / What)"
[fourlang] "(What<root> / What)"

NNS -> increases_NNS
[string] increases
[tree] NNS(increases)
[ud] "(increases<root> / increases)"
[fourlang] "(increases<root> / increases)"

NNS -> corporations_NNS
[string] corporations
[tree] NNS(corporations)
[ud] "(corporations<root> / corporations)"
[fourlang] "(corporations<root> / corporations)"

NNPS -> ASSETS_NNPS
[string] ASSETS
[tree] NNPS(ASSETS)
[ud] "(ASSETS<root> / ASSETS)"
[fourlang] "(ASSETS<root> / ASSETS)"

NNP -> Lufkin_NNP
[string] Lufkin
[tree] NNP(Lufkin)
[ud] "(Lufkin<root> / Lufkin)"
[fourlang] "(Lufkin<root> / Lufkin)"

NN -> nobody_NN
[string] nobody
[tree] NN(nobody)
[ud] "(nobody<root> / nobody)"
[fourlang] "(nobody<root> / nobody)"

NNP -> Nasdaq_NNP
[string] Nasdaq
[tree] NNP(Nasdaq)
[ud] "(Nasdaq<root> / Nasdaq)"
[fourlang] "(Nasdaq<root> / Nasdaq)"

NNS -> ACCEPTANCES_NNS
[string] ACCEPTANCES
[tree] NNS(ACCEPTANCES)
[ud] "(ACCEPTANCES<root> / ACCEPTANCES)"
[fourlang] "(ACCEPTANCES<root> / ACCEPTANCES)"

NNP -> Tatsunori_NNP
[string] Tatsunori
[tree] NNP(Tatsunori)
[ud] "(Tatsunori<root> / Tatsunori)"
[fourlang] "(Tatsunori<root> / Tatsunori)"

NNP -> Michigan_NNP
[string] Michigan
[tree] NNP(Michigan)
[ud] "(Michigan<root> / Michigan)"
[fourlang] "(Michigan<root> / Michigan)"

NNS -> vehicles_NNS
[string] vehicles
[tree] NNS(vehicles)
[ud] "(vehicles<root> / vehicles)"
[fourlang] "(vehicles<root> / vehicles)"

NNS -> steelmakers_NNS
[string] steelmakers
[tree] NNS(steelmakers)
[ud] "(steelmakers<root> / steelmakers)"
[fourlang] "(steelmakers<root> / steelmakers)"

NNS -> covers_NNS
[string] covers
[tree] NNS(covers)
[ud] "(covers<root> / covers)"
[fourlang] "(covers<root> / covers)"

JJ -> German_JJ
[string] German
[tree] JJ(German)
[ud] "(German<root> / German)"
[fourlang] "(German<root> / German)"

VB -> cut_VB
[string] cut
[tree] VB(cut)
[ud] "(cut<root> / cut)"
[fourlang] "(cut<root> / cut)"

JJ -> rich_JJ
[string] rich
[tree] JJ(rich)
[ud] "(rich<root> / rich)"
[fourlang] "(rich<root> / rich)"

NNP -> Fulton_NNP
[string] Fulton
[tree] NNP(Fulton)
[ud] "(Fulton<root> / Fulton)"
[fourlang] "(Fulton<root> / Fulton)"

NNP -> Caldor_NNP
[string] Caldor
[tree] NNP(Caldor)
[ud] "(Caldor<root> / Caldor)"
[fourlang] "(Caldor<root> / Caldor)"

NNP -> Furukawa_NNP
[string] Furukawa
[tree] NNP(Furukawa)
[ud] "(Furukawa<root> / Furukawa)"
[fourlang] "(Furukawa<root> / Furukawa)"

IN -> if_IN
[string] if
[tree] IN(if)
[ud] "(if<root> / if)"
[fourlang] "(if<root> / if)"

NN -> anything_NN
[string] anything
[tree] NN(anything)
[ud] "(anything<root> / anything)"
[fourlang] "(anything<root> / anything)"

NNS -> levels_NNS
[string] levels
[tree] NNS(levels)
[ud] "(levels<root> / levels)"
[fourlang] "(levels<root> / levels)"

NNP -> Williams_NNP
[string] Williams
[tree] NNP(Williams)
[ud] "(Williams<root> / Williams)"
[fourlang] "(Williams<root> / Williams)"

VBD -> hung_VBD
[string] hung
[tree] VBD(hung)
[ud] "(hung<root> / hung)"
[fourlang] "(hung<root> / hung)"

NN -> plot_NN
[string] plot
[tree] NN(plot)
[ud] "(plot<root> / plot)"
[fourlang] "(plot<root> / plot)"

NN -> replacement_NN
[string] replacement
[tree] NN(replacement)
[ud] "(replacement<root> / replacement)"
[fourlang] "(replacement<root> / replacement)"

IN -> by_IN
[string] by
[tree] IN(by)
[ud] "(by<root> / by)"
[fourlang] "(by<root> / by)"

NNS -> workers_NNS
[string] workers
[tree] NNS(workers)
[ud] "(workers<root> / workers)"
[fourlang] "(workers<root> / workers)"

JJR -> stiffer_JJR
[string] stiffer
[tree] JJR(stiffer)
[ud] "(stiffer<root> / stiffer)"
[fourlang] "(stiffer<root> / stiffer)"

NNS -> posts_NNS
[string] posts
[tree] NNS(posts)
[ud] "(posts<root> / posts)"
[fourlang] "(posts<root> / posts)"

NNP -> LOAN_NNP
[string] LOAN
[tree] NNP(LOAN)
[ud] "(LOAN<root> / LOAN)"
[fourlang] "(LOAN<root> / LOAN)"

JJ -> executive_JJ
[string] executive
[tree] JJ(executive)
[ud] "(executive<root> / executive)"
[fourlang] "(executive<root> / executive)"

NNS -> Signs_NNS
[string] Signs
[tree] NNS(Signs)
[ud] "(Signs<root> / Signs)"
[fourlang] "(Signs<root> / Signs)"

VB -> involve_VB
[string] involve
[tree] VB(involve)
[ud] "(involve<root> / involve)"
[fourlang] "(involve<root> / involve)"

NN -> bid_NN
[string] bid
[tree] NN(bid)
[ud] "(bid<root> / bid)"
[fourlang] "(bid<root> / bid)"

NNPS -> Islands_NNPS
[string] Islands
[tree] NNPS(Islands)
[ud] "(Islands<root> / Islands)"
[fourlang] "(Islands<root> / Islands)"

NN -> name_NN
[string] name
[tree] NN(name)
[ud] "(name<root> / name)"
[fourlang] "(name<root> / name)"

VB -> favor_VB
[string] favor
[tree] VB(favor)
[ud] "(favor<root> / favor)"
[fourlang] "(favor<root> / favor)"

NN -> policy_NN
[string] policy
[tree] NN(policy)
[ud] "(policy<root> / policy)"
[fourlang] "(policy<root> / policy)"

NNP -> Millis_NNP
[string] Millis
[tree] NNP(Millis)
[ud] "(Millis<root> / Millis)"
[fourlang] "(Millis<root> / Millis)"

NN -> checkbook_NN
[string] checkbook
[tree] NN(checkbook)
[ud] "(checkbook<root> / checkbook)"
[fourlang] "(checkbook<root> / checkbook)"

NN -> readership_NN
[string] readership
[tree] NN(readership)
[ud] "(readership<root> / readership)"
[fourlang] "(readership<root> / readership)"

NNP -> Holland_NNP
[string] Holland
[tree] NNP(Holland)
[ud] "(Holland<root> / Holland)"
[fourlang] "(Holland<root> / Holland)"

NNP -> Reupke_NNP
[string] Reupke
[tree] NNP(Reupke)
[ud] "(Reupke<root> / Reupke)"
[fourlang] "(Reupke<root> / Reupke)"

VB -> discontinue_VB
[string] discontinue
[tree] VB(discontinue)
[ud] "(discontinue<root> / discontinue)"
[fourlang] "(discontinue<root> / discontinue)"

NN -> interest_NN
[string] interest
[tree] NN(interest)
[ud] "(interest<root> / interest)"
[fourlang] "(interest<root> / interest)"

IN -> onto_IN
[string] onto
[tree] IN(onto)
[ud] "(onto<root> / onto)"
[fourlang] "(onto<root> / onto)"

NNP -> EPERIOD_NNP
[string] EPERIOD
[tree] NNP(EPERIOD)
[ud] "(EPERIOD<root> / EPERIOD)"
[fourlang] "(EPERIOD<root> / EPERIOD)"

NNPS -> Associates_NNPS
[string] Associates
[tree] NNPS(Associates)
[ud] "(Associates<root> / Associates)"
[fourlang] "(Associates<root> / Associates)"

VBZ -> requires_VBZ
[string] requires
[tree] VBZ(requires)
[ud] "(requires<root> / requires)"
[fourlang] "(requires<root> / requires)"

PRP -> We_PRP
[string] We
[tree] PRP(We)
[ud] "(We<root> / We)"
[fourlang] "(We<root> / We)"

JJ -> enough_JJ
[string] enough
[tree] JJ(enough)
[ud] "(enough<root> / enough)"
[fourlang] "(enough<root> / enough)"

NN -> rumor_NN
[string] rumor
[tree] NN(rumor)
[ud] "(rumor<root> / rumor)"
[fourlang] "(rumor<root> / rumor)"

NN -> advertising_NN
[string] advertising
[tree] NN(advertising)
[ud] "(advertising<root> / advertising)"
[fourlang] "(advertising<root> / advertising)"

NN -> retailing_NN
[string] retailing
[tree] NN(retailing)
[ud] "(retailing<root> / retailing)"
[fourlang] "(retailing<root> / retailing)"

NN -> office_NN
[string] office
[tree] NN(office)
[ud] "(office<root> / office)"
[fourlang] "(office<root> / office)"

VBZ -> does_VBZ
[string] does
[tree] VBZ(does)
[ud] "(does<root> / does)"
[fourlang] "(does<root> / does)"

NNP -> Beijing_NNP
[string] Beijing
[tree] NNP(Beijing)
[ud] "(Beijing<root> / Beijing)"
[fourlang] "(Beijing<root> / Beijing)"

NNS -> barriers_NNS
[string] barriers
[tree] NNS(barriers)
[ud] "(barriers<root> / barriers)"
[fourlang] "(barriers<root> / barriers)"

NN -> inverse_NN
[string] inverse
[tree] NN(inverse)
[ud] "(inverse<root> / inverse)"
[fourlang] "(inverse<root> / inverse)"

JJR -> richer_JJR
[string] richer
[tree] JJR(richer)
[ud] "(richer<root> / richer)"
[fourlang] "(richer<root> / richer)"

NNP -> Svenska_NNP
[string] Svenska
[tree] NNP(Svenska)
[ud] "(Svenska<root> / Svenska)"
[fourlang] "(Svenska<root> / Svenska)"

JJ -> builtHYPHENfromHYPHENkit_JJ
[string] builtHYPHENfromHYPHENkit
[tree] JJ(builtHYPHENfromHYPHENkit)
[ud] "(builtHYPHENfromHYPHENkit<root> / builtHYPHENfromHYPHENkit)"
[fourlang] "(builtHYPHENfromHYPHENkit<root> / builtHYPHENfromHYPHENkit)"

NNP -> Chardonnay_NNP
[string] Chardonnay
[tree] NNP(Chardonnay)
[ud] "(Chardonnay<root> / Chardonnay)"
[fourlang] "(Chardonnay<root> / Chardonnay)"

JJ -> unsecured_JJ
[string] unsecured
[tree] JJ(unsecured)
[ud] "(unsecured<root> / unsecured)"
[fourlang] "(unsecured<root> / unsecured)"

NN -> inquiry_NN
[string] inquiry
[tree] NN(inquiry)
[ud] "(inquiry<root> / inquiry)"
[fourlang] "(inquiry<root> / inquiry)"

NNS -> techniques_NNS
[string] techniques
[tree] NNS(techniques)
[ud] "(techniques<root> / techniques)"
[fourlang] "(techniques<root> / techniques)"

JJ -> second_JJ
[string] second
[tree] JJ(second)
[ud] "(second<root> / second)"
[fourlang] "(second<root> / second)"

NNP -> DPERIODCPERIOD_NNP
[string] DPERIODCPERIOD
[tree] NNP(DPERIODCPERIOD)
[ud] "(DPERIODCPERIOD<root> / DPERIODCPERIOD)"
[fourlang] "(DPERIODCPERIOD<root> / DPERIODCPERIOD)"

NNS -> stadiums_NNS
[string] stadiums
[tree] NNS(stadiums)
[ud] "(stadiums<root> / stadiums)"
[fourlang] "(stadiums<root> / stadiums)"

JJ -> leading_JJ
[string] leading
[tree] JJ(leading)
[ud] "(leading<root> / leading)"
[fourlang] "(leading<root> / leading)"

NN -> advance_NN
[string] advance
[tree] NN(advance)
[ud] "(advance<root> / advance)"
[fourlang] "(advance<root> / advance)"

NN -> story_NN
[string] story
[tree] NN(story)
[ud] "(story<root> / story)"
[fourlang] "(story<root> / story)"

JJ -> closing_JJ
[string] closing
[tree] JJ(closing)
[ud] "(closing<root> / closing)"
[fourlang] "(closing<root> / closing)"

NN -> cost_NN
[string] cost
[tree] NN(cost)
[ud] "(cost<root> / cost)"
[fourlang] "(cost<root> / cost)"

NNS -> swaps_NNS
[string] swaps
[tree] NNS(swaps)
[ud] "(swaps<root> / swaps)"
[fourlang] "(swaps<root> / swaps)"

JJ -> gutHYPHENwrenching_JJ
[string] gutHYPHENwrenching
[tree] JJ(gutHYPHENwrenching)
[ud] "(gutHYPHENwrenching<root> / gutHYPHENwrenching)"
[fourlang] "(gutHYPHENwrenching<root> / gutHYPHENwrenching)"

IN -> above_IN
[string] above
[tree] IN(above)
[ud] "(above<root> / above)"
[fourlang] "(above<root> / above)"

NNS -> claims_NNS
[string] claims
[tree] NNS(claims)
[ud] "(claims<root> / claims)"
[fourlang] "(claims<root> / claims)"

NNP -> Laura_NNP
[string] Laura
[tree] NNP(Laura)
[ud] "(Laura<root> / Laura)"
[fourlang] "(Laura<root> / Laura)"

NN -> species_NN
[string] species
[tree] NN(species)
[ud] "(species<root> / species)"
[fourlang] "(species<root> / species)"

NN -> recovery_NN
[string] recovery
[tree] NN(recovery)
[ud] "(recovery<root> / recovery)"
[fourlang] "(recovery<root> / recovery)"

JJ -> distributable_JJ
[string] distributable
[tree] JJ(distributable)
[ud] "(distributable<root> / distributable)"
[fourlang] "(distributable<root> / distributable)"

JJ -> enormous_JJ
[string] enormous
[tree] JJ(enormous)
[ud] "(enormous<root> / enormous)"
[fourlang] "(enormous<root> / enormous)"

NNP -> Brunei_NNP
[string] Brunei
[tree] NNP(Brunei)
[ud] "(Brunei<root> / Brunei)"
[fourlang] "(Brunei<root> / Brunei)"

NN -> participation_NN
[string] participation
[tree] NN(participation)
[ud] "(participation<root> / participation)"
[fourlang] "(participation<root> / participation)"

JJ -> continuous_JJ
[string] continuous
[tree] JJ(continuous)
[ud] "(continuous<root> / continuous)"
[fourlang] "(continuous<root> / continuous)"

NNS -> sets_NNS
[string] sets
[tree] NNS(sets)
[ud] "(sets<root> / sets)"
[fourlang] "(sets<root> / sets)"

NN -> release_NN
[string] release
[tree] NN(release)
[ud] "(release<root> / release)"
[fourlang] "(release<root> / release)"

NN -> homework_NN
[string] homework
[tree] NN(homework)
[ud] "(homework<root> / homework)"
[fourlang] "(homework<root> / homework)"

NNP -> DeFazio_NNP
[string] DeFazio
[tree] NNP(DeFazio)
[ud] "(DeFazio<root> / DeFazio)"
[fourlang] "(DeFazio<root> / DeFazio)"

NN -> retirement_NN
[string] retirement
[tree] NN(retirement)
[ud] "(retirement<root> / retirement)"
[fourlang] "(retirement<root> / retirement)"

NNP -> Maine_NNP
[string] Maine
[tree] NNP(Maine)
[ud] "(Maine<root> / Maine)"
[fourlang] "(Maine<root> / Maine)"

NNP -> Patch_NNP
[string] Patch
[tree] NNP(Patch)
[ud] "(Patch<root> / Patch)"
[fourlang] "(Patch<root> / Patch)"

NNS -> marks_NNS
[string] marks
[tree] NNS(marks)
[ud] "(marks<root> / marks)"
[fourlang] "(marks<root> / marks)"

JJ -> regulatory_JJ
[string] regulatory
[tree] JJ(regulatory)
[ud] "(regulatory<root> / regulatory)"
[fourlang] "(regulatory<root> / regulatory)"

NN -> Trading_NN
[string] Trading
[tree] NN(Trading)
[ud] "(Trading<root> / Trading)"
[fourlang] "(Trading<root> / Trading)"

NNPS -> Pictures_NNPS
[string] Pictures
[tree] NNPS(Pictures)
[ud] "(Pictures<root> / Pictures)"
[fourlang] "(Pictures<root> / Pictures)"

NNP -> Gordon_NNP
[string] Gordon
[tree] NNP(Gordon)
[ud] "(Gordon<root> / Gordon)"
[fourlang] "(Gordon<root> / Gordon)"

NNP -> Cougar_NNP
[string] Cougar
[tree] NNP(Cougar)
[ud] "(Cougar<root> / Cougar)"
[fourlang] "(Cougar<root> / Cougar)"

NNS -> thumbs_NNS
[string] thumbs
[tree] NNS(thumbs)
[ud] "(thumbs<root> / thumbs)"
[fourlang] "(thumbs<root> / thumbs)"

IN -> whether_IN
[string] whether
[tree] IN(whether)
[ud] "(whether<root> / whether)"
[fourlang] "(whether<root> / whether)"

NNP -> Northern_NNP
[string] Northern
[tree] NNP(Northern)
[ud] "(Northern<root> / Northern)"
[fourlang] "(Northern<root> / Northern)"

NNP -> Sayers_NNP
[string] Sayers
[tree] NNP(Sayers)
[ud] "(Sayers<root> / Sayers)"
[fourlang] "(Sayers<root> / Sayers)"

NNS -> educators_NNS
[string] educators
[tree] NNS(educators)
[ud] "(educators<root> / educators)"
[fourlang] "(educators<root> / educators)"

NNP -> Signore_NNP
[string] Signore
[tree] NNP(Signore)
[ud] "(Signore<root> / Signore)"
[fourlang] "(Signore<root> / Signore)"

NNP -> Commonwealth_NNP
[string] Commonwealth
[tree] NNP(Commonwealth)
[ud] "(Commonwealth<root> / Commonwealth)"
[fourlang] "(Commonwealth<root> / Commonwealth)"

NNS -> unions_NNS
[string] unions
[tree] NNS(unions)
[ud] "(unions<root> / unions)"
[fourlang] "(unions<root> / unions)"

VBP -> help_VBP
[string] help
[tree] VBP(help)
[ud] "(help<root> / help)"
[fourlang] "(help<root> / help)"

NNS -> dynamics_NNS
[string] dynamics
[tree] NNS(dynamics)
[ud] "(dynamics<root> / dynamics)"
[fourlang] "(dynamics<root> / dynamics)"

JJ -> necessary_JJ
[string] necessary
[tree] JJ(necessary)
[ud] "(necessary<root> / necessary)"
[fourlang] "(necessary<root> / necessary)"

NNP -> WPERIODNPERIOD_NNP
[string] WPERIODNPERIOD
[tree] NNP(WPERIODNPERIOD)
[ud] "(WPERIODNPERIOD<root> / WPERIODNPERIOD)"
[fourlang] "(WPERIODNPERIOD<root> / WPERIODNPERIOD)"

NNP -> Dallara_NNP
[string] Dallara
[tree] NNP(Dallara)
[ud] "(Dallara<root> / Dallara)"
[fourlang] "(Dallara<root> / Dallara)"

NNP -> Australia_NNP
[string] Australia
[tree] NNP(Australia)
[ud] "(Australia<root> / Australia)"
[fourlang] "(Australia<root> / Australia)"

VBN -> amended_VBN
[string] amended
[tree] VBN(amended)
[ud] "(amended<root> / amended)"
[fourlang] "(amended<root> / amended)"

NNS -> plans_NNS
[string] plans
[tree] NNS(plans)
[ud] "(plans<root> / plans)"
[fourlang] "(plans<root> / plans)"

NNS -> documents_NNS
[string] documents
[tree] NNS(documents)
[ud] "(documents<root> / documents)"
[fourlang] "(documents<root> / documents)"

NNP -> NPERIODC_NNP
[string] NPERIODC
[tree] NNP(NPERIODC)
[ud] "(NPERIODC<root> / NPERIODC)"
[fourlang] "(NPERIODC<root> / NPERIODC)"

JJ -> twoHYPHENweek_JJ
[string] twoHYPHENweek
[tree] JJ(twoHYPHENweek)
[ud] "(twoHYPHENweek<root> / twoHYPHENweek)"
[fourlang] "(twoHYPHENweek<root> / twoHYPHENweek)"

JJ -> clear_JJ
[string] clear
[tree] JJ(clear)
[ud] "(clear<root> / clear)"
[fourlang] "(clear<root> / clear)"

VBD -> began_VBD
[string] began
[tree] VBD(began)
[ud] "(began<root> / began)"
[fourlang] "(began<root> / began)"

NNP -> Wellington_NNP
[string] Wellington
[tree] NNP(Wellington)
[ud] "(Wellington<root> / Wellington)"
[fourlang] "(Wellington<root> / Wellington)"

NNP -> II_NNP
[string] II
[tree] NNP(II)
[ud] "(II<root> / II)"
[fourlang] "(II<root> / II)"

NN -> discount_NN
[string] discount
[tree] NN(discount)
[ud] "(discount<root> / discount)"
[fourlang] "(discount<root> / discount)"

NN -> conduit_NN
[string] conduit
[tree] NN(conduit)
[ud] "(conduit<root> / conduit)"
[fourlang] "(conduit<root> / conduit)"

NNP -> Dennis_NNP
[string] Dennis
[tree] NNP(Dennis)
[ud] "(Dennis<root> / Dennis)"
[fourlang] "(Dennis<root> / Dennis)"

VBD -> became_VBD
[string] became
[tree] VBD(became)
[ud] "(became<root> / became)"
[fourlang] "(became<root> / became)"

NN -> basket_NN
[string] basket
[tree] NN(basket)
[ud] "(basket<root> / basket)"
[fourlang] "(basket<root> / basket)"

NNP -> CalifPERIOD_NNP
[string] CalifPERIOD
[tree] NNP(CalifPERIOD)
[ud] "(CalifPERIOD<root> / CalifPERIOD)"
[fourlang] "(CalifPERIOD<root> / CalifPERIOD)"

NNP -> Malizia_NNP
[string] Malizia
[tree] NNP(Malizia)
[ud] "(Malizia<root> / Malizia)"
[fourlang] "(Malizia<root> / Malizia)"

NNP -> Optical_NNP
[string] Optical
[tree] NNP(Optical)
[ud] "(Optical<root> / Optical)"
[fourlang] "(Optical<root> / Optical)"

NN -> work_NN
[string] work
[tree] NN(work)
[ud] "(work<root> / work)"
[fourlang] "(work<root> / work)"

NN -> river_NN
[string] river
[tree] NN(river)
[ud] "(river<root> / river)"
[fourlang] "(river<root> / river)"

NNP -> Tokyo_NNP
[string] Tokyo
[tree] NNP(Tokyo)
[ud] "(Tokyo<root> / Tokyo)"
[fourlang] "(Tokyo<root> / Tokyo)"

VBN -> hurt_VBN
[string] hurt
[tree] VBN(hurt)
[ud] "(hurt<root> / hurt)"
[fourlang] "(hurt<root> / hurt)"

NN -> breakdown_NN
[string] breakdown
[tree] NN(breakdown)
[ud] "(breakdown<root> / breakdown)"
[fourlang] "(breakdown<root> / breakdown)"

NNP -> Marathon_NNP
[string] Marathon
[tree] NNP(Marathon)
[ud] "(Marathon<root> / Marathon)"
[fourlang] "(Marathon<root> / Marathon)"

NNS -> counterparts_NNS
[string] counterparts
[tree] NNS(counterparts)
[ud] "(counterparts<root> / counterparts)"
[fourlang] "(counterparts<root> / counterparts)"

JJ -> consonant_JJ
[string] consonant
[tree] JJ(consonant)
[ud] "(consonant<root> / consonant)"
[fourlang] "(consonant<root> / consonant)"

NN -> game_NN
[string] game
[tree] NN(game)
[ud] "(game<root> / game)"
[fourlang] "(game<root> / game)"

NN -> report_NN
[string] report
[tree] NN(report)
[ud] "(report<root> / report)"
[fourlang] "(report<root> / report)"

JJ -> DIGITDIGITDIGITDIGIT_JJ
[string] DIGITDIGITDIGITDIGIT
[tree] JJ(DIGITDIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"

NNP -> Corn_NNP
[string] Corn
[tree] NNP(Corn)
[ud] "(Corn<root> / Corn)"
[fourlang] "(Corn<root> / Corn)"

VBN -> shipped_VBN
[string] shipped
[tree] VBN(shipped)
[ud] "(shipped<root> / shipped)"
[fourlang] "(shipped<root> / shipped)"

JJ -> Heightened_JJ
[string] Heightened
[tree] JJ(Heightened)
[ud] "(Heightened<root> / Heightened)"
[fourlang] "(Heightened<root> / Heightened)"

NN -> surgery_NN
[string] surgery
[tree] NN(surgery)
[ud] "(surgery<root> / surgery)"
[fourlang] "(surgery<root> / surgery)"

NNS -> threeHYPHENquarters_NNS
[string] threeHYPHENquarters
[tree] NNS(threeHYPHENquarters)
[ud] "(threeHYPHENquarters<root> / threeHYPHENquarters)"
[fourlang] "(threeHYPHENquarters<root> / threeHYPHENquarters)"

NNS -> contractors_NNS
[string] contractors
[tree] NNS(contractors)
[ud] "(contractors<root> / contractors)"
[fourlang] "(contractors<root> / contractors)"

NN -> declaration_NN
[string] declaration
[tree] NN(declaration)
[ud] "(declaration<root> / declaration)"
[fourlang] "(declaration<root> / declaration)"

NNS -> authorities_NNS
[string] authorities
[tree] NNS(authorities)
[ud] "(authorities<root> / authorities)"
[fourlang] "(authorities<root> / authorities)"

NNP -> Kent_NNP
[string] Kent
[tree] NNP(Kent)
[ud] "(Kent<root> / Kent)"
[fourlang] "(Kent<root> / Kent)"

NNS -> groups_NNS
[string] groups
[tree] NNS(groups)
[ud] "(groups<root> / groups)"
[fourlang] "(groups<root> / groups)"

JJ -> corrupt_JJ
[string] corrupt
[tree] JJ(corrupt)
[ud] "(corrupt<root> / corrupt)"
[fourlang] "(corrupt<root> / corrupt)"

NNP -> Fulham_NNP
[string] Fulham
[tree] NNP(Fulham)
[ud] "(Fulham<root> / Fulham)"
[fourlang] "(Fulham<root> / Fulham)"

JJ -> fiveHYPHENinch_JJ
[string] fiveHYPHENinch
[tree] JJ(fiveHYPHENinch)
[ud] "(fiveHYPHENinch<root> / fiveHYPHENinch)"
[fourlang] "(fiveHYPHENinch<root> / fiveHYPHENinch)"

VBN -> imported_VBN
[string] imported
[tree] VBN(imported)
[ud] "(imported<root> / imported)"
[fourlang] "(imported<root> / imported)"

NN -> research_NN
[string] research
[tree] NN(research)
[ud] "(research<root> / research)"
[fourlang] "(research<root> / research)"

NNP -> MONEY_NNP
[string] MONEY
[tree] NNP(MONEY)
[ud] "(MONEY<root> / MONEY)"
[fourlang] "(MONEY<root> / MONEY)"

NNS -> reductions_NNS
[string] reductions
[tree] NNS(reductions)
[ud] "(reductions<root> / reductions)"
[fourlang] "(reductions<root> / reductions)"

NNS -> ramparts_NNS
[string] ramparts
[tree] NNS(ramparts)
[ud] "(ramparts<root> / ramparts)"
[fourlang] "(ramparts<root> / ramparts)"

NN -> province_NN
[string] province
[tree] NN(province)
[ud] "(province<root> / province)"
[fourlang] "(province<root> / province)"

NNP -> Guild_NNP
[string] Guild
[tree] NNP(Guild)
[ud] "(Guild<root> / Guild)"
[fourlang] "(Guild<root> / Guild)"

NNP -> Indonesia_NNP
[string] Indonesia
[tree] NNP(Indonesia)
[ud] "(Indonesia<root> / Indonesia)"
[fourlang] "(Indonesia<root> / Indonesia)"

NN -> care_NN
[string] care
[tree] NN(care)
[ud] "(care<root> / care)"
[fourlang] "(care<root> / care)"

RB -> easily_RB
[string] easily
[tree] RB(easily)
[ud] "(easily<root> / easily)"
[fourlang] "(easily<root> / easily)"

NN -> dislike_NN
[string] dislike
[tree] NN(dislike)
[ud] "(dislike<root> / dislike)"
[fourlang] "(dislike<root> / dislike)"

NNS -> problems_NNS
[string] problems
[tree] NNS(problems)
[ud] "(problems<root> / problems)"
[fourlang] "(problems<root> / problems)"

NNP -> Bell_NNP
[string] Bell
[tree] NNP(Bell)
[ud] "(Bell<root> / Bell)"
[fourlang] "(Bell<root> / Bell)"

NNS -> IOUs_NNS
[string] IOUs
[tree] NNS(IOUs)
[ud] "(IOUs<root> / IOUs)"
[fourlang] "(IOUs<root> / IOUs)"

VBZ -> flows_VBZ
[string] flows
[tree] VBZ(flows)
[ud] "(flows<root> / flows)"
[fourlang] "(flows<root> / flows)"

NNS -> employees_NNS
[string] employees
[tree] NNS(employees)
[ud] "(employees<root> / employees)"
[fourlang] "(employees<root> / employees)"

VB -> specify_VB
[string] specify
[tree] VB(specify)
[ud] "(specify<root> / specify)"
[fourlang] "(specify<root> / specify)"

NN -> response_NN
[string] response
[tree] NN(response)
[ud] "(response<root> / response)"
[fourlang] "(response<root> / response)"

JJ -> COMMERCIAL_JJ
[string] COMMERCIAL
[tree] JJ(COMMERCIAL)
[ud] "(COMMERCIAL<root> / COMMERCIAL)"
[fourlang] "(COMMERCIAL<root> / COMMERCIAL)"

JJ -> available_JJ
[string] available
[tree] JJ(available)
[ud] "(available<root> / available)"
[fourlang] "(available<root> / available)"

JJ -> financial_JJ
[string] financial
[tree] JJ(financial)
[ud] "(financial<root> / financial)"
[fourlang] "(financial<root> / financial)"

NNS -> restructurings_NNS
[string] restructurings
[tree] NNS(restructurings)
[ud] "(restructurings<root> / restructurings)"
[fourlang] "(restructurings<root> / restructurings)"

JJ -> lowHYPHENcost_JJ
[string] lowHYPHENcost
[tree] JJ(lowHYPHENcost)
[ud] "(lowHYPHENcost<root> / lowHYPHENcost)"
[fourlang] "(lowHYPHENcost<root> / lowHYPHENcost)"

NNP -> Hills_NNP
[string] Hills
[tree] NNP(Hills)
[ud] "(Hills<root> / Hills)"
[fourlang] "(Hills<root> / Hills)"

NNS -> sections_NNS
[string] sections
[tree] NNS(sections)
[ud] "(sections<root> / sections)"
[fourlang] "(sections<root> / sections)"

NNP -> Pamplin_NNP
[string] Pamplin
[tree] NNP(Pamplin)
[ud] "(Pamplin<root> / Pamplin)"
[fourlang] "(Pamplin<root> / Pamplin)"

NN -> authority_NN
[string] authority
[tree] NN(authority)
[ud] "(authority<root> / authority)"
[fourlang] "(authority<root> / authority)"

NNP -> Grace_NNP
[string] Grace
[tree] NNP(Grace)
[ud] "(Grace<root> / Grace)"
[fourlang] "(Grace<root> / Grace)"

NNS -> elections_NNS
[string] elections
[tree] NNS(elections)
[ud] "(elections<root> / elections)"
[fourlang] "(elections<root> / elections)"

NN -> combination_NN
[string] combination
[tree] NN(combination)
[ud] "(combination<root> / combination)"
[fourlang] "(combination<root> / combination)"

JJ -> other_JJ
[string] other
[tree] JJ(other)
[ud] "(other<root> / other)"
[fourlang] "(other<root> / other)"

NNS -> accountants_NNS
[string] accountants
[tree] NNS(accountants)
[ud] "(accountants<root> / accountants)"
[fourlang] "(accountants<root> / accountants)"

NNP -> Lauderhill_NNP
[string] Lauderhill
[tree] NNP(Lauderhill)
[ud] "(Lauderhill<root> / Lauderhill)"
[fourlang] "(Lauderhill<root> / Lauderhill)"

NNS -> yields_NNS
[string] yields
[tree] NNS(yields)
[ud] "(yields<root> / yields)"
[fourlang] "(yields<root> / yields)"

NNS -> estimates_NNS
[string] estimates
[tree] NNS(estimates)
[ud] "(estimates<root> / estimates)"
[fourlang] "(estimates<root> / estimates)"

NNS -> RATES_NNS
[string] RATES
[tree] NNS(RATES)
[ud] "(RATES<root> / RATES)"
[fourlang] "(RATES<root> / RATES)"

NNS -> Proponents_NNS
[string] Proponents
[tree] NNS(Proponents)
[ud] "(Proponents<root> / Proponents)"
[fourlang] "(Proponents<root> / Proponents)"

RB -> only_RB
[string] only
[tree] RB(only)
[ud] "(only<root> / only)"
[fourlang] "(only<root> / only)"

NNP -> Detroit_NNP
[string] Detroit
[tree] NNP(Detroit)
[ud] "(Detroit<root> / Detroit)"
[fourlang] "(Detroit<root> / Detroit)"

NNS -> Eurobonds_NNS
[string] Eurobonds
[tree] NNS(Eurobonds)
[ud] "(Eurobonds<root> / Eurobonds)"
[fourlang] "(Eurobonds<root> / Eurobonds)"

NN -> legislation_NN
[string] legislation
[tree] NN(legislation)
[ud] "(legislation<root> / legislation)"
[fourlang] "(legislation<root> / legislation)"

NN -> bidding_NN
[string] bidding
[tree] NN(bidding)
[ud] "(bidding<root> / bidding)"
[fourlang] "(bidding<root> / bidding)"

JJ -> prominent_JJ
[string] prominent
[tree] JJ(prominent)
[ud] "(prominent<root> / prominent)"
[fourlang] "(prominent<root> / prominent)"

PRP -> us_PRP
[string] us
[tree] PRP(us)
[ud] "(us<root> / us)"
[fourlang] "(us<root> / us)"

VBP -> want_VBP
[string] want
[tree] VBP(want)
[ud] "(want<root> / want)"
[fourlang] "(want<root> / want)"

JJ -> single_JJ
[string] single
[tree] JJ(single)
[ud] "(single<root> / single)"
[fourlang] "(single<root> / single)"

NN -> fear_NN
[string] fear
[tree] NN(fear)
[ud] "(fear<root> / fear)"
[fourlang] "(fear<root> / fear)"

VBD -> stepped_VBD
[string] stepped
[tree] VBD(stepped)
[ud] "(stepped<root> / stepped)"
[fourlang] "(stepped<root> / stepped)"

NNPS -> Contracts_NNPS
[string] Contracts
[tree] NNPS(Contracts)
[ud] "(Contracts<root> / Contracts)"
[fourlang] "(Contracts<root> / Contracts)"

NNS -> bullets_NNS
[string] bullets
[tree] NNS(bullets)
[ud] "(bullets<root> / bullets)"
[fourlang] "(bullets<root> / bullets)"

NNS -> Bonds_NNS
[string] Bonds
[tree] NNS(Bonds)
[ud] "(Bonds<root> / Bonds)"
[fourlang] "(Bonds<root> / Bonds)"

NN -> exercise_NN
[string] exercise
[tree] NN(exercise)
[ud] "(exercise<root> / exercise)"
[fourlang] "(exercise<root> / exercise)"

NNS -> attempts_NNS
[string] attempts
[tree] NNS(attempts)
[ud] "(attempts<root> / attempts)"
[fourlang] "(attempts<root> / attempts)"

VBG -> devouring_VBG
[string] devouring
[tree] VBG(devouring)
[ud] "(devouring<root> / devouring)"
[fourlang] "(devouring<root> / devouring)"

NNP -> October_NNP
[string] October
[tree] NNP(October)
[ud] "(October<root> / October)"
[fourlang] "(October<root> / October)"

NNP -> Warren_NNP
[string] Warren
[tree] NNP(Warren)
[ud] "(Warren<root> / Warren)"
[fourlang] "(Warren<root> / Warren)"

NN -> overcrowding_NN
[string] overcrowding
[tree] NN(overcrowding)
[ud] "(overcrowding<root> / overcrowding)"
[fourlang] "(overcrowding<root> / overcrowding)"

NNS -> ringers_NNS
[string] ringers
[tree] NNS(ringers)
[ud] "(ringers<root> / ringers)"
[fourlang] "(ringers<root> / ringers)"

NNP -> Germany_NNP
[string] Germany
[tree] NNP(Germany)
[ud] "(Germany<root> / Germany)"
[fourlang] "(Germany<root> / Germany)"

RB -> structurally_RB
[string] structurally
[tree] RB(structurally)
[ud] "(structurally<root> / structurally)"
[fourlang] "(structurally<root> / structurally)"

JJ -> computerHYPHENdriven_JJ
[string] computerHYPHENdriven
[tree] JJ(computerHYPHENdriven)
[ud] "(computerHYPHENdriven<root> / computerHYPHENdriven)"
[fourlang] "(computerHYPHENdriven<root> / computerHYPHENdriven)"

NNP -> Foods_NNP
[string] Foods
[tree] NNP(Foods)
[ud] "(Foods<root> / Foods)"
[fourlang] "(Foods<root> / Foods)"

PUNCT -> HASHTAG_PUNCT
[string] HASHTAG
[tree] PUNCT(HASHTAG)
[ud] "(HASHTAG<root> / HASHTAG)"
[fourlang] "(HASHTAG<root> / HASHTAG)"

PRP -> He_PRP
[string] He
[tree] PRP(He)
[ud] "(He<root> / He)"
[fourlang] "(He<root> / He)"

RB -> recently_RB
[string] recently
[tree] RB(recently)
[ud] "(recently<root> / recently)"
[fourlang] "(recently<root> / recently)"

NNP -> Louis_NNP
[string] Louis
[tree] NNP(Louis)
[ud] "(Louis<root> / Louis)"
[fourlang] "(Louis<root> / Louis)"

NNP -> First_NNP
[string] First
[tree] NNP(First)
[ud] "(First<root> / First)"
[fourlang] "(First<root> / First)"

JJ -> wrong_JJ
[string] wrong
[tree] JJ(wrong)
[ud] "(wrong<root> / wrong)"
[fourlang] "(wrong<root> / wrong)"

NNP -> Enzor_NNP
[string] Enzor
[tree] NNP(Enzor)
[ud] "(Enzor<root> / Enzor)"
[fourlang] "(Enzor<root> / Enzor)"

RB -> well_RB
[string] well
[tree] RB(well)
[ud] "(well<root> / well)"
[fourlang] "(well<root> / well)"

NNP -> Parent_NNP
[string] Parent
[tree] NNP(Parent)
[ud] "(Parent<root> / Parent)"
[fourlang] "(Parent<root> / Parent)"

JJ -> helpful_JJ
[string] helpful
[tree] JJ(helpful)
[ud] "(helpful<root> / helpful)"
[fourlang] "(helpful<root> / helpful)"

NN -> vice_NN
[string] vice
[tree] NN(vice)
[ud] "(vice<root> / vice)"
[fourlang] "(vice<root> / vice)"

NNS -> sounds_NNS
[string] sounds
[tree] NNS(sounds)
[ud] "(sounds<root> / sounds)"
[fourlang] "(sounds<root> / sounds)"

NN -> member_NN
[string] member
[tree] NN(member)
[ud] "(member<root> / member)"
[fourlang] "(member<root> / member)"

NN -> Today_NN
[string] Today
[tree] NN(Today)
[ud] "(Today<root> / Today)"
[fourlang] "(Today<root> / Today)"

NNP -> Egnuss_NNP
[string] Egnuss
[tree] NNP(Egnuss)
[ud] "(Egnuss<root> / Egnuss)"
[fourlang] "(Egnuss<root> / Egnuss)"

NNP -> Credit_NNP
[string] Credit
[tree] NNP(Credit)
[ud] "(Credit<root> / Credit)"
[fourlang] "(Credit<root> / Credit)"

NN -> margin_NN
[string] margin
[tree] NN(margin)
[ud] "(margin<root> / margin)"
[fourlang] "(margin<root> / margin)"

NNP -> Reserve_NNP
[string] Reserve
[tree] NNP(Reserve)
[ud] "(Reserve<root> / Reserve)"
[fourlang] "(Reserve<root> / Reserve)"

RB -> formerly_RB
[string] formerly
[tree] RB(formerly)
[ud] "(formerly<root> / formerly)"
[fourlang] "(formerly<root> / formerly)"

NN -> dancing_NN
[string] dancing
[tree] NN(dancing)
[ud] "(dancing<root> / dancing)"
[fourlang] "(dancing<root> / dancing)"

NN -> cardHYPHENmember_NN
[string] cardHYPHENmember
[tree] NN(cardHYPHENmember)
[ud] "(cardHYPHENmember<root> / cardHYPHENmember)"
[fourlang] "(cardHYPHENmember<root> / cardHYPHENmember)"

RBS -> most_RBS
[string] most
[tree] RBS(most)
[ud] "(most<root> / most)"
[fourlang] "(most<root> / most)"

NNP -> Connecticut_NNP
[string] Connecticut
[tree] NNP(Connecticut)
[ud] "(Connecticut<root> / Connecticut)"
[fourlang] "(Connecticut<root> / Connecticut)"

NNS -> gangs_NNS
[string] gangs
[tree] NNS(gangs)
[ud] "(gangs<root> / gangs)"
[fourlang] "(gangs<root> / gangs)"

RP -> up_RP
[string] up
[tree] RP(up)
[ud] "(up<root> / up)"
[fourlang] "(up<root> / up)"

_RRB_ -> HYPHENRCBHYPHEN__RRB_
[string] HYPHENRCBHYPHEN
[tree] _RRB_(HYPHENRCBHYPHEN)
[ud] "(HYPHENRCBHYPHEN<root> / HYPHENRCBHYPHEN)"
[fourlang] "(HYPHENRCBHYPHEN<root> / HYPHENRCBHYPHEN)"

NNS -> fans_NNS
[string] fans
[tree] NNS(fans)
[ud] "(fans<root> / fans)"
[fourlang] "(fans<root> / fans)"

NNP -> Crash_NNP
[string] Crash
[tree] NNP(Crash)
[ud] "(Crash<root> / Crash)"
[fourlang] "(Crash<root> / Crash)"

NNP -> Sir_NNP
[string] Sir
[tree] NNP(Sir)
[ud] "(Sir<root> / Sir)"
[fourlang] "(Sir<root> / Sir)"

DT -> Some_DT
[string] Some
[tree] DT(Some)
[ud] "(Some<root> / Some)"
[fourlang] "(Some<root> / Some)"

VBG -> Continuing_VBG
[string] Continuing
[tree] VBG(Continuing)
[ud] "(Continuing<root> / Continuing)"
[fourlang] "(Continuing<root> / Continuing)"

NNPS -> GRAINS_NNPS
[string] GRAINS
[tree] NNPS(GRAINS)
[ud] "(GRAINS<root> / GRAINS)"
[fourlang] "(GRAINS<root> / GRAINS)"

NNS -> scammers_NNS
[string] scammers
[tree] NNS(scammers)
[ud] "(scammers<root> / scammers)"
[fourlang] "(scammers<root> / scammers)"

VBG -> paying_VBG
[string] paying
[tree] VBG(paying)
[ud] "(paying<root> / paying)"
[fourlang] "(paying<root> / paying)"

NNS -> guests_NNS
[string] guests
[tree] NNS(guests)
[ud] "(guests<root> / guests)"
[fourlang] "(guests<root> / guests)"

VBG -> being_VBG
[string] being
[tree] VBG(being)
[ud] "(being<root> / being)"
[fourlang] "(being<root> / being)"

NN -> hearing_NN
[string] hearing
[tree] NN(hearing)
[ud] "(hearing<root> / hearing)"
[fourlang] "(hearing<root> / hearing)"

NN -> Form_NN
[string] Form
[tree] NN(Form)
[ud] "(Form<root> / Form)"
[fourlang] "(Form<root> / Form)"

NN -> downturn_NN
[string] downturn
[tree] NN(downturn)
[ud] "(downturn<root> / downturn)"
[fourlang] "(downturn<root> / downturn)"

NN -> copper_NN
[string] copper
[tree] NN(copper)
[ud] "(copper<root> / copper)"
[fourlang] "(copper<root> / copper)"

VBN -> trained_VBN
[string] trained
[tree] VBN(trained)
[ud] "(trained<root> / trained)"
[fourlang] "(trained<root> / trained)"

NN -> DIGITDIGITHYPHENyearHYPHENold_NN
[string] DIGITDIGITHYPHENyearHYPHENold
[tree] NN(DIGITDIGITHYPHENyearHYPHENold)
[ud] "(DIGITDIGITHYPHENyearHYPHENold<root> / DIGITDIGITHYPHENyearHYPHENold)"
[fourlang] "(DIGITDIGITHYPHENyearHYPHENold<root> / DIGITDIGITHYPHENyearHYPHENold)"

VBP -> possess_VBP
[string] possess
[tree] VBP(possess)
[ud] "(possess<root> / possess)"
[fourlang] "(possess<root> / possess)"

NNP -> BridgestoneBSLPERFirestone_NNP
[string] BridgestoneBSLPERFirestone
[tree] NNP(BridgestoneBSLPERFirestone)
[ud] "(BridgestoneBSLPERFirestone<root> / BridgestoneBSLPERFirestone)"
[fourlang] "(BridgestoneBSLPERFirestone<root> / BridgestoneBSLPERFirestone)"

NN -> energy_NN
[string] energy
[tree] NN(energy)
[ud] "(energy<root> / energy)"
[fourlang] "(energy<root> / energy)"

NNP -> Hurricane_NNP
[string] Hurricane
[tree] NNP(Hurricane)
[ud] "(Hurricane<root> / Hurricane)"
[fourlang] "(Hurricane<root> / Hurricane)"

NNS -> bushels_NNS
[string] bushels
[tree] NNS(bushels)
[ud] "(bushels<root> / bushels)"
[fourlang] "(bushels<root> / bushels)"

NNS -> profits_NNS
[string] profits
[tree] NNS(profits)
[ud] "(profits<root> / profits)"
[fourlang] "(profits<root> / profits)"

VBN -> compiled_VBN
[string] compiled
[tree] VBN(compiled)
[ud] "(compiled<root> / compiled)"
[fourlang] "(compiled<root> / compiled)"

NN -> subject_NN
[string] subject
[tree] NN(subject)
[ud] "(subject<root> / subject)"
[fourlang] "(subject<root> / subject)"

NN -> possibility_NN
[string] possibility
[tree] NN(possibility)
[ud] "(possibility<root> / possibility)"
[fourlang] "(possibility<root> / possibility)"

VBD -> underwent_VBD
[string] underwent
[tree] VBD(underwent)
[ud] "(underwent<root> / underwent)"
[fourlang] "(underwent<root> / underwent)"

NN -> evaluation_NN
[string] evaluation
[tree] NN(evaluation)
[ud] "(evaluation<root> / evaluation)"
[fourlang] "(evaluation<root> / evaluation)"

NN -> group_NN
[string] group
[tree] NN(group)
[ud] "(group<root> / group)"
[fourlang] "(group<root> / group)"

NNP -> McGovern_NNP
[string] McGovern
[tree] NNP(McGovern)
[ud] "(McGovern<root> / McGovern)"
[fourlang] "(McGovern<root> / McGovern)"

NN -> newHYPHENcar_NN
[string] newHYPHENcar
[tree] NN(newHYPHENcar)
[ud] "(newHYPHENcar<root> / newHYPHENcar)"
[fourlang] "(newHYPHENcar<root> / newHYPHENcar)"

NN -> gunship_NN
[string] gunship
[tree] NN(gunship)
[ud] "(gunship<root> / gunship)"
[fourlang] "(gunship<root> / gunship)"

NNP -> New_NNP
[string] New
[tree] NNP(New)
[ud] "(New<root> / New)"
[fourlang] "(New<root> / New)"

NNS -> ministers_NNS
[string] ministers
[tree] NNS(ministers)
[ud] "(ministers<root> / ministers)"
[fourlang] "(ministers<root> / ministers)"

JJ -> Funny_JJ
[string] Funny
[tree] JJ(Funny)
[ud] "(Funny<root> / Funny)"
[fourlang] "(Funny<root> / Funny)"

NN -> Card_NN
[string] Card
[tree] NN(Card)
[ud] "(Card<root> / Card)"
[fourlang] "(Card<root> / Card)"

JJ -> jurisdictional_JJ
[string] jurisdictional
[tree] JJ(jurisdictional)
[ud] "(jurisdictional<root> / jurisdictional)"
[fourlang] "(jurisdictional<root> / jurisdictional)"

NNS -> parties_NNS
[string] parties
[tree] NNS(parties)
[ud] "(parties<root> / parties)"
[fourlang] "(parties<root> / parties)"

IN -> upon_IN
[string] upon
[tree] IN(upon)
[ud] "(upon<root> / upon)"
[fourlang] "(upon<root> / upon)"

NNP -> Phillip_NNP
[string] Phillip
[tree] NNP(Phillip)
[ud] "(Phillip<root> / Phillip)"
[fourlang] "(Phillip<root> / Phillip)"

NNP -> Street_NNP
[string] Street
[tree] NNP(Street)
[ud] "(Street<root> / Street)"
[fourlang] "(Street<root> / Street)"

JJ -> likely_JJ
[string] likely
[tree] JJ(likely)
[ud] "(likely<root> / likely)"
[fourlang] "(likely<root> / likely)"

NNP -> Taccetta_NNP
[string] Taccetta
[tree] NNP(Taccetta)
[ud] "(Taccetta<root> / Taccetta)"
[fourlang] "(Taccetta<root> / Taccetta)"

JJ -> far_JJ
[string] far
[tree] JJ(far)
[ud] "(far<root> / far)"
[fourlang] "(far<root> / far)"

NNP -> DD_NNP
[string] DD
[tree] NNP(DD)
[ud] "(DD<root> / DD)"
[fourlang] "(DD<root> / DD)"

NNP -> Mary_NNP
[string] Mary
[tree] NNP(Mary)
[ud] "(Mary<root> / Mary)"
[fourlang] "(Mary<root> / Mary)"

NN -> apology_NN
[string] apology
[tree] NN(apology)
[ud] "(apology<root> / apology)"
[fourlang] "(apology<root> / apology)"

NNP -> SPERIODp_NNP
[string] SPERIODp
[tree] NNP(SPERIODp)
[ud] "(SPERIODp<root> / SPERIODp)"
[fourlang] "(SPERIODp<root> / SPERIODp)"

MD -> could_MD
[string] could
[tree] MD(could)
[ud] "(could<root> / could)"
[fourlang] "(could<root> / could)"

NNS -> acceptances_NNS
[string] acceptances
[tree] NNS(acceptances)
[ud] "(acceptances<root> / acceptances)"
[fourlang] "(acceptances<root> / acceptances)"

IN -> up_IN
[string] up
[tree] IN(up)
[ud] "(up<root> / up)"
[fourlang] "(up<root> / up)"

NNP -> Goldman_NNP
[string] Goldman
[tree] NNP(Goldman)
[ud] "(Goldman<root> / Goldman)"
[fourlang] "(Goldman<root> / Goldman)"

NN -> indicator_NN
[string] indicator
[tree] NN(indicator)
[ud] "(indicator<root> / indicator)"
[fourlang] "(indicator<root> / indicator)"

NNP -> FlaPERIOD_NNP
[string] FlaPERIOD
[tree] NNP(FlaPERIOD)
[ud] "(FlaPERIOD<root> / FlaPERIOD)"
[fourlang] "(FlaPERIOD<root> / FlaPERIOD)"

NNS -> guerrillas_NNS
[string] guerrillas
[tree] NNS(guerrillas)
[ud] "(guerrillas<root> / guerrillas)"
[fourlang] "(guerrillas<root> / guerrillas)"

JJ -> Big_JJ
[string] Big
[tree] JJ(Big)
[ud] "(Big<root> / Big)"
[fourlang] "(Big<root> / Big)"

VBZ -> breaks_VBZ
[string] breaks
[tree] VBZ(breaks)
[ud] "(breaks<root> / breaks)"
[fourlang] "(breaks<root> / breaks)"

JJ -> general_JJ
[string] general
[tree] JJ(general)
[ud] "(general<root> / general)"
[fourlang] "(general<root> / general)"

JJ -> industryHYPHENwide_JJ
[string] industryHYPHENwide
[tree] JJ(industryHYPHENwide)
[ud] "(industryHYPHENwide<root> / industryHYPHENwide)"
[fourlang] "(industryHYPHENwide<root> / industryHYPHENwide)"

JJR -> fuller_JJR
[string] fuller
[tree] JJR(fuller)
[ud] "(fuller<root> / fuller)"
[fourlang] "(fuller<root> / fuller)"

NNS -> assaults_NNS
[string] assaults
[tree] NNS(assaults)
[ud] "(assaults<root> / assaults)"
[fourlang] "(assaults<root> / assaults)"

JJ -> lowHYPHENtech_JJ
[string] lowHYPHENtech
[tree] JJ(lowHYPHENtech)
[ud] "(lowHYPHENtech<root> / lowHYPHENtech)"
[fourlang] "(lowHYPHENtech<root> / lowHYPHENtech)"

PRP -> itself_PRP
[string] itself
[tree] PRP(itself)
[ud] "(itself<root> / itself)"
[fourlang] "(itself<root> / itself)"

IN -> down_IN
[string] down
[tree] IN(down)
[ud] "(down<root> / down)"
[fourlang] "(down<root> / down)"

JJ -> flat_JJ
[string] flat
[tree] JJ(flat)
[ud] "(flat<root> / flat)"
[fourlang] "(flat<root> / flat)"

NN -> rule_NN
[string] rule
[tree] NN(rule)
[ud] "(rule<root> / rule)"
[fourlang] "(rule<root> / rule)"

JJ -> yearHYPHENago_JJ
[string] yearHYPHENago
[tree] JJ(yearHYPHENago)
[ud] "(yearHYPHENago<root> / yearHYPHENago)"
[fourlang] "(yearHYPHENago<root> / yearHYPHENago)"

NNS -> Discos_NNS
[string] Discos
[tree] NNS(Discos)
[ud] "(Discos<root> / Discos)"
[fourlang] "(Discos<root> / Discos)"

NN -> reserve_NN
[string] reserve
[tree] NN(reserve)
[ud] "(reserve<root> / reserve)"
[fourlang] "(reserve<root> / reserve)"

NNP -> Media_NNP
[string] Media
[tree] NNP(Media)
[ud] "(Media<root> / Media)"
[fourlang] "(Media<root> / Media)"

JJ -> Negotiable_JJ
[string] Negotiable
[tree] JJ(Negotiable)
[ud] "(Negotiable<root> / Negotiable)"
[fourlang] "(Negotiable<root> / Negotiable)"

NNS -> Ports_NNS
[string] Ports
[tree] NNS(Ports)
[ud] "(Ports<root> / Ports)"
[fourlang] "(Ports<root> / Ports)"

NNP -> May_NNP
[string] May
[tree] NNP(May)
[ud] "(May<root> / May)"
[fourlang] "(May<root> / May)"

NNS -> rebels_NNS
[string] rebels
[tree] NNS(rebels)
[ud] "(rebels<root> / rebels)"
[fourlang] "(rebels<root> / rebels)"

NNP -> Down_NNP
[string] Down
[tree] NNP(Down)
[ud] "(Down<root> / Down)"
[fourlang] "(Down<root> / Down)"

NN -> Survey_NN
[string] Survey
[tree] NN(Survey)
[ud] "(Survey<root> / Survey)"
[fourlang] "(Survey<root> / Survey)"

NN -> brokerage_NN
[string] brokerage
[tree] NN(brokerage)
[ud] "(brokerage<root> / brokerage)"
[fourlang] "(brokerage<root> / brokerage)"

NN -> Part_NN
[string] Part
[tree] NN(Part)
[ud] "(Part<root> / Part)"
[fourlang] "(Part<root> / Part)"

NNP -> Hara_NNP
[string] Hara
[tree] NNP(Hara)
[ud] "(Hara<root> / Hara)"
[fourlang] "(Hara<root> / Hara)"

NNP -> Stephen_NNP
[string] Stephen
[tree] NNP(Stephen)
[ud] "(Stephen<root> / Stephen)"
[fourlang] "(Stephen<root> / Stephen)"

JJ -> harsh_JJ
[string] harsh
[tree] JJ(harsh)
[ud] "(harsh<root> / harsh)"
[fourlang] "(harsh<root> / harsh)"

NNP -> Pencil_NNP
[string] Pencil
[tree] NNP(Pencil)
[ud] "(Pencil<root> / Pencil)"
[fourlang] "(Pencil<root> / Pencil)"

JJ -> several_JJ
[string] several
[tree] JJ(several)
[ud] "(several<root> / several)"
[fourlang] "(several<root> / several)"

VBP -> trade_VBP
[string] trade
[tree] VBP(trade)
[ud] "(trade<root> / trade)"
[fourlang] "(trade<root> / trade)"

NN -> pageHYPHENone_NN
[string] pageHYPHENone
[tree] NN(pageHYPHENone)
[ud] "(pageHYPHENone<root> / pageHYPHENone)"
[fourlang] "(pageHYPHENone<root> / pageHYPHENone)"

VBN -> codified_VBN
[string] codified
[tree] VBN(codified)
[ud] "(codified<root> / codified)"
[fourlang] "(codified<root> / codified)"

NN -> silicone_NN
[string] silicone
[tree] NN(silicone)
[ud] "(silicone<root> / silicone)"
[fourlang] "(silicone<root> / silicone)"

NNS -> buyers_NNS
[string] buyers
[tree] NNS(buyers)
[ud] "(buyers<root> / buyers)"
[fourlang] "(buyers<root> / buyers)"

VB -> result_VB
[string] result
[tree] VB(result)
[ud] "(result<root> / result)"
[fourlang] "(result<root> / result)"

NNPS -> Instruments_NNPS
[string] Instruments
[tree] NNPS(Instruments)
[ud] "(Instruments<root> / Instruments)"
[fourlang] "(Instruments<root> / Instruments)"

JJ -> computerHYPHENsystemHYPHENdesign_JJ
[string] computerHYPHENsystemHYPHENdesign
[tree] JJ(computerHYPHENsystemHYPHENdesign)
[ud] "(computerHYPHENsystemHYPHENdesign<root> / computerHYPHENsystemHYPHENdesign)"
[fourlang] "(computerHYPHENsystemHYPHENdesign<root> / computerHYPHENsystemHYPHENdesign)"

NN -> Indexing_NN
[string] Indexing
[tree] NN(Indexing)
[ud] "(Indexing<root> / Indexing)"
[fourlang] "(Indexing<root> / Indexing)"

NN -> partner_NN
[string] partner
[tree] NN(partner)
[ud] "(partner<root> / partner)"
[fourlang] "(partner<root> / partner)"

JJ -> unrestricted_JJ
[string] unrestricted
[tree] JJ(unrestricted)
[ud] "(unrestricted<root> / unrestricted)"
[fourlang] "(unrestricted<root> / unrestricted)"

NN -> president_NN
[string] president
[tree] NN(president)
[ud] "(president<root> / president)"
[fourlang] "(president<root> / president)"

JJ -> Individual_JJ
[string] Individual
[tree] JJ(Individual)
[ud] "(Individual<root> / Individual)"
[fourlang] "(Individual<root> / Individual)"

NNS -> concessions_NNS
[string] concessions
[tree] NNS(concessions)
[ud] "(concessions<root> / concessions)"
[fourlang] "(concessions<root> / concessions)"

NN -> worthiness_NN
[string] worthiness
[tree] NN(worthiness)
[ud] "(worthiness<root> / worthiness)"
[fourlang] "(worthiness<root> / worthiness)"

NN -> reasoning_NN
[string] reasoning
[tree] NN(reasoning)
[ud] "(reasoning<root> / reasoning)"
[fourlang] "(reasoning<root> / reasoning)"

NNS -> aftereffects_NNS
[string] aftereffects
[tree] NNS(aftereffects)
[ud] "(aftereffects<root> / aftereffects)"
[fourlang] "(aftereffects<root> / aftereffects)"

JJ -> effective_JJ
[string] effective
[tree] JJ(effective)
[ud] "(effective<root> / effective)"
[fourlang] "(effective<root> / effective)"

NN -> influence_NN
[string] influence
[tree] NN(influence)
[ud] "(influence<root> / influence)"
[fourlang] "(influence<root> / influence)"

NN -> interestHYPHENrate_NN
[string] interestHYPHENrate
[tree] NN(interestHYPHENrate)
[ud] "(interestHYPHENrate<root> / interestHYPHENrate)"
[fourlang] "(interestHYPHENrate<root> / interestHYPHENrate)"

NNS -> injuries_NNS
[string] injuries
[tree] NNS(injuries)
[ud] "(injuries<root> / injuries)"
[fourlang] "(injuries<root> / injuries)"

NN -> house_NN
[string] house
[tree] NN(house)
[ud] "(house<root> / house)"
[fourlang] "(house<root> / house)"

NNP -> Insurance_NNP
[string] Insurance
[tree] NNP(Insurance)
[ud] "(Insurance<root> / Insurance)"
[fourlang] "(Insurance<root> / Insurance)"

JJ -> damaging_JJ
[string] damaging
[tree] JJ(damaging)
[ud] "(damaging<root> / damaging)"
[fourlang] "(damaging<root> / damaging)"

NNP -> Funding_NNP
[string] Funding
[tree] NNP(Funding)
[ud] "(Funding<root> / Funding)"
[fourlang] "(Funding<root> / Funding)"

JJ -> preset_JJ
[string] preset
[tree] JJ(preset)
[ud] "(preset<root> / preset)"
[fourlang] "(preset<root> / preset)"

NNP -> Scowcroft_NNP
[string] Scowcroft
[tree] NNP(Scowcroft)
[ud] "(Scowcroft<root> / Scowcroft)"
[fourlang] "(Scowcroft<root> / Scowcroft)"

NNS -> POTABLES_NNS
[string] POTABLES
[tree] NNS(POTABLES)
[ud] "(POTABLES<root> / POTABLES)"
[fourlang] "(POTABLES<root> / POTABLES)"

NNS -> bills_NNS
[string] bills
[tree] NNS(bills)
[ud] "(bills<root> / bills)"
[fourlang] "(bills<root> / bills)"

NN -> struggle_NN
[string] struggle
[tree] NN(struggle)
[ud] "(struggle<root> / struggle)"
[fourlang] "(struggle<root> / struggle)"

PUNCT -> HYPHENHYPHEN_PUNCT
[string] HYPHENHYPHEN
[tree] PUNCT(HYPHENHYPHEN)
[ud] "(HYPHENHYPHEN<root> / HYPHENHYPHEN)"
[fourlang] "(HYPHENHYPHEN<root> / HYPHENHYPHEN)"

NN -> seller_NN
[string] seller
[tree] NN(seller)
[ud] "(seller<root> / seller)"
[fourlang] "(seller<root> / seller)"

JJ -> environmental_JJ
[string] environmental
[tree] JJ(environmental)
[ud] "(environmental<root> / environmental)"
[fourlang] "(environmental<root> / environmental)"

NN -> INTERBANK_NN
[string] INTERBANK
[tree] NN(INTERBANK)
[ud] "(INTERBANK<root> / INTERBANK)"
[fourlang] "(INTERBANK<root> / INTERBANK)"

NN -> processing_NN
[string] processing
[tree] NN(processing)
[ud] "(processing<root> / processing)"
[fourlang] "(processing<root> / processing)"

NNP -> Guigal_NNP
[string] Guigal
[tree] NNP(Guigal)
[ud] "(Guigal<root> / Guigal)"
[fourlang] "(Guigal<root> / Guigal)"

NNP -> USX_NNP
[string] USX
[tree] NNP(USX)
[ud] "(USX<root> / USX)"
[fourlang] "(USX<root> / USX)"

VBG -> ending_VBG
[string] ending
[tree] VBG(ending)
[ud] "(ending<root> / ending)"
[fourlang] "(ending<root> / ending)"

VBN -> empowered_VBN
[string] empowered
[tree] VBN(empowered)
[ud] "(empowered<root> / empowered)"
[fourlang] "(empowered<root> / empowered)"

RB -> Even_RB
[string] Even
[tree] RB(Even)
[ud] "(Even<root> / Even)"
[fourlang] "(Even<root> / Even)"

VB -> block_VB
[string] block
[tree] VB(block)
[ud] "(block<root> / block)"
[fourlang] "(block<root> / block)"

NNS -> prospects_NNS
[string] prospects
[tree] NNS(prospects)
[ud] "(prospects<root> / prospects)"
[fourlang] "(prospects<root> / prospects)"

NNP -> Corporate_NNP
[string] Corporate
[tree] NNP(Corporate)
[ud] "(Corporate<root> / Corporate)"
[fourlang] "(Corporate<root> / Corporate)"

JJ -> highHYPHENbalance_JJ
[string] highHYPHENbalance
[tree] JJ(highHYPHENbalance)
[ud] "(highHYPHENbalance<root> / highHYPHENbalance)"
[fourlang] "(highHYPHENbalance<root> / highHYPHENbalance)"

VBD -> thought_VBD
[string] thought
[tree] VBD(thought)
[ud] "(thought<root> / thought)"
[fourlang] "(thought<root> / thought)"

VBG -> developing_VBG
[string] developing
[tree] VBG(developing)
[ud] "(developing<root> / developing)"
[fourlang] "(developing<root> / developing)"

NNP -> Research_NNP
[string] Research
[tree] NNP(Research)
[ud] "(Research<root> / Research)"
[fourlang] "(Research<root> / Research)"

NNS -> prosecutors_NNS
[string] prosecutors
[tree] NNS(prosecutors)
[ud] "(prosecutors<root> / prosecutors)"
[fourlang] "(prosecutors<root> / prosecutors)"

NN -> council_NN
[string] council
[tree] NN(council)
[ud] "(council<root> / council)"
[fourlang] "(council<root> / council)"

NNP -> Marder_NNP
[string] Marder
[tree] NNP(Marder)
[ud] "(Marder<root> / Marder)"
[fourlang] "(Marder<root> / Marder)"

NN -> shambles_NN
[string] shambles
[tree] NN(shambles)
[ud] "(shambles<root> / shambles)"
[fourlang] "(shambles<root> / shambles)"

NNP -> Vos_NNP
[string] Vos
[tree] NNP(Vos)
[ud] "(Vos<root> / Vos)"
[fourlang] "(Vos<root> / Vos)"

NNS -> sellers_NNS
[string] sellers
[tree] NNS(sellers)
[ud] "(sellers<root> / sellers)"
[fourlang] "(sellers<root> / sellers)"

NNPS -> Tots_NNPS
[string] Tots
[tree] NNPS(Tots)
[ud] "(Tots<root> / Tots)"
[fourlang] "(Tots<root> / Tots)"

NN -> downgrading_NN
[string] downgrading
[tree] NN(downgrading)
[ud] "(downgrading<root> / downgrading)"
[fourlang] "(downgrading<root> / downgrading)"

NNP -> IndPERIOD_NNP
[string] IndPERIOD
[tree] NNP(IndPERIOD)
[ud] "(IndPERIOD<root> / IndPERIOD)"
[fourlang] "(IndPERIOD<root> / IndPERIOD)"

NN -> shipbuilding_NN
[string] shipbuilding
[tree] NN(shipbuilding)
[ud] "(shipbuilding<root> / shipbuilding)"
[fourlang] "(shipbuilding<root> / shipbuilding)"

NNP -> Capital_NNP
[string] Capital
[tree] NNP(Capital)
[ud] "(Capital<root> / Capital)"
[fourlang] "(Capital<root> / Capital)"

NNS -> answers_NNS
[string] answers
[tree] NNS(answers)
[ud] "(answers<root> / answers)"
[fourlang] "(answers<root> / answers)"

NN -> staff_NN
[string] staff
[tree] NN(staff)
[ud] "(staff<root> / staff)"
[fourlang] "(staff<root> / staff)"

NNS -> interactions_NNS
[string] interactions
[tree] NNS(interactions)
[ud] "(interactions<root> / interactions)"
[fourlang] "(interactions<root> / interactions)"

JJ -> lessHYPHENthanHYPHENbrilliant_JJ
[string] lessHYPHENthanHYPHENbrilliant
[tree] JJ(lessHYPHENthanHYPHENbrilliant)
[ud] "(lessHYPHENthanHYPHENbrilliant<root> / lessHYPHENthanHYPHENbrilliant)"
[fourlang] "(lessHYPHENthanHYPHENbrilliant<root> / lessHYPHENthanHYPHENbrilliant)"

NN -> branch_NN
[string] branch
[tree] NN(branch)
[ud] "(branch<root> / branch)"
[fourlang] "(branch<root> / branch)"

NN -> faculty_NN
[string] faculty
[tree] NN(faculty)
[ud] "(faculty<root> / faculty)"
[fourlang] "(faculty<root> / faculty)"

RB -> relentlessly_RB
[string] relentlessly
[tree] RB(relentlessly)
[ud] "(relentlessly<root> / relentlessly)"
[fourlang] "(relentlessly<root> / relentlessly)"

JJ -> firm_JJ
[string] firm
[tree] JJ(firm)
[ud] "(firm<root> / firm)"
[fourlang] "(firm<root> / firm)"

JJ -> good_JJ
[string] good
[tree] JJ(good)
[ud] "(good<root> / good)"
[fourlang] "(good<root> / good)"

NNP -> Suisse_NNP
[string] Suisse
[tree] NNP(Suisse)
[ud] "(Suisse<root> / Suisse)"
[fourlang] "(Suisse<root> / Suisse)"

RB -> far_RB
[string] far
[tree] RB(far)
[ud] "(far<root> / far)"
[fourlang] "(far<root> / far)"

NN -> market_NN
[string] market
[tree] NN(market)
[ud] "(market<root> / market)"
[fourlang] "(market<root> / market)"

NNS -> streets_NNS
[string] streets
[tree] NNS(streets)
[ud] "(streets<root> / streets)"
[fourlang] "(streets<root> / streets)"

NNP -> Congress_NNP
[string] Congress
[tree] NNP(Congress)
[ud] "(Congress<root> / Congress)"
[fourlang] "(Congress<root> / Congress)"

PRP -> you_PRP
[string] you
[tree] PRP(you)
[ud] "(you<root> / you)"
[fourlang] "(you<root> / you)"

NN -> insolvency_NN
[string] insolvency
[tree] NN(insolvency)
[ud] "(insolvency<root> / insolvency)"
[fourlang] "(insolvency<root> / insolvency)"

NNS -> efforts_NNS
[string] efforts
[tree] NNS(efforts)
[ud] "(efforts<root> / efforts)"
[fourlang] "(efforts<root> / efforts)"

NN -> insurer_NN
[string] insurer
[tree] NN(insurer)
[ud] "(insurer<root> / insurer)"
[fourlang] "(insurer<root> / insurer)"

NN -> rating_NN
[string] rating
[tree] NN(rating)
[ud] "(rating<root> / rating)"
[fourlang] "(rating<root> / rating)"

NNP -> Rick_NNP
[string] Rick
[tree] NNP(Rick)
[ud] "(Rick<root> / Rick)"
[fourlang] "(Rick<root> / Rick)"

NNPS -> Communications_NNPS
[string] Communications
[tree] NNPS(Communications)
[ud] "(Communications<root> / Communications)"
[fourlang] "(Communications<root> / Communications)"

VBG -> reflecting_VBG
[string] reflecting
[tree] VBG(reflecting)
[ud] "(reflecting<root> / reflecting)"
[fourlang] "(reflecting<root> / reflecting)"

NNP -> Muramatsu_NNP
[string] Muramatsu
[tree] NNP(Muramatsu)
[ud] "(Muramatsu<root> / Muramatsu)"
[fourlang] "(Muramatsu<root> / Muramatsu)"

JJ -> explosive_JJ
[string] explosive
[tree] JJ(explosive)
[ud] "(explosive<root> / explosive)"
[fourlang] "(explosive<root> / explosive)"

NNS -> colleges_NNS
[string] colleges
[tree] NNS(colleges)
[ud] "(colleges<root> / colleges)"
[fourlang] "(colleges<root> / colleges)"

NNS -> insiders_NNS
[string] insiders
[tree] NNS(insiders)
[ud] "(insiders<root> / insiders)"
[fourlang] "(insiders<root> / insiders)"

VB -> place_VB
[string] place
[tree] VB(place)
[ud] "(place<root> / place)"
[fourlang] "(place<root> / place)"

NNP -> Traficant_NNP
[string] Traficant
[tree] NNP(Traficant)
[ud] "(Traficant<root> / Traficant)"
[fourlang] "(Traficant<root> / Traficant)"

NN -> form_NN
[string] form
[tree] NN(form)
[ud] "(form<root> / form)"
[fourlang] "(form<root> / form)"

JJ -> human_JJ
[string] human
[tree] JJ(human)
[ud] "(human<root> / human)"
[fourlang] "(human<root> / human)"

VBN -> notified_VBN
[string] notified
[tree] VBN(notified)
[ud] "(notified<root> / notified)"
[fourlang] "(notified<root> / notified)"

VBZ -> implies_VBZ
[string] implies
[tree] VBZ(implies)
[ud] "(implies<root> / implies)"
[fourlang] "(implies<root> / implies)"

JJ -> centsHYPHENaHYPHENunit_JJ
[string] centsHYPHENaHYPHENunit
[tree] JJ(centsHYPHENaHYPHENunit)
[ud] "(centsHYPHENaHYPHENunit<root> / centsHYPHENaHYPHENunit)"
[fourlang] "(centsHYPHENaHYPHENunit<root> / centsHYPHENaHYPHENunit)"

VBP -> are_VBP
[string] are
[tree] VBP(are)
[ud] "(are<root> / are)"
[fourlang] "(are<root> / are)"

NNP -> Western_NNP
[string] Western
[tree] NNP(Western)
[ud] "(Western<root> / Western)"
[fourlang] "(Western<root> / Western)"

VB -> project_VB
[string] project
[tree] VB(project)
[ud] "(project<root> / project)"
[fourlang] "(project<root> / project)"

JJ -> moneyHYPHENcenter_JJ
[string] moneyHYPHENcenter
[tree] JJ(moneyHYPHENcenter)
[ud] "(moneyHYPHENcenter<root> / moneyHYPHENcenter)"
[fourlang] "(moneyHYPHENcenter<root> / moneyHYPHENcenter)"

NNS -> countries_NNS
[string] countries
[tree] NNS(countries)
[ud] "(countries<root> / countries)"
[fourlang] "(countries<root> / countries)"

NNS -> categories_NNS
[string] categories
[tree] NNS(categories)
[ud] "(categories<root> / categories)"
[fourlang] "(categories<root> / categories)"

NNP -> MsPERIOD_NNP
[string] MsPERIOD
[tree] NNP(MsPERIOD)
[ud] "(MsPERIOD<root> / MsPERIOD)"
[fourlang] "(MsPERIOD<root> / MsPERIOD)"

NN -> founder_NN
[string] founder
[tree] NN(founder)
[ud] "(founder<root> / founder)"
[fourlang] "(founder<root> / founder)"

VBN -> been_VBN
[string] been
[tree] VBN(been)
[ud] "(been<root> / been)"
[fourlang] "(been<root> / been)"

NN -> Volatility_NN
[string] Volatility
[tree] NN(Volatility)
[ud] "(Volatility<root> / Volatility)"
[fourlang] "(Volatility<root> / Volatility)"

VBG -> indicating_VBG
[string] indicating
[tree] VBG(indicating)
[ud] "(indicating<root> / indicating)"
[fourlang] "(indicating<root> / indicating)"

VB -> show_VB
[string] show
[tree] VB(show)
[ud] "(show<root> / show)"
[fourlang] "(show<root> / show)"

NNS -> graphics_NNS
[string] graphics
[tree] NNS(graphics)
[ud] "(graphics<root> / graphics)"
[fourlang] "(graphics<root> / graphics)"

VBN -> integrated_VBN
[string] integrated
[tree] VBN(integrated)
[ud] "(integrated<root> / integrated)"
[fourlang] "(integrated<root> / integrated)"

NN -> bakery_NN
[string] bakery
[tree] NN(bakery)
[ud] "(bakery<root> / bakery)"
[fourlang] "(bakery<root> / bakery)"

JJ -> Swiss_JJ
[string] Swiss
[tree] JJ(Swiss)
[ud] "(Swiss<root> / Swiss)"
[fourlang] "(Swiss<root> / Swiss)"

NN -> record_NN
[string] record
[tree] NN(record)
[ud] "(record<root> / record)"
[fourlang] "(record<root> / record)"

DT -> each_DT
[string] each
[tree] DT(each)
[ud] "(each<root> / each)"
[fourlang] "(each<root> / each)"

NNS -> starters_NNS
[string] starters
[tree] NNS(starters)
[ud] "(starters<root> / starters)"
[fourlang] "(starters<root> / starters)"

NNP -> PhacoFlex_NNP
[string] PhacoFlex
[tree] NNP(PhacoFlex)
[ud] "(PhacoFlex<root> / PhacoFlex)"
[fourlang] "(PhacoFlex<root> / PhacoFlex)"

NN -> round_NN
[string] round
[tree] NN(round)
[ud] "(round<root> / round)"
[fourlang] "(round<root> / round)"

NNP -> Stock_NNP
[string] Stock
[tree] NNP(Stock)
[ud] "(Stock<root> / Stock)"
[fourlang] "(Stock<root> / Stock)"

NNS -> lines_NNS
[string] lines
[tree] NNS(lines)
[ud] "(lines<root> / lines)"
[fourlang] "(lines<root> / lines)"

NN -> revival_NN
[string] revival
[tree] NN(revival)
[ud] "(revival<root> / revival)"
[fourlang] "(revival<root> / revival)"

NNS -> indexes_NNS
[string] indexes
[tree] NNS(indexes)
[ud] "(indexes<root> / indexes)"
[fourlang] "(indexes<root> / indexes)"

JJ -> twoHYPHENtiered_JJ
[string] twoHYPHENtiered
[tree] JJ(twoHYPHENtiered)
[ud] "(twoHYPHENtiered<root> / twoHYPHENtiered)"
[fourlang] "(twoHYPHENtiered<root> / twoHYPHENtiered)"

NN -> videocassette_NN
[string] videocassette
[tree] NN(videocassette)
[ud] "(videocassette<root> / videocassette)"
[fourlang] "(videocassette<root> / videocassette)"

VB -> become_VB
[string] become
[tree] VB(become)
[ud] "(become<root> / become)"
[fourlang] "(become<root> / become)"

NNP -> Lord_NNP
[string] Lord
[tree] NNP(Lord)
[ud] "(Lord<root> / Lord)"
[fourlang] "(Lord<root> / Lord)"

NN -> segment_NN
[string] segment
[tree] NN(segment)
[ud] "(segment<root> / segment)"
[fourlang] "(segment<root> / segment)"

VBN -> spent_VBN
[string] spent
[tree] VBN(spent)
[ud] "(spent<root> / spent)"
[fourlang] "(spent<root> / spent)"

NN -> battery_NN
[string] battery
[tree] NN(battery)
[ud] "(battery<root> / battery)"
[fourlang] "(battery<root> / battery)"

NNPS -> Institutes_NNPS
[string] Institutes
[tree] NNPS(Institutes)
[ud] "(Institutes<root> / Institutes)"
[fourlang] "(Institutes<root> / Institutes)"

NN -> client_NN
[string] client
[tree] NN(client)
[ud] "(client<root> / client)"
[fourlang] "(client<root> / client)"

VBN -> subordinated_VBN
[string] subordinated
[tree] VBN(subordinated)
[ud] "(subordinated<root> / subordinated)"
[fourlang] "(subordinated<root> / subordinated)"

IN -> while_IN
[string] while
[tree] IN(while)
[ud] "(while<root> / while)"
[fourlang] "(while<root> / while)"

NN -> knowledge_NN
[string] knowledge
[tree] NN(knowledge)
[ud] "(knowledge<root> / knowledge)"
[fourlang] "(knowledge<root> / knowledge)"

JJ -> thirdHYPHENquarter_JJ
[string] thirdHYPHENquarter
[tree] JJ(thirdHYPHENquarter)
[ud] "(thirdHYPHENquarter<root> / thirdHYPHENquarter)"
[fourlang] "(thirdHYPHENquarter<root> / thirdHYPHENquarter)"

NN -> model_NN
[string] model
[tree] NN(model)
[ud] "(model<root> / model)"
[fourlang] "(model<root> / model)"

VBG -> totaling_VBG
[string] totaling
[tree] VBG(totaling)
[ud] "(totaling<root> / totaling)"
[fourlang] "(totaling<root> / totaling)"

NNS -> weeks_NNS
[string] weeks
[tree] NNS(weeks)
[ud] "(weeks<root> / weeks)"
[fourlang] "(weeks<root> / weeks)"

NN -> press_NN
[string] press
[tree] NN(press)
[ud] "(press<root> / press)"
[fourlang] "(press<root> / press)"

NN -> presence_NN
[string] presence
[tree] NN(presence)
[ud] "(presence<root> / presence)"
[fourlang] "(presence<root> / presence)"

NN -> revolt_NN
[string] revolt
[tree] NN(revolt)
[ud] "(revolt<root> / revolt)"
[fourlang] "(revolt<root> / revolt)"

NNP -> Fernando_NNP
[string] Fernando
[tree] NNP(Fernando)
[ud] "(Fernando<root> / Fernando)"
[fourlang] "(Fernando<root> / Fernando)"

NNP -> NPERIODY_NNP
[string] NPERIODY
[tree] NNP(NPERIODY)
[ud] "(NPERIODY<root> / NPERIODY)"
[fourlang] "(NPERIODY<root> / NPERIODY)"

NNS -> pricings_NNS
[string] pricings
[tree] NNS(pricings)
[ud] "(pricings<root> / pricings)"
[fourlang] "(pricings<root> / pricings)"

NN -> indexHYPHENarbitrage_NN
[string] indexHYPHENarbitrage
[tree] NN(indexHYPHENarbitrage)
[ud] "(indexHYPHENarbitrage<root> / indexHYPHENarbitrage)"
[fourlang] "(indexHYPHENarbitrage<root> / indexHYPHENarbitrage)"

NNP -> Coleco_NNP
[string] Coleco
[tree] NNP(Coleco)
[ud] "(Coleco<root> / Coleco)"
[fourlang] "(Coleco<root> / Coleco)"

VB -> establish_VB
[string] establish
[tree] VB(establish)
[ud] "(establish<root> / establish)"
[fourlang] "(establish<root> / establish)"

NNP -> Daniels_NNP
[string] Daniels
[tree] NNP(Daniels)
[ud] "(Daniels<root> / Daniels)"
[fourlang] "(Daniels<root> / Daniels)"

NNP -> Aktiebolaget_NNP
[string] Aktiebolaget
[tree] NNP(Aktiebolaget)
[ud] "(Aktiebolaget<root> / Aktiebolaget)"
[fourlang] "(Aktiebolaget<root> / Aktiebolaget)"

NN -> skin_NN
[string] skin
[tree] NN(skin)
[ud] "(skin<root> / skin)"
[fourlang] "(skin<root> / skin)"

NNP -> Dingell_NNP
[string] Dingell
[tree] NNP(Dingell)
[ud] "(Dingell<root> / Dingell)"
[fourlang] "(Dingell<root> / Dingell)"

NNS -> margins_NNS
[string] margins
[tree] NNS(margins)
[ud] "(margins<root> / margins)"
[fourlang] "(margins<root> / margins)"

VBG -> jumping_VBG
[string] jumping
[tree] VBG(jumping)
[ud] "(jumping<root> / jumping)"
[fourlang] "(jumping<root> / jumping)"

WRB -> where_WRB
[string] where
[tree] WRB(where)
[ud] "(where<root> / where)"
[fourlang] "(where<root> / where)"

NN -> concept_NN
[string] concept
[tree] NN(concept)
[ud] "(concept<root> / concept)"
[fourlang] "(concept<root> / concept)"

JJ -> SacramentoHYPHENbased_JJ
[string] SacramentoHYPHENbased
[tree] JJ(SacramentoHYPHENbased)
[ud] "(SacramentoHYPHENbased<root> / SacramentoHYPHENbased)"
[fourlang] "(SacramentoHYPHENbased<root> / SacramentoHYPHENbased)"

NNP -> Glaxo_NNP
[string] Glaxo
[tree] NNP(Glaxo)
[ud] "(Glaxo<root> / Glaxo)"
[fourlang] "(Glaxo<root> / Glaxo)"

JJ -> Close_JJ
[string] Close
[tree] JJ(Close)
[ud] "(Close<root> / Close)"
[fourlang] "(Close<root> / Close)"

NN -> reduction_NN
[string] reduction
[tree] NN(reduction)
[ud] "(reduction<root> / reduction)"
[fourlang] "(reduction<root> / reduction)"

NNP -> Norman_NNP
[string] Norman
[tree] NNP(Norman)
[ud] "(Norman<root> / Norman)"
[fourlang] "(Norman<root> / Norman)"

NNPS -> Americans_NNPS
[string] Americans
[tree] NNPS(Americans)
[ud] "(Americans<root> / Americans)"
[fourlang] "(Americans<root> / Americans)"

NNP -> Royal_NNP
[string] Royal
[tree] NNP(Royal)
[ud] "(Royal<root> / Royal)"
[fourlang] "(Royal<root> / Royal)"

NNP -> Herald_NNP
[string] Herald
[tree] NNP(Herald)
[ud] "(Herald<root> / Herald)"
[fourlang] "(Herald<root> / Herald)"

JJ -> selfHYPHENperpetuating_JJ
[string] selfHYPHENperpetuating
[tree] JJ(selfHYPHENperpetuating)
[ud] "(selfHYPHENperpetuating<root> / selfHYPHENperpetuating)"
[fourlang] "(selfHYPHENperpetuating<root> / selfHYPHENperpetuating)"

NNP -> Clemens_NNP
[string] Clemens
[tree] NNP(Clemens)
[ud] "(Clemens<root> / Clemens)"
[fourlang] "(Clemens<root> / Clemens)"

NNP -> Monetary_NNP
[string] Monetary
[tree] NNP(Monetary)
[ud] "(Monetary<root> / Monetary)"
[fourlang] "(Monetary<root> / Monetary)"

NN -> ballot_NN
[string] ballot
[tree] NN(ballot)
[ud] "(ballot<root> / ballot)"
[fourlang] "(ballot<root> / ballot)"

VBN -> managed_VBN
[string] managed
[tree] VBN(managed)
[ud] "(managed<root> / managed)"
[fourlang] "(managed<root> / managed)"

NN -> photograph_NN
[string] photograph
[tree] NN(photograph)
[ud] "(photograph<root> / photograph)"
[fourlang] "(photograph<root> / photograph)"

JJ -> freeHYPHENlance_JJ
[string] freeHYPHENlance
[tree] JJ(freeHYPHENlance)
[ud] "(freeHYPHENlance<root> / freeHYPHENlance)"
[fourlang] "(freeHYPHENlance<root> / freeHYPHENlance)"

NN -> past_NN
[string] past
[tree] NN(past)
[ud] "(past<root> / past)"
[fourlang] "(past<root> / past)"

NN -> warehousing_NN
[string] warehousing
[tree] NN(warehousing)
[ud] "(warehousing<root> / warehousing)"
[fourlang] "(warehousing<root> / warehousing)"

NN -> team_NN
[string] team
[tree] NN(team)
[ud] "(team<root> / team)"
[fourlang] "(team<root> / team)"

NNP -> Deere_NNP
[string] Deere
[tree] NNP(Deere)
[ud] "(Deere<root> / Deere)"
[fourlang] "(Deere<root> / Deere)"

JJ -> highHYPHENlevel_JJ
[string] highHYPHENlevel
[tree] JJ(highHYPHENlevel)
[ud] "(highHYPHENlevel<root> / highHYPHENlevel)"
[fourlang] "(highHYPHENlevel<root> / highHYPHENlevel)"

VBZ -> treats_VBZ
[string] treats
[tree] VBZ(treats)
[ud] "(treats<root> / treats)"
[fourlang] "(treats<root> / treats)"

JJ -> theological_JJ
[string] theological
[tree] JJ(theological)
[ud] "(theological<root> / theological)"
[fourlang] "(theological<root> / theological)"

NN -> closing_NN
[string] closing
[tree] NN(closing)
[ud] "(closing<root> / closing)"
[fourlang] "(closing<root> / closing)"

MD -> should_MD
[string] should
[tree] MD(should)
[ud] "(should<root> / should)"
[fourlang] "(should<root> / should)"

NNP -> Wu_NNP
[string] Wu
[tree] NNP(Wu)
[ud] "(Wu<root> / Wu)"
[fourlang] "(Wu<root> / Wu)"

NNS -> spenders_NNS
[string] spenders
[tree] NNS(spenders)
[ud] "(spenders<root> / spenders)"
[fourlang] "(spenders<root> / spenders)"

VBN -> specified_VBN
[string] specified
[tree] VBN(specified)
[ud] "(specified<root> / specified)"
[fourlang] "(specified<root> / specified)"

VBG -> sleeping_VBG
[string] sleeping
[tree] VBG(sleeping)
[ud] "(sleeping<root> / sleeping)"
[fourlang] "(sleeping<root> / sleeping)"

NNP -> Major_NNP
[string] Major
[tree] NNP(Major)
[ud] "(Major<root> / Major)"
[fourlang] "(Major<root> / Major)"

NN -> agency_NN
[string] agency
[tree] NN(agency)
[ud] "(agency<root> / agency)"
[fourlang] "(agency<root> / agency)"

NN -> separation_NN
[string] separation
[tree] NN(separation)
[ud] "(separation<root> / separation)"
[fourlang] "(separation<root> / separation)"

NN -> emergency_NN
[string] emergency
[tree] NN(emergency)
[ud] "(emergency<root> / emergency)"
[fourlang] "(emergency<root> / emergency)"

NNP -> Francisco_NNP
[string] Francisco
[tree] NNP(Francisco)
[ud] "(Francisco<root> / Francisco)"
[fourlang] "(Francisco<root> / Francisco)"

VB -> issue_VB
[string] issue
[tree] VB(issue)
[ud] "(issue<root> / issue)"
[fourlang] "(issue<root> / issue)"

VBZ -> competes_VBZ
[string] competes
[tree] VBZ(competes)
[ud] "(competes<root> / competes)"
[fourlang] "(competes<root> / competes)"

PRP$ -> Their_PRP$
[string] Their
[tree] PRP$(Their)
[ud] "(Their<root> / Their)"
[fourlang] "(Their<root> / Their)"

NNP -> Fischer_NNP
[string] Fischer
[tree] NNP(Fischer)
[ud] "(Fischer<root> / Fischer)"
[fourlang] "(Fischer<root> / Fischer)"

NN -> duty_NN
[string] duty
[tree] NN(duty)
[ud] "(duty<root> / duty)"
[fourlang] "(duty<root> / duty)"

NN -> Labor_NN
[string] Labor
[tree] NN(Labor)
[ud] "(Labor<root> / Labor)"
[fourlang] "(Labor<root> / Labor)"

NNPS -> Savings_NNPS
[string] Savings
[tree] NNPS(Savings)
[ud] "(Savings<root> / Savings)"
[fourlang] "(Savings<root> / Savings)"

JJR -> More_JJR
[string] More
[tree] JJR(More)
[ud] "(More<root> / More)"
[fourlang] "(More<root> / More)"

NN -> manufacturer_NN
[string] manufacturer
[tree] NN(manufacturer)
[ud] "(manufacturer<root> / manufacturer)"
[fourlang] "(manufacturer<root> / manufacturer)"

NN -> cloth_NN
[string] cloth
[tree] NN(cloth)
[ud] "(cloth<root> / cloth)"
[fourlang] "(cloth<root> / cloth)"

NN -> helm_NN
[string] helm
[tree] NN(helm)
[ud] "(helm<root> / helm)"
[fourlang] "(helm<root> / helm)"

JJ -> crystalHYPHENlattice_JJ
[string] crystalHYPHENlattice
[tree] JJ(crystalHYPHENlattice)
[ud] "(crystalHYPHENlattice<root> / crystalHYPHENlattice)"
[fourlang] "(crystalHYPHENlattice<root> / crystalHYPHENlattice)"

NNP -> RATE_NNP
[string] RATE
[tree] NNP(RATE)
[ud] "(RATE<root> / RATE)"
[fourlang] "(RATE<root> / RATE)"

JJ -> structural_JJ
[string] structural
[tree] JJ(structural)
[ud] "(structural<root> / structural)"
[fourlang] "(structural<root> / structural)"

NN -> soul_NN
[string] soul
[tree] NN(soul)
[ud] "(soul<root> / soul)"
[fourlang] "(soul<root> / soul)"

JJ -> indexHYPHENarbitrage_JJ
[string] indexHYPHENarbitrage
[tree] JJ(indexHYPHENarbitrage)
[ud] "(indexHYPHENarbitrage<root> / indexHYPHENarbitrage)"
[fourlang] "(indexHYPHENarbitrage<root> / indexHYPHENarbitrage)"

NNS -> leaders_NNS
[string] leaders
[tree] NNS(leaders)
[ud] "(leaders<root> / leaders)"
[fourlang] "(leaders<root> / leaders)"

NNP -> Inc_NNP
[string] Inc
[tree] NNP(Inc)
[ud] "(Inc<root> / Inc)"
[fourlang] "(Inc<root> / Inc)"

JJ -> cavernous_JJ
[string] cavernous
[tree] JJ(cavernous)
[ud] "(cavernous<root> / cavernous)"
[fourlang] "(cavernous<root> / cavernous)"

NNP -> JPERIOD_NNP
[string] JPERIOD
[tree] NNP(JPERIOD)
[ud] "(JPERIOD<root> / JPERIOD)"
[fourlang] "(JPERIOD<root> / JPERIOD)"

NN -> fastHYPHENfood_NN
[string] fastHYPHENfood
[tree] NN(fastHYPHENfood)
[ud] "(fastHYPHENfood<root> / fastHYPHENfood)"
[fourlang] "(fastHYPHENfood<root> / fastHYPHENfood)"

NNP -> August_NNP
[string] August
[tree] NNP(August)
[ud] "(August<root> / August)"
[fourlang] "(August<root> / August)"

NNP -> Pramual_NNP
[string] Pramual
[tree] NNP(Pramual)
[ud] "(Pramual<root> / Pramual)"
[fourlang] "(Pramual<root> / Pramual)"

NNP -> Key_NNP
[string] Key
[tree] NNP(Key)
[ud] "(Key<root> / Key)"
[fourlang] "(Key<root> / Key)"

VB -> mature_VB
[string] mature
[tree] VB(mature)
[ud] "(mature<root> / mature)"
[fourlang] "(mature<root> / mature)"

NNP -> Vega_NNP
[string] Vega
[tree] NNP(Vega)
[ud] "(Vega<root> / Vega)"
[fourlang] "(Vega<root> / Vega)"

NNP -> DOT_NNP
[string] DOT
[tree] NNP(DOT)
[ud] "(DOT<root> / DOT)"
[fourlang] "(DOT<root> / DOT)"

JJ -> indirect_JJ
[string] indirect
[tree] JJ(indirect)
[ud] "(indirect<root> / indirect)"
[fourlang] "(indirect<root> / indirect)"

NNP -> Laser_NNP
[string] Laser
[tree] NNP(Laser)
[ud] "(Laser<root> / Laser)"
[fourlang] "(Laser<root> / Laser)"

NN -> put_NN
[string] put
[tree] NN(put)
[ud] "(put<root> / put)"
[fourlang] "(put<root> / put)"

NNP -> Oliver_NNP
[string] Oliver
[tree] NNP(Oliver)
[ud] "(Oliver<root> / Oliver)"
[fourlang] "(Oliver<root> / Oliver)"

JJ -> fourHYPHENyear_JJ
[string] fourHYPHENyear
[tree] JJ(fourHYPHENyear)
[ud] "(fourHYPHENyear<root> / fourHYPHENyear)"
[fourlang] "(fourHYPHENyear<root> / fourHYPHENyear)"

NNP -> Asian_NNP
[string] Asian
[tree] NNP(Asian)
[ud] "(Asian<root> / Asian)"
[fourlang] "(Asian<root> / Asian)"

NN -> manner_NN
[string] manner
[tree] NN(manner)
[ud] "(manner<root> / manner)"
[fourlang] "(manner<root> / manner)"

DT -> a_DT
[string] a
[tree] DT(a)
[ud] "(a<root> / a)"
[fourlang] "(a<root> / a)"

NN -> perception_NN
[string] perception
[tree] NN(perception)
[ud] "(perception<root> / perception)"
[fourlang] "(perception<root> / perception)"

NNP -> Open_NNP
[string] Open
[tree] NNP(Open)
[ud] "(Open<root> / Open)"
[fourlang] "(Open<root> / Open)"

NNS -> moons_NNS
[string] moons
[tree] NNS(moons)
[ud] "(moons<root> / moons)"
[fourlang] "(moons<root> / moons)"

VBN -> coated_VBN
[string] coated
[tree] VBN(coated)
[ud] "(coated<root> / coated)"
[fourlang] "(coated<root> / coated)"

VBN -> elected_VBN
[string] elected
[tree] VBN(elected)
[ud] "(elected<root> / elected)"
[fourlang] "(elected<root> / elected)"

IN -> Over_IN
[string] Over
[tree] IN(Over)
[ud] "(Over<root> / Over)"
[fourlang] "(Over<root> / Over)"

VBN -> tied_VBN
[string] tied
[tree] VBN(tied)
[ud] "(tied<root> / tied)"
[fourlang] "(tied<root> / tied)"

NN -> rhetoric_NN
[string] rhetoric
[tree] NN(rhetoric)
[ud] "(rhetoric<root> / rhetoric)"
[fourlang] "(rhetoric<root> / rhetoric)"

NNP -> Avenue_NNP
[string] Avenue
[tree] NNP(Avenue)
[ud] "(Avenue<root> / Avenue)"
[fourlang] "(Avenue<root> / Avenue)"

NNP -> Finmeccanica_NNP
[string] Finmeccanica
[tree] NNP(Finmeccanica)
[ud] "(Finmeccanica<root> / Finmeccanica)"
[fourlang] "(Finmeccanica<root> / Finmeccanica)"

NNP -> YMCA_NNP
[string] YMCA
[tree] NNP(YMCA)
[ud] "(YMCA<root> / YMCA)"
[fourlang] "(YMCA<root> / YMCA)"

NNP -> Financial_NNP
[string] Financial
[tree] NNP(Financial)
[ud] "(Financial<root> / Financial)"
[fourlang] "(Financial<root> / Financial)"

NNS -> sparkplugs_NNS
[string] sparkplugs
[tree] NNS(sparkplugs)
[ud] "(sparkplugs<root> / sparkplugs)"
[fourlang] "(sparkplugs<root> / sparkplugs)"

IN -> across_IN
[string] across
[tree] IN(across)
[ud] "(across<root> / across)"
[fourlang] "(across<root> / across)"

NNP -> Syracuse_NNP
[string] Syracuse
[tree] NNP(Syracuse)
[ud] "(Syracuse<root> / Syracuse)"
[fourlang] "(Syracuse<root> / Syracuse)"

NN -> question_NN
[string] question
[tree] NN(question)
[ud] "(question<root> / question)"
[fourlang] "(question<root> / question)"

NNS -> quantities_NNS
[string] quantities
[tree] NNS(quantities)
[ud] "(quantities<root> / quantities)"
[fourlang] "(quantities<root> / quantities)"

NN -> criminal_NN
[string] criminal
[tree] NN(criminal)
[ud] "(criminal<root> / criminal)"
[fourlang] "(criminal<root> / criminal)"

NNP -> MPERIOD_NNP
[string] MPERIOD
[tree] NNP(MPERIOD)
[ud] "(MPERIOD<root> / MPERIOD)"
[fourlang] "(MPERIOD<root> / MPERIOD)"

VBG -> rating_VBG
[string] rating
[tree] VBG(rating)
[ud] "(rating<root> / rating)"
[fourlang] "(rating<root> / rating)"

VBP -> continue_VBP
[string] continue
[tree] VBP(continue)
[ud] "(continue<root> / continue)"
[fourlang] "(continue<root> / continue)"

NNP -> Taipei_NNP
[string] Taipei
[tree] NNP(Taipei)
[ud] "(Taipei<root> / Taipei)"
[fourlang] "(Taipei<root> / Taipei)"

NNP -> Voice_NNP
[string] Voice
[tree] NNP(Voice)
[ud] "(Voice<root> / Voice)"
[fourlang] "(Voice<root> / Voice)"

NN -> furor_NN
[string] furor
[tree] NN(furor)
[ud] "(furor<root> / furor)"
[fourlang] "(furor<root> / furor)"

JJ -> institutional_JJ
[string] institutional
[tree] JJ(institutional)
[ud] "(institutional<root> / institutional)"
[fourlang] "(institutional<root> / institutional)"

NN -> order_NN
[string] order
[tree] NN(order)
[ud] "(order<root> / order)"
[fourlang] "(order<root> / order)"

NNP -> Miami_NNP
[string] Miami
[tree] NNP(Miami)
[ud] "(Miami<root> / Miami)"
[fourlang] "(Miami<root> / Miami)"

NN -> kind_NN
[string] kind
[tree] NN(kind)
[ud] "(kind<root> / kind)"
[fourlang] "(kind<root> / kind)"

NN -> listing_NN
[string] listing
[tree] NN(listing)
[ud] "(listing<root> / listing)"
[fourlang] "(listing<root> / listing)"

NN -> panel_NN
[string] panel
[tree] NN(panel)
[ud] "(panel<root> / panel)"
[fourlang] "(panel<root> / panel)"

JJ -> perHYPHENshare_JJ
[string] perHYPHENshare
[tree] JJ(perHYPHENshare)
[ud] "(perHYPHENshare<root> / perHYPHENshare)"
[fourlang] "(perHYPHENshare<root> / perHYPHENshare)"

VB -> offer_VB
[string] offer
[tree] VB(offer)
[ud] "(offer<root> / offer)"
[fourlang] "(offer<root> / offer)"

NNP -> CoreStates_NNP
[string] CoreStates
[tree] NNP(CoreStates)
[ud] "(CoreStates<root> / CoreStates)"
[fourlang] "(CoreStates<root> / CoreStates)"

NNP -> UPERIODSPERIODA_NNP
[string] UPERIODSPERIODA
[tree] NNP(UPERIODSPERIODA)
[ud] "(UPERIODSPERIODA<root> / UPERIODSPERIODA)"
[fourlang] "(UPERIODSPERIODA<root> / UPERIODSPERIODA)"

NN -> shot_NN
[string] shot
[tree] NN(shot)
[ud] "(shot<root> / shot)"
[fourlang] "(shot<root> / shot)"

_NONE_ -> ASTERISKTASTERISKHYPHENDIGITDIGIT__NONE_
[string] ASTERISKTASTERISKHYPHENDIGITDIGIT
[tree] _NONE_(ASTERISKTASTERISKHYPHENDIGITDIGIT)
[ud] "(ASTERISKTASTERISKHYPHENDIGITDIGIT<root> / ASTERISKTASTERISKHYPHENDIGITDIGIT)"
[fourlang] "(ASTERISKTASTERISKHYPHENDIGITDIGIT<root> / ASTERISKTASTERISKHYPHENDIGITDIGIT)"

NNS -> segments_NNS
[string] segments
[tree] NNS(segments)
[ud] "(segments<root> / segments)"
[fourlang] "(segments<root> / segments)"

JJ -> ReaganHYPHENBush_JJ
[string] ReaganHYPHENBush
[tree] JJ(ReaganHYPHENBush)
[ud] "(ReaganHYPHENBush<root> / ReaganHYPHENBush)"
[fourlang] "(ReaganHYPHENBush<root> / ReaganHYPHENBush)"

VB -> profit_VB
[string] profit
[tree] VB(profit)
[ud] "(profit<root> / profit)"
[fourlang] "(profit<root> / profit)"

NN -> chief_NN
[string] chief
[tree] NN(chief)
[ud] "(chief<root> / chief)"
[fourlang] "(chief<root> / chief)"

NNS -> pickers_NNS
[string] pickers
[tree] NNS(pickers)
[ud] "(pickers<root> / pickers)"
[fourlang] "(pickers<root> / pickers)"

NNP -> High_NNP
[string] High
[tree] NNP(High)
[ud] "(High<root> / High)"
[fourlang] "(High<root> / High)"

NNP -> Byron_NNP
[string] Byron
[tree] NNP(Byron)
[ud] "(Byron<root> / Byron)"
[fourlang] "(Byron<root> / Byron)"

NNP -> Security_NNP
[string] Security
[tree] NNP(Security)
[ud] "(Security<root> / Security)"
[fourlang] "(Security<root> / Security)"

NNS -> Manufacturers_NNS
[string] Manufacturers
[tree] NNS(Manufacturers)
[ud] "(Manufacturers<root> / Manufacturers)"
[fourlang] "(Manufacturers<root> / Manufacturers)"

VBD -> followed_VBD
[string] followed
[tree] VBD(followed)
[ud] "(followed<root> / followed)"
[fourlang] "(followed<root> / followed)"

NNP -> April_NNP
[string] April
[tree] NNP(April)
[ud] "(April<root> / April)"
[fourlang] "(April<root> / April)"

NN -> door_NN
[string] door
[tree] NN(door)
[ud] "(door<root> / door)"
[fourlang] "(door<root> / door)"

NNP -> Taylor_NNP
[string] Taylor
[tree] NNP(Taylor)
[ud] "(Taylor<root> / Taylor)"
[fourlang] "(Taylor<root> / Taylor)"

NN -> club_NN
[string] club
[tree] NN(club)
[ud] "(club<root> / club)"
[fourlang] "(club<root> / club)"

NN -> Merchant_NN
[string] Merchant
[tree] NN(Merchant)
[ud] "(Merchant<root> / Merchant)"
[fourlang] "(Merchant<root> / Merchant)"

NN -> concern_NN
[string] concern
[tree] NN(concern)
[ud] "(concern<root> / concern)"
[fourlang] "(concern<root> / concern)"

NNP -> Mark_NNP
[string] Mark
[tree] NNP(Mark)
[ud] "(Mark<root> / Mark)"
[fourlang] "(Mark<root> / Mark)"

NN -> moratorium_NN
[string] moratorium
[tree] NN(moratorium)
[ud] "(moratorium<root> / moratorium)"
[fourlang] "(moratorium<root> / moratorium)"

JJ -> lineHYPHENitem_JJ
[string] lineHYPHENitem
[tree] JJ(lineHYPHENitem)
[ud] "(lineHYPHENitem<root> / lineHYPHENitem)"
[fourlang] "(lineHYPHENitem<root> / lineHYPHENitem)"

NNS -> calls_NNS
[string] calls
[tree] NNS(calls)
[ud] "(calls<root> / calls)"
[fourlang] "(calls<root> / calls)"

VBN -> led_VBN
[string] led
[tree] VBN(led)
[ud] "(led<root> / led)"
[fourlang] "(led<root> / led)"

RB -> instead_RB
[string] instead
[tree] RB(instead)
[ud] "(instead<root> / instead)"
[fourlang] "(instead<root> / instead)"

NN -> abuse_NN
[string] abuse
[tree] NN(abuse)
[ud] "(abuse<root> / abuse)"
[fourlang] "(abuse<root> / abuse)"

NNP -> Howard_NNP
[string] Howard
[tree] NNP(Howard)
[ud] "(Howard<root> / Howard)"
[fourlang] "(Howard<root> / Howard)"

NN -> snow_NN
[string] snow
[tree] NN(snow)
[ud] "(snow<root> / snow)"
[fourlang] "(snow<root> / snow)"

VB -> Note_VB
[string] Note
[tree] VB(Note)
[ud] "(Note<root> / Note)"
[fourlang] "(Note<root> / Note)"

VBG -> sweeping_VBG
[string] sweeping
[tree] VBG(sweeping)
[ud] "(sweeping<root> / sweeping)"
[fourlang] "(sweeping<root> / sweeping)"

NN -> physics_NN
[string] physics
[tree] NN(physics)
[ud] "(physics<root> / physics)"
[fourlang] "(physics<root> / physics)"

VBG -> wrecking_VBG
[string] wrecking
[tree] VBG(wrecking)
[ud] "(wrecking<root> / wrecking)"
[fourlang] "(wrecking<root> / wrecking)"

NNS -> trains_NNS
[string] trains
[tree] NNS(trains)
[ud] "(trains<root> / trains)"
[fourlang] "(trains<root> / trains)"

MD -> will_MD
[string] will
[tree] MD(will)
[ud] "(will<root> / will)"
[fourlang] "(will<root> / will)"

NNS -> lesions_NNS
[string] lesions
[tree] NNS(lesions)
[ud] "(lesions<root> / lesions)"
[fourlang] "(lesions<root> / lesions)"

VBZ -> changes_VBZ
[string] changes
[tree] VBZ(changes)
[ud] "(changes<root> / changes)"
[fourlang] "(changes<root> / changes)"

RB -> frequently_RB
[string] frequently
[tree] RB(frequently)
[ud] "(frequently<root> / frequently)"
[fourlang] "(frequently<root> / frequently)"

NNP -> Novello_NNP
[string] Novello
[tree] NNP(Novello)
[ud] "(Novello<root> / Novello)"
[fourlang] "(Novello<root> / Novello)"

NN -> act_NN
[string] act
[tree] NN(act)
[ud] "(act<root> / act)"
[fourlang] "(act<root> / act)"

NNP -> Human_NNP
[string] Human
[tree] NNP(Human)
[ud] "(Human<root> / Human)"
[fourlang] "(Human<root> / Human)"

NN -> deadwood_NN
[string] deadwood
[tree] NN(deadwood)
[ud] "(deadwood<root> / deadwood)"
[fourlang] "(deadwood<root> / deadwood)"

NNP -> WorldHYPHENWide_NNP
[string] WorldHYPHENWide
[tree] NNP(WorldHYPHENWide)
[ud] "(WorldHYPHENWide<root> / WorldHYPHENWide)"
[fourlang] "(WorldHYPHENWide<root> / WorldHYPHENWide)"

NNS -> BANKERS_NNS
[string] BANKERS
[tree] NNS(BANKERS)
[ud] "(BANKERS<root> / BANKERS)"
[fourlang] "(BANKERS<root> / BANKERS)"

JJ -> extensive_JJ
[string] extensive
[tree] JJ(extensive)
[ud] "(extensive<root> / extensive)"
[fourlang] "(extensive<root> / extensive)"

NN -> associate_NN
[string] associate
[tree] NN(associate)
[ud] "(associate<root> / associate)"
[fourlang] "(associate<root> / associate)"

NNP -> DISCOUNT_NNP
[string] DISCOUNT
[tree] NNP(DISCOUNT)
[ud] "(DISCOUNT<root> / DISCOUNT)"
[fourlang] "(DISCOUNT<root> / DISCOUNT)"

NNP -> Lorillard_NNP
[string] Lorillard
[tree] NNP(Lorillard)
[ud] "(Lorillard<root> / Lorillard)"
[fourlang] "(Lorillard<root> / Lorillard)"

RB -> too_RB
[string] too
[tree] RB(too)
[ud] "(too<root> / too)"
[fourlang] "(too<root> / too)"

VBG -> offsetting_VBG
[string] offsetting
[tree] VBG(offsetting)
[ud] "(offsetting<root> / offsetting)"
[fourlang] "(offsetting<root> / offsetting)"

NNS -> forms_NNS
[string] forms
[tree] NNS(forms)
[ud] "(forms<root> / forms)"
[fourlang] "(forms<root> / forms)"

JJ -> New_JJ
[string] New
[tree] JJ(New)
[ud] "(New<root> / New)"
[fourlang] "(New<root> / New)"

NN -> priority_NN
[string] priority
[tree] NN(priority)
[ud] "(priority<root> / priority)"
[fourlang] "(priority<root> / priority)"

WP -> whom_WP
[string] whom
[tree] WP(whom)
[ud] "(whom<root> / whom)"
[fourlang] "(whom<root> / whom)"

NN -> laborHYPHENmanagement_NN
[string] laborHYPHENmanagement
[tree] NN(laborHYPHENmanagement)
[ud] "(laborHYPHENmanagement<root> / laborHYPHENmanagement)"
[fourlang] "(laborHYPHENmanagement<root> / laborHYPHENmanagement)"

NNP -> Pacific_NNP
[string] Pacific
[tree] NNP(Pacific)
[ud] "(Pacific<root> / Pacific)"
[fourlang] "(Pacific<root> / Pacific)"

NN -> petition_NN
[string] petition
[tree] NN(petition)
[ud] "(petition<root> / petition)"
[fourlang] "(petition<root> / petition)"

NN -> sphere_NN
[string] sphere
[tree] NN(sphere)
[ud] "(sphere<root> / sphere)"
[fourlang] "(sphere<root> / sphere)"

NN -> pretax_NN
[string] pretax
[tree] NN(pretax)
[ud] "(pretax<root> / pretax)"
[fourlang] "(pretax<root> / pretax)"

JJ -> embarrassing_JJ
[string] embarrassing
[tree] JJ(embarrassing)
[ud] "(embarrassing<root> / embarrassing)"
[fourlang] "(embarrassing<root> / embarrassing)"

VBN -> held_VBN
[string] held
[tree] VBN(held)
[ud] "(held<root> / held)"
[fourlang] "(held<root> / held)"

NN -> context_NN
[string] context
[tree] NN(context)
[ud] "(context<root> / context)"
[fourlang] "(context<root> / context)"

NNP -> Mickey_NNP
[string] Mickey
[tree] NNP(Mickey)
[ud] "(Mickey<root> / Mickey)"
[fourlang] "(Mickey<root> / Mickey)"

NNS -> Commodities_NNS
[string] Commodities
[tree] NNS(Commodities)
[ud] "(Commodities<root> / Commodities)"
[fourlang] "(Commodities<root> / Commodities)"

JJ -> unstinting_JJ
[string] unstinting
[tree] JJ(unstinting)
[ud] "(unstinting<root> / unstinting)"
[fourlang] "(unstinting<root> / unstinting)"

JJ -> important_JJ
[string] important
[tree] JJ(important)
[ud] "(important<root> / important)"
[fourlang] "(important<root> / important)"

VB -> use_VB
[string] use
[tree] VB(use)
[ud] "(use<root> / use)"
[fourlang] "(use<root> / use)"

NN -> standpoint_NN
[string] standpoint
[tree] NN(standpoint)
[ud] "(standpoint<root> / standpoint)"
[fourlang] "(standpoint<root> / standpoint)"

JJ -> multilevel_JJ
[string] multilevel
[tree] JJ(multilevel)
[ud] "(multilevel<root> / multilevel)"
[fourlang] "(multilevel<root> / multilevel)"

NNP -> Asher_NNP
[string] Asher
[tree] NNP(Asher)
[ud] "(Asher<root> / Asher)"
[fourlang] "(Asher<root> / Asher)"

NNS -> records_NNS
[string] records
[tree] NNS(records)
[ud] "(records<root> / records)"
[fourlang] "(records<root> / records)"

NNP -> Jones_NNP
[string] Jones
[tree] NNP(Jones)
[ud] "(Jones<root> / Jones)"
[fourlang] "(Jones<root> / Jones)"

NNS -> users_NNS
[string] users
[tree] NNS(users)
[ud] "(users<root> / users)"
[fourlang] "(users<root> / users)"

NN -> centennial_NN
[string] centennial
[tree] NN(centennial)
[ud] "(centennial<root> / centennial)"
[fourlang] "(centennial<root> / centennial)"

NN -> assault_NN
[string] assault
[tree] NN(assault)
[ud] "(assault<root> / assault)"
[fourlang] "(assault<root> / assault)"

NN -> Uncertainty_NN
[string] Uncertainty
[tree] NN(Uncertainty)
[ud] "(Uncertainty<root> / Uncertainty)"
[fourlang] "(Uncertainty<root> / Uncertainty)"

JJ -> startling_JJ
[string] startling
[tree] JJ(startling)
[ud] "(startling<root> / startling)"
[fourlang] "(startling<root> / startling)"

JJ -> huge_JJ
[string] huge
[tree] JJ(huge)
[ud] "(huge<root> / huge)"
[fourlang] "(huge<root> / huge)"

NNS -> reservations_NNS
[string] reservations
[tree] NNS(reservations)
[ud] "(reservations<root> / reservations)"
[fourlang] "(reservations<root> / reservations)"

NNP -> Danforth_NNP
[string] Danforth
[tree] NNP(Danforth)
[ud] "(Danforth<root> / Danforth)"
[fourlang] "(Danforth<root> / Danforth)"

VBG -> receiving_VBG
[string] receiving
[tree] VBG(receiving)
[ud] "(receiving<root> / receiving)"
[fourlang] "(receiving<root> / receiving)"

NN -> collateral_NN
[string] collateral
[tree] NN(collateral)
[ud] "(collateral<root> / collateral)"
[fourlang] "(collateral<root> / collateral)"

NN -> milk_NN
[string] milk
[tree] NN(milk)
[ud] "(milk<root> / milk)"
[fourlang] "(milk<root> / milk)"

JJ -> Small_JJ
[string] Small
[tree] JJ(Small)
[ud] "(Small<root> / Small)"
[fourlang] "(Small<root> / Small)"

VBP -> contain_VBP
[string] contain
[tree] VBP(contain)
[ud] "(contain<root> / contain)"
[fourlang] "(contain<root> / contain)"

NN -> cause_NN
[string] cause
[tree] NN(cause)
[ud] "(cause<root> / cause)"
[fourlang] "(cause<root> / cause)"

NN -> deck_NN
[string] deck
[tree] NN(deck)
[ud] "(deck<root> / deck)"
[fourlang] "(deck<root> / deck)"

NN -> nation_NN
[string] nation
[tree] NN(nation)
[ud] "(nation<root> / nation)"
[fourlang] "(nation<root> / nation)"

NN -> motor_NN
[string] motor
[tree] NN(motor)
[ud] "(motor<root> / motor)"
[fourlang] "(motor<root> / motor)"

PUNCT -> COMMA_PUNCT
[string] COMMA
[tree] PUNCT(COMMA)
[ud] "(COMMA<root> / COMMA)"
[fourlang] "(COMMA<root> / COMMA)"

RB -> presumably_RB
[string] presumably
[tree] RB(presumably)
[ud] "(presumably<root> / presumably)"
[fourlang] "(presumably<root> / presumably)"

NN -> switch_NN
[string] switch
[tree] NN(switch)
[ud] "(switch<root> / switch)"
[fourlang] "(switch<root> / switch)"

NNS -> CPERIODDPERIODs_NNS
[string] CPERIODDPERIODs
[tree] NNS(CPERIODDPERIODs)
[ud] "(CPERIODDPERIODs<root> / CPERIODDPERIODs)"
[fourlang] "(CPERIODDPERIODs<root> / CPERIODDPERIODs)"

JJ -> oldHYPHENtime_JJ
[string] oldHYPHENtime
[tree] JJ(oldHYPHENtime)
[ud] "(oldHYPHENtime<root> / oldHYPHENtime)"
[fourlang] "(oldHYPHENtime<root> / oldHYPHENtime)"

NN -> operator_NN
[string] operator
[tree] NN(operator)
[ud] "(operator<root> / operator)"
[fourlang] "(operator<root> / operator)"

NNP -> Congressman_NNP
[string] Congressman
[tree] NNP(Congressman)
[ud] "(Congressman<root> / Congressman)"
[fourlang] "(Congressman<root> / Congressman)"

JJ -> early_JJ
[string] early
[tree] JJ(early)
[ud] "(early<root> / early)"
[fourlang] "(early<root> / early)"

NN -> trader_NN
[string] trader
[tree] NN(trader)
[ud] "(trader<root> / trader)"
[fourlang] "(trader<root> / trader)"

NNS -> trends_NNS
[string] trends
[tree] NNS(trends)
[ud] "(trends<root> / trends)"
[fourlang] "(trends<root> / trends)"

NNP -> Pittsburgh_NNP
[string] Pittsburgh
[tree] NNP(Pittsburgh)
[ud] "(Pittsburgh<root> / Pittsburgh)"
[fourlang] "(Pittsburgh<root> / Pittsburgh)"

NN -> playing_NN
[string] playing
[tree] NN(playing)
[ud] "(playing<root> / playing)"
[fourlang] "(playing<root> / playing)"

VBP -> deliver_VBP
[string] deliver
[tree] VBP(deliver)
[ud] "(deliver<root> / deliver)"
[fourlang] "(deliver<root> / deliver)"

NNS -> Billings_NNS
[string] Billings
[tree] NNS(Billings)
[ud] "(Billings<root> / Billings)"
[fourlang] "(Billings<root> / Billings)"

NNS -> pains_NNS
[string] pains
[tree] NNS(pains)
[ud] "(pains<root> / pains)"
[fourlang] "(pains<root> / pains)"

VBN -> prolonged_VBN
[string] prolonged
[tree] VBN(prolonged)
[ud] "(prolonged<root> / prolonged)"
[fourlang] "(prolonged<root> / prolonged)"

NNS -> sources_NNS
[string] sources
[tree] NNS(sources)
[ud] "(sources<root> / sources)"
[fourlang] "(sources<root> / sources)"

NNP -> Improvement_NNP
[string] Improvement
[tree] NNP(Improvement)
[ud] "(Improvement<root> / Improvement)"
[fourlang] "(Improvement<root> / Improvement)"

JJ -> yearHYPHENearlier_JJ
[string] yearHYPHENearlier
[tree] JJ(yearHYPHENearlier)
[ud] "(yearHYPHENearlier<root> / yearHYPHENearlier)"
[fourlang] "(yearHYPHENearlier<root> / yearHYPHENearlier)"

NN -> publisher_NN
[string] publisher
[tree] NN(publisher)
[ud] "(publisher<root> / publisher)"
[fourlang] "(publisher<root> / publisher)"

NNS -> necks_NNS
[string] necks
[tree] NNS(necks)
[ud] "(necks<root> / necks)"
[fourlang] "(necks<root> / necks)"

JJ -> net_JJ
[string] net
[tree] JJ(net)
[ud] "(net<root> / net)"
[fourlang] "(net<root> / net)"

NN -> ballpark_NN
[string] ballpark
[tree] NN(ballpark)
[ud] "(ballpark<root> / ballpark)"
[fourlang] "(ballpark<root> / ballpark)"

NN -> finance_NN
[string] finance
[tree] NN(finance)
[ud] "(finance<root> / finance)"
[fourlang] "(finance<root> / finance)"

NNP -> Scoring_NNP
[string] Scoring
[tree] NNP(Scoring)
[ud] "(Scoring<root> / Scoring)"
[fourlang] "(Scoring<root> / Scoring)"

NNP -> Smith_NNP
[string] Smith
[tree] NNP(Smith)
[ud] "(Smith<root> / Smith)"
[fourlang] "(Smith<root> / Smith)"

VBN -> colored_VBN
[string] colored
[tree] VBN(colored)
[ud] "(colored<root> / colored)"
[fourlang] "(colored<root> / colored)"

NN -> option_NN
[string] option
[tree] NN(option)
[ud] "(option<root> / option)"
[fourlang] "(option<root> / option)"

VB -> settle_VB
[string] settle
[tree] VB(settle)
[ud] "(settle<root> / settle)"
[fourlang] "(settle<root> / settle)"

NN -> completion_NN
[string] completion
[tree] NN(completion)
[ud] "(completion<root> / completion)"
[fourlang] "(completion<root> / completion)"

NN -> transaction_NN
[string] transaction
[tree] NN(transaction)
[ud] "(transaction<root> / transaction)"
[fourlang] "(transaction<root> / transaction)"

NNS -> conditions_NNS
[string] conditions
[tree] NNS(conditions)
[ud] "(conditions<root> / conditions)"
[fourlang] "(conditions<root> / conditions)"

NN -> yearHYPHENend_NN
[string] yearHYPHENend
[tree] NN(yearHYPHENend)
[ud] "(yearHYPHENend<root> / yearHYPHENend)"
[fourlang] "(yearHYPHENend<root> / yearHYPHENend)"

JJ -> eightHYPHENcount_JJ
[string] eightHYPHENcount
[tree] JJ(eightHYPHENcount)
[ud] "(eightHYPHENcount<root> / eightHYPHENcount)"
[fourlang] "(eightHYPHENcount<root> / eightHYPHENcount)"

VBN -> Estimated_VBN
[string] Estimated
[tree] VBN(Estimated)
[ud] "(Estimated<root> / Estimated)"
[fourlang] "(Estimated<root> / Estimated)"

NN -> instance_NN
[string] instance
[tree] NN(instance)
[ud] "(instance<root> / instance)"
[fourlang] "(instance<root> / instance)"

NN -> move_NN
[string] move
[tree] NN(move)
[ud] "(move<root> / move)"
[fourlang] "(move<root> / move)"

NNS -> crises_NNS
[string] crises
[tree] NNS(crises)
[ud] "(crises<root> / crises)"
[fourlang] "(crises<root> / crises)"

NN -> period_NN
[string] period
[tree] NN(period)
[ud] "(period<root> / period)"
[fourlang] "(period<root> / period)"

VBP -> refuse_VBP
[string] refuse
[tree] VBP(refuse)
[ud] "(refuse<root> / refuse)"
[fourlang] "(refuse<root> / refuse)"

NNP -> Marvin_NNP
[string] Marvin
[tree] NNP(Marvin)
[ud] "(Marvin<root> / Marvin)"
[fourlang] "(Marvin<root> / Marvin)"

JJ -> fourth_JJ
[string] fourth
[tree] JJ(fourth)
[ud] "(fourth<root> / fourth)"
[fourlang] "(fourth<root> / fourth)"

_NONE_ -> ASTERISK__NONE_
[string] ASTERISK
[tree] _NONE_(ASTERISK)
[ud] "(ASTERISK<root> / ASTERISK)"
[fourlang] "(ASTERISK<root> / ASTERISK)"

NN -> worry_NN
[string] worry
[tree] NN(worry)
[ud] "(worry<root> / worry)"
[fourlang] "(worry<root> / worry)"

DT -> neither_DT
[string] neither
[tree] DT(neither)
[ud] "(neither<root> / neither)"
[fourlang] "(neither<root> / neither)"

NN -> flag_NN
[string] flag
[tree] NN(flag)
[ud] "(flag<root> / flag)"
[fourlang] "(flag<root> / flag)"

JJ -> mergerHYPHENrelated_JJ
[string] mergerHYPHENrelated
[tree] JJ(mergerHYPHENrelated)
[ud] "(mergerHYPHENrelated<root> / mergerHYPHENrelated)"
[fourlang] "(mergerHYPHENrelated<root> / mergerHYPHENrelated)"

NNP -> Hiroshi_NNP
[string] Hiroshi
[tree] NNP(Hiroshi)
[ud] "(Hiroshi<root> / Hiroshi)"
[fourlang] "(Hiroshi<root> / Hiroshi)"

NN -> designer_NN
[string] designer
[tree] NN(designer)
[ud] "(designer<root> / designer)"
[fourlang] "(designer<root> / designer)"

NN -> Demand_NN
[string] Demand
[tree] NN(Demand)
[ud] "(Demand<root> / Demand)"
[fourlang] "(Demand<root> / Demand)"

NNP -> Gray_NNP
[string] Gray
[tree] NNP(Gray)
[ud] "(Gray<root> / Gray)"
[fourlang] "(Gray<root> / Gray)"

JJ -> undisclosed_JJ
[string] undisclosed
[tree] JJ(undisclosed)
[ud] "(undisclosed<root> / undisclosed)"
[fourlang] "(undisclosed<root> / undisclosed)"

NN -> trial_NN
[string] trial
[tree] NN(trial)
[ud] "(trial<root> / trial)"
[fourlang] "(trial<root> / trial)"

NNS -> warrants_NNS
[string] warrants
[tree] NNS(warrants)
[ud] "(warrants<root> / warrants)"
[fourlang] "(warrants<root> / warrants)"

NN -> steel_NN
[string] steel
[tree] NN(steel)
[ud] "(steel<root> / steel)"
[fourlang] "(steel<root> / steel)"

NN -> attempt_NN
[string] attempt
[tree] NN(attempt)
[ud] "(attempt<root> / attempt)"
[fourlang] "(attempt<root> / attempt)"

NNP -> Egypt_NNP
[string] Egypt
[tree] NNP(Egypt)
[ud] "(Egypt<root> / Egypt)"
[fourlang] "(Egypt<root> / Egypt)"

NN -> analyst_NN
[string] analyst
[tree] NN(analyst)
[ud] "(analyst<root> / analyst)"
[fourlang] "(analyst<root> / analyst)"

VBN -> found_VBN
[string] found
[tree] VBN(found)
[ud] "(found<root> / found)"
[fourlang] "(found<root> / found)"

NNP -> Reliance_NNP
[string] Reliance
[tree] NNP(Reliance)
[ud] "(Reliance<root> / Reliance)"
[fourlang] "(Reliance<root> / Reliance)"

JJ -> Common_JJ
[string] Common
[tree] JJ(Common)
[ud] "(Common<root> / Common)"
[fourlang] "(Common<root> / Common)"

JJS -> newest_JJS
[string] newest
[tree] JJS(newest)
[ud] "(newest<root> / newest)"
[fourlang] "(newest<root> / newest)"

NNP -> Hymowitz_NNP
[string] Hymowitz
[tree] NNP(Hymowitz)
[ud] "(Hymowitz<root> / Hymowitz)"
[fourlang] "(Hymowitz<root> / Hymowitz)"

NNP -> USA_NNP
[string] USA
[tree] NNP(USA)
[ud] "(USA<root> / USA)"
[fourlang] "(USA<root> / USA)"

NNP -> Dinkins_NNP
[string] Dinkins
[tree] NNP(Dinkins)
[ud] "(Dinkins<root> / Dinkins)"
[fourlang] "(Dinkins<root> / Dinkins)"

NNP -> Wolf_NNP
[string] Wolf
[tree] NNP(Wolf)
[ud] "(Wolf<root> / Wolf)"
[fourlang] "(Wolf<root> / Wolf)"

NNP -> William_NNP
[string] William
[tree] NNP(William)
[ud] "(William<root> / William)"
[fourlang] "(William<root> / William)"

JJ -> howHYPHENto_JJ
[string] howHYPHENto
[tree] JJ(howHYPHENto)
[ud] "(howHYPHENto<root> / howHYPHENto)"
[fourlang] "(howHYPHENto<root> / howHYPHENto)"

NNP -> CSV_NNP
[string] CSV
[tree] NNP(CSV)
[ud] "(CSV<root> / CSV)"
[fourlang] "(CSV<root> / CSV)"

NN -> swing_NN
[string] swing
[tree] NN(swing)
[ud] "(swing<root> / swing)"
[fourlang] "(swing<root> / swing)"

NNP -> Wednesday_NNP
[string] Wednesday
[tree] NNP(Wednesday)
[ud] "(Wednesday<root> / Wednesday)"
[fourlang] "(Wednesday<root> / Wednesday)"

NN -> auto_NN
[string] auto
[tree] NN(auto)
[ud] "(auto<root> / auto)"
[fourlang] "(auto<root> / auto)"

NNP -> Tailors_NNP
[string] Tailors
[tree] NNP(Tailors)
[ud] "(Tailors<root> / Tailors)"
[fourlang] "(Tailors<root> / Tailors)"

NN -> lieu_NN
[string] lieu
[tree] NN(lieu)
[ud] "(lieu<root> / lieu)"
[fourlang] "(lieu<root> / lieu)"

RB -> first_RB
[string] first
[tree] RB(first)
[ud] "(first<root> / first)"
[fourlang] "(first<root> / first)"

NNS -> pharmaceuticals_NNS
[string] pharmaceuticals
[tree] NNS(pharmaceuticals)
[ud] "(pharmaceuticals<root> / pharmaceuticals)"
[fourlang] "(pharmaceuticals<root> / pharmaceuticals)"

NN -> ancestry_NN
[string] ancestry
[tree] NN(ancestry)
[ud] "(ancestry<root> / ancestry)"
[fourlang] "(ancestry<root> / ancestry)"

NNP -> Faulding_NNP
[string] Faulding
[tree] NNP(Faulding)
[ud] "(Faulding<root> / Faulding)"
[fourlang] "(Faulding<root> / Faulding)"

JJ -> underprivileged_JJ
[string] underprivileged
[tree] JJ(underprivileged)
[ud] "(underprivileged<root> / underprivileged)"
[fourlang] "(underprivileged<root> / underprivileged)"

NN -> friction_NN
[string] friction
[tree] NN(friction)
[ud] "(friction<root> / friction)"
[fourlang] "(friction<root> / friction)"

JJ -> key_JJ
[string] key
[tree] JJ(key)
[ud] "(key<root> / key)"
[fourlang] "(key<root> / key)"

NN -> enforcement_NN
[string] enforcement
[tree] NN(enforcement)
[ud] "(enforcement<root> / enforcement)"
[fourlang] "(enforcement<root> / enforcement)"

NNP -> Hayes_NNP
[string] Hayes
[tree] NNP(Hayes)
[ud] "(Hayes<root> / Hayes)"
[fourlang] "(Hayes<root> / Hayes)"

RB -> alone_RB
[string] alone
[tree] RB(alone)
[ud] "(alone<root> / alone)"
[fourlang] "(alone<root> / alone)"

NNS -> researchers_NNS
[string] researchers
[tree] NNS(researchers)
[ud] "(researchers<root> / researchers)"
[fourlang] "(researchers<root> / researchers)"

CD -> Five_CD
[string] Five
[tree] CD(Five)
[ud] "(Five<root> / Five)"
[fourlang] "(Five<root> / Five)"

NNP -> Davis_NNP
[string] Davis
[tree] NNP(Davis)
[ud] "(Davis<root> / Davis)"
[fourlang] "(Davis<root> / Davis)"

NNS -> initiatives_NNS
[string] initiatives
[tree] NNS(initiatives)
[ud] "(initiatives<root> / initiatives)"
[fourlang] "(initiatives<root> / initiatives)"

VBN -> disputed_VBN
[string] disputed
[tree] VBN(disputed)
[ud] "(disputed<root> / disputed)"
[fourlang] "(disputed<root> / disputed)"

NN -> pall_NN
[string] pall
[tree] NN(pall)
[ud] "(pall<root> / pall)"
[fourlang] "(pall<root> / pall)"

PUNCT -> IQIQ_PUNCT
[string] IQIQ
[tree] PUNCT(IQIQ)
[ud] "(IQIQ<root> / IQIQ)"
[fourlang] "(IQIQ<root> / IQIQ)"

NNP -> Richmond_NNP
[string] Richmond
[tree] NNP(Richmond)
[ud] "(Richmond<root> / Richmond)"
[fourlang] "(Richmond<root> / Richmond)"

NNP -> Bradley_NNP
[string] Bradley
[tree] NNP(Bradley)
[ud] "(Bradley<root> / Bradley)"
[fourlang] "(Bradley<root> / Bradley)"

NNP -> Landor_NNP
[string] Landor
[tree] NNP(Landor)
[ud] "(Landor<root> / Landor)"
[fourlang] "(Landor<root> / Landor)"

NNP -> IRS_NNP
[string] IRS
[tree] NNP(IRS)
[ud] "(IRS<root> / IRS)"
[fourlang] "(IRS<root> / IRS)"

VBD -> gave_VBD
[string] gave
[tree] VBD(gave)
[ud] "(gave<root> / gave)"
[fourlang] "(gave<root> / gave)"

NN -> tariff_NN
[string] tariff
[tree] NN(tariff)
[ud] "(tariff<root> / tariff)"
[fourlang] "(tariff<root> / tariff)"

JJ -> Other_JJ
[string] Other
[tree] JJ(Other)
[ud] "(Other<root> / Other)"
[fourlang] "(Other<root> / Other)"

RB -> abroad_RB
[string] abroad
[tree] RB(abroad)
[ud] "(abroad<root> / abroad)"
[fourlang] "(abroad<root> / abroad)"

NNP -> Kong_NNP
[string] Kong
[tree] NNP(Kong)
[ud] "(Kong<root> / Kong)"
[fourlang] "(Kong<root> / Kong)"

PUNCT -> Wa_PUNCT
[string] Wa
[tree] PUNCT(Wa)
[ud] "(Wa<root> / Wa)"
[fourlang] "(Wa<root> / Wa)"

NNP -> Spain_NNP
[string] Spain
[tree] NNP(Spain)
[ud] "(Spain<root> / Spain)"
[fourlang] "(Spain<root> / Spain)"

NNS -> examinations_NNS
[string] examinations
[tree] NNS(examinations)
[ud] "(examinations<root> / examinations)"
[fourlang] "(examinations<root> / examinations)"

JJ -> legal_JJ
[string] legal
[tree] JJ(legal)
[ud] "(legal<root> / legal)"
[fourlang] "(legal<root> / legal)"

NNP -> Bradford_NNP
[string] Bradford
[tree] NNP(Bradford)
[ud] "(Bradford<root> / Bradford)"
[fourlang] "(Bradford<root> / Bradford)"

NNP -> DPERIOD_NNP
[string] DPERIOD
[tree] NNP(DPERIOD)
[ud] "(DPERIOD<root> / DPERIOD)"
[fourlang] "(DPERIOD<root> / DPERIOD)"

NNS -> tickets_NNS
[string] tickets
[tree] NNS(tickets)
[ud] "(tickets<root> / tickets)"
[fourlang] "(tickets<root> / tickets)"

NNS -> topics_NNS
[string] topics
[tree] NNS(topics)
[ud] "(topics<root> / topics)"
[fourlang] "(topics<root> / topics)"

NNP -> Napolitan_NNP
[string] Napolitan
[tree] NNP(Napolitan)
[ud] "(Napolitan<root> / Napolitan)"
[fourlang] "(Napolitan<root> / Napolitan)"

NN -> nature_NN
[string] nature
[tree] NN(nature)
[ud] "(nature<root> / nature)"
[fourlang] "(nature<root> / nature)"

NNP -> Pate_NNP
[string] Pate
[tree] NNP(Pate)
[ud] "(Pate<root> / Pate)"
[fourlang] "(Pate<root> / Pate)"

JJ -> rival_JJ
[string] rival
[tree] JJ(rival)
[ud] "(rival<root> / rival)"
[fourlang] "(rival<root> / rival)"

JJ -> initial_JJ
[string] initial
[tree] JJ(initial)
[ud] "(initial<root> / initial)"
[fourlang] "(initial<root> / initial)"

NNS -> cases_NNS
[string] cases
[tree] NNS(cases)
[ud] "(cases<root> / cases)"
[fourlang] "(cases<root> / cases)"

VB -> execute_VB
[string] execute
[tree] VB(execute)
[ud] "(execute<root> / execute)"
[fourlang] "(execute<root> / execute)"

JJ -> social_JJ
[string] social
[tree] JJ(social)
[ud] "(social<root> / social)"
[fourlang] "(social<root> / social)"

NNP -> Edison_NNP
[string] Edison
[tree] NNP(Edison)
[ud] "(Edison<root> / Edison)"
[fourlang] "(Edison<root> / Edison)"

VBZ -> sells_VBZ
[string] sells
[tree] VBZ(sells)
[ud] "(sells<root> / sells)"
[fourlang] "(sells<root> / sells)"

JJ -> bandHYPHENwagon_JJ
[string] bandHYPHENwagon
[tree] JJ(bandHYPHENwagon)
[ud] "(bandHYPHENwagon<root> / bandHYPHENwagon)"
[fourlang] "(bandHYPHENwagon<root> / bandHYPHENwagon)"

NNS -> inefficiencies_NNS
[string] inefficiencies
[tree] NNS(inefficiencies)
[ud] "(inefficiencies<root> / inefficiencies)"
[fourlang] "(inefficiencies<root> / inefficiencies)"

NNP -> Mac_NNP
[string] Mac
[tree] NNP(Mac)
[ud] "(Mac<root> / Mac)"
[fourlang] "(Mac<root> / Mac)"

NNS -> wings_NNS
[string] wings
[tree] NNS(wings)
[ud] "(wings<root> / wings)"
[fourlang] "(wings<root> / wings)"

JJ -> TexasHYPHENbased_JJ
[string] TexasHYPHENbased
[tree] JJ(TexasHYPHENbased)
[ud] "(TexasHYPHENbased<root> / TexasHYPHENbased)"
[fourlang] "(TexasHYPHENbased<root> / TexasHYPHENbased)"

NN -> deprivation_NN
[string] deprivation
[tree] NN(deprivation)
[ud] "(deprivation<root> / deprivation)"
[fourlang] "(deprivation<root> / deprivation)"

NN -> burden_NN
[string] burden
[tree] NN(burden)
[ud] "(burden<root> / burden)"
[fourlang] "(burden<root> / burden)"

IN -> without_IN
[string] without
[tree] IN(without)
[ud] "(without<root> / without)"
[fourlang] "(without<root> / without)"

NNP -> Yamamoto_NNP
[string] Yamamoto
[tree] NNP(Yamamoto)
[ud] "(Yamamoto<root> / Yamamoto)"
[fourlang] "(Yamamoto<root> / Yamamoto)"

NNS -> valuations_NNS
[string] valuations
[tree] NNS(valuations)
[ud] "(valuations<root> / valuations)"
[fourlang] "(valuations<root> / valuations)"

NNP -> Weil_NNP
[string] Weil
[tree] NNP(Weil)
[ud] "(Weil<root> / Weil)"
[fourlang] "(Weil<root> / Weil)"

NN -> extent_NN
[string] extent
[tree] NN(extent)
[ud] "(extent<root> / extent)"
[fourlang] "(extent<root> / extent)"

DT -> Those_DT
[string] Those
[tree] DT(Those)
[ud] "(Those<root> / Those)"
[fourlang] "(Those<root> / Those)"

JJ -> intellectualHYPHENproperty_JJ
[string] intellectualHYPHENproperty
[tree] JJ(intellectualHYPHENproperty)
[ud] "(intellectualHYPHENproperty<root> / intellectualHYPHENproperty)"
[fourlang] "(intellectualHYPHENproperty<root> / intellectualHYPHENproperty)"

JJ -> wheelHYPHENloader_JJ
[string] wheelHYPHENloader
[tree] JJ(wheelHYPHENloader)
[ud] "(wheelHYPHENloader<root> / wheelHYPHENloader)"
[fourlang] "(wheelHYPHENloader<root> / wheelHYPHENloader)"

NN -> tree_NN
[string] tree
[tree] NN(tree)
[ud] "(tree<root> / tree)"
[fourlang] "(tree<root> / tree)"

NN -> truce_NN
[string] truce
[tree] NN(truce)
[ud] "(truce<root> / truce)"
[fourlang] "(truce<root> / truce)"

VBD -> ended_VBD
[string] ended
[tree] VBD(ended)
[ud] "(ended<root> / ended)"
[fourlang] "(ended<root> / ended)"

NN -> book_NN
[string] book
[tree] NN(book)
[ud] "(book<root> / book)"
[fourlang] "(book<root> / book)"

CD -> DIGITDIGITBSLPERDIGITDIGIT_CD
[string] DIGITDIGITBSLPERDIGITDIGIT
[tree] CD(DIGITDIGITBSLPERDIGITDIGIT)
[ud] "(DIGITDIGITBSLPERDIGITDIGIT<root> / DIGITDIGITBSLPERDIGITDIGIT)"
[fourlang] "(DIGITDIGITBSLPERDIGITDIGIT<root> / DIGITDIGITBSLPERDIGITDIGIT)"

NN -> pricing_NN
[string] pricing
[tree] NN(pricing)
[ud] "(pricing<root> / pricing)"
[fourlang] "(pricing<root> / pricing)"

NN -> procedure_NN
[string] procedure
[tree] NN(procedure)
[ud] "(procedure<root> / procedure)"
[fourlang] "(procedure<root> / procedure)"

NNP -> Lilly_NNP
[string] Lilly
[tree] NNP(Lilly)
[ud] "(Lilly<root> / Lilly)"
[fourlang] "(Lilly<root> / Lilly)"

IN -> per_IN
[string] per
[tree] IN(per)
[ud] "(per<root> / per)"
[fourlang] "(per<root> / per)"

NNS -> models_NNS
[string] models
[tree] NNS(models)
[ud] "(models<root> / models)"
[fourlang] "(models<root> / models)"

RB -> historically_RB
[string] historically
[tree] RB(historically)
[ud] "(historically<root> / historically)"
[fourlang] "(historically<root> / historically)"

NN -> close_NN
[string] close
[tree] NN(close)
[ud] "(close<root> / close)"
[fourlang] "(close<root> / close)"

DT -> this_DT
[string] this
[tree] DT(this)
[ud] "(this<root> / this)"
[fourlang] "(this<root> / this)"

NN -> amortization_NN
[string] amortization
[tree] NN(amortization)
[ud] "(amortization<root> / amortization)"
[fourlang] "(amortization<root> / amortization)"

JJ -> Many_JJ
[string] Many
[tree] JJ(Many)
[ud] "(Many<root> / Many)"
[fourlang] "(Many<root> / Many)"

VBD -> attempted_VBD
[string] attempted
[tree] VBD(attempted)
[ud] "(attempted<root> / attempted)"
[fourlang] "(attempted<root> / attempted)"

NNS -> Reserves_NNS
[string] Reserves
[tree] NNS(Reserves)
[ud] "(Reserves<root> / Reserves)"
[fourlang] "(Reserves<root> / Reserves)"

NN -> activity_NN
[string] activity
[tree] NN(activity)
[ud] "(activity<root> / activity)"
[fourlang] "(activity<root> / activity)"

VBD -> stemmed_VBD
[string] stemmed
[tree] VBD(stemmed)
[ud] "(stemmed<root> / stemmed)"
[fourlang] "(stemmed<root> / stemmed)"

JJ -> Russian_JJ
[string] Russian
[tree] JJ(Russian)
[ud] "(Russian<root> / Russian)"
[fourlang] "(Russian<root> / Russian)"

NNP -> Griffin_NNP
[string] Griffin
[tree] NNP(Griffin)
[ud] "(Griffin<root> / Griffin)"
[fourlang] "(Griffin<root> / Griffin)"

VB -> perform_VB
[string] perform
[tree] VB(perform)
[ud] "(perform<root> / perform)"
[fourlang] "(perform<root> / perform)"

VB -> get_VB
[string] get
[tree] VB(get)
[ud] "(get<root> / get)"
[fourlang] "(get<root> / get)"

NN -> access_NN
[string] access
[tree] NN(access)
[ud] "(access<root> / access)"
[fourlang] "(access<root> / access)"

NNP -> Mercury_NNP
[string] Mercury
[tree] NNP(Mercury)
[ud] "(Mercury<root> / Mercury)"
[fourlang] "(Mercury<root> / Mercury)"

NN -> exception_NN
[string] exception
[tree] NN(exception)
[ud] "(exception<root> / exception)"
[fourlang] "(exception<root> / exception)"

NN -> television_NN
[string] television
[tree] NN(television)
[ud] "(television<root> / television)"
[fourlang] "(television<root> / television)"

JJ -> nice_JJ
[string] nice
[tree] JJ(nice)
[ud] "(nice<root> / nice)"
[fourlang] "(nice<root> / nice)"

POS -> SQs_POS
[string] SQs
[tree] POS(SQs)
[ud] "(SQs<root> / SQs)"
[fourlang] "(SQs<root> / SQs)"

NNP -> Berliner_NNP
[string] Berliner
[tree] NNP(Berliner)
[ud] "(Berliner<root> / Berliner)"
[fourlang] "(Berliner<root> / Berliner)"

NNS -> manufacturers_NNS
[string] manufacturers
[tree] NNS(manufacturers)
[ud] "(manufacturers<root> / manufacturers)"
[fourlang] "(manufacturers<root> / manufacturers)"

NNP -> Neuberger_NNP
[string] Neuberger
[tree] NNP(Neuberger)
[ud] "(Neuberger<root> / Neuberger)"
[fourlang] "(Neuberger<root> / Neuberger)"

NN -> week_NN
[string] week
[tree] NN(week)
[ud] "(week<root> / week)"
[fourlang] "(week<root> / week)"

CD -> Four_CD
[string] Four
[tree] CD(Four)
[ud] "(Four<root> / Four)"
[fourlang] "(Four<root> / Four)"

NNP -> AugPERIOD_NNP
[string] AugPERIOD
[tree] NNP(AugPERIOD)
[ud] "(AugPERIOD<root> / AugPERIOD)"
[fourlang] "(AugPERIOD<root> / AugPERIOD)"

NNS -> commercials_NNS
[string] commercials
[tree] NNS(commercials)
[ud] "(commercials<root> / commercials)"
[fourlang] "(commercials<root> / commercials)"

NN -> water_NN
[string] water
[tree] NN(water)
[ud] "(water<root> / water)"
[fourlang] "(water<root> / water)"

NNP -> Hopkins_NNP
[string] Hopkins
[tree] NNP(Hopkins)
[ud] "(Hopkins<root> / Hopkins)"
[fourlang] "(Hopkins<root> / Hopkins)"

NN -> investor_NN
[string] investor
[tree] NN(investor)
[ud] "(investor<root> / investor)"
[fourlang] "(investor<root> / investor)"

NN -> adjustment_NN
[string] adjustment
[tree] NN(adjustment)
[ud] "(adjustment<root> / adjustment)"
[fourlang] "(adjustment<root> / adjustment)"

NNP -> Malaysia_NNP
[string] Malaysia
[tree] NNP(Malaysia)
[ud] "(Malaysia<root> / Malaysia)"
[fourlang] "(Malaysia<root> / Malaysia)"

NN -> passion_NN
[string] passion
[tree] NN(passion)
[ud] "(passion<root> / passion)"
[fourlang] "(passion<root> / passion)"

NNS -> derivatives_NNS
[string] derivatives
[tree] NNS(derivatives)
[ud] "(derivatives<root> / derivatives)"
[fourlang] "(derivatives<root> / derivatives)"

NNS -> civics_NNS
[string] civics
[tree] NNS(civics)
[ud] "(civics<root> / civics)"
[fourlang] "(civics<root> / civics)"

PUNCT -> SQSQ_PUNCT
[string] SQSQ
[tree] PUNCT(SQSQ)
[ud] "(SQSQ<root> / SQSQ)"
[fourlang] "(SQSQ<root> / SQSQ)"

NN -> import_NN
[string] import
[tree] NN(import)
[ud] "(import<root> / import)"
[fourlang] "(import<root> / import)"

VBG -> ailing_VBG
[string] ailing
[tree] VBG(ailing)
[ud] "(ailing<root> / ailing)"
[fourlang] "(ailing<root> / ailing)"

NN -> proposal_NN
[string] proposal
[tree] NN(proposal)
[ud] "(proposal<root> / proposal)"
[fourlang] "(proposal<root> / proposal)"

NN -> smoking_NN
[string] smoking
[tree] NN(smoking)
[ud] "(smoking<root> / smoking)"
[fourlang] "(smoking<root> / smoking)"

NNP -> RPERIOD_NNP
[string] RPERIOD
[tree] NNP(RPERIOD)
[ud] "(RPERIOD<root> / RPERIOD)"
[fourlang] "(RPERIOD<root> / RPERIOD)"

NN -> hour_NN
[string] hour
[tree] NN(hour)
[ud] "(hour<root> / hour)"
[fourlang] "(hour<root> / hour)"

JJ -> entangled_JJ
[string] entangled
[tree] JJ(entangled)
[ud] "(entangled<root> / entangled)"
[fourlang] "(entangled<root> / entangled)"

NN -> scenario_NN
[string] scenario
[tree] NN(scenario)
[ud] "(scenario<root> / scenario)"
[fourlang] "(scenario<root> / scenario)"

JJS -> latest_JJS
[string] latest
[tree] JJS(latest)
[ud] "(latest<root> / latest)"
[fourlang] "(latest<root> / latest)"

NNP -> Black_NNP
[string] Black
[tree] NNP(Black)
[ud] "(Black<root> / Black)"
[fourlang] "(Black<root> / Black)"

NNP -> Barbara_NNP
[string] Barbara
[tree] NNP(Barbara)
[ud] "(Barbara<root> / Barbara)"
[fourlang] "(Barbara<root> / Barbara)"

VB -> offset_VB
[string] offset
[tree] VB(offset)
[ud] "(offset<root> / offset)"
[fourlang] "(offset<root> / offset)"

JJ -> YorkHYPHENbased_JJ
[string] YorkHYPHENbased
[tree] JJ(YorkHYPHENbased)
[ud] "(YorkHYPHENbased<root> / YorkHYPHENbased)"
[fourlang] "(YorkHYPHENbased<root> / YorkHYPHENbased)"

VBG -> treating_VBG
[string] treating
[tree] VBG(treating)
[ud] "(treating<root> / treating)"
[fourlang] "(treating<root> / treating)"

NNP -> British_NNP
[string] British
[tree] NNP(British)
[ud] "(British<root> / British)"
[fourlang] "(British<root> / British)"

NNP -> RMS_NNP
[string] RMS
[tree] NNP(RMS)
[ud] "(RMS<root> / RMS)"
[fourlang] "(RMS<root> / RMS)"

NNS -> structures_NNS
[string] structures
[tree] NNS(structures)
[ud] "(structures<root> / structures)"
[fourlang] "(structures<root> / structures)"

NNP -> Hugo_NNP
[string] Hugo
[tree] NNP(Hugo)
[ud] "(Hugo<root> / Hugo)"
[fourlang] "(Hugo<root> / Hugo)"

NNS -> tidbits_NNS
[string] tidbits
[tree] NNS(tidbits)
[ud] "(tidbits<root> / tidbits)"
[fourlang] "(tidbits<root> / tidbits)"

JJ -> lowerHYPHENpriced_JJ
[string] lowerHYPHENpriced
[tree] JJ(lowerHYPHENpriced)
[ud] "(lowerHYPHENpriced<root> / lowerHYPHENpriced)"
[fourlang] "(lowerHYPHENpriced<root> / lowerHYPHENpriced)"

NNS -> orders_NNS
[string] orders
[tree] NNS(orders)
[ud] "(orders<root> / orders)"
[fourlang] "(orders<root> / orders)"

VBN -> ended_VBN
[string] ended
[tree] VBN(ended)
[ud] "(ended<root> / ended)"
[fourlang] "(ended<root> / ended)"

NNS -> individuals_NNS
[string] individuals
[tree] NNS(individuals)
[ud] "(individuals<root> / individuals)"
[fourlang] "(individuals<root> / individuals)"

NN -> range_NN
[string] range
[tree] NN(range)
[ud] "(range<root> / range)"
[fourlang] "(range<root> / range)"

CC -> but_CC
[string] but
[tree] CC(but)
[ud] "(but<root> / but)"
[fourlang] "(but<root> / but)"

NNS -> accommodations_NNS
[string] accommodations
[tree] NNS(accommodations)
[ud] "(accommodations<root> / accommodations)"
[fourlang] "(accommodations<root> / accommodations)"

JJS -> loudest_JJS
[string] loudest
[tree] JJS(loudest)
[ud] "(loudest<root> / loudest)"
[fourlang] "(loudest<root> / loudest)"

NNS -> ports_NNS
[string] ports
[tree] NNS(ports)
[ud] "(ports<root> / ports)"
[fourlang] "(ports<root> / ports)"

NNP -> Johnson_NNP
[string] Johnson
[tree] NNP(Johnson)
[ud] "(Johnson<root> / Johnson)"
[fourlang] "(Johnson<root> / Johnson)"

NNP -> Markey_NNP
[string] Markey
[tree] NNP(Markey)
[ud] "(Markey<root> / Markey)"
[fourlang] "(Markey<root> / Markey)"

VBG -> leading_VBG
[string] leading
[tree] VBG(leading)
[ud] "(leading<root> / leading)"
[fourlang] "(leading<root> / leading)"

RB -> Generally_RB
[string] Generally
[tree] RB(Generally)
[ud] "(Generally<root> / Generally)"
[fourlang] "(Generally<root> / Generally)"

JJ -> NPERIODJPERIODHYPHENbased_JJ
[string] NPERIODJPERIODHYPHENbased
[tree] JJ(NPERIODJPERIODHYPHENbased)
[ud] "(NPERIODJPERIODHYPHENbased<root> / NPERIODJPERIODHYPHENbased)"
[fourlang] "(NPERIODJPERIODHYPHENbased<root> / NPERIODJPERIODHYPHENbased)"

NNS -> quotas_NNS
[string] quotas
[tree] NNS(quotas)
[ud] "(quotas<root> / quotas)"
[fourlang] "(quotas<root> / quotas)"

NNP -> COPPER_NNP
[string] COPPER
[tree] NNP(COPPER)
[ud] "(COPPER<root> / COPPER)"
[fourlang] "(COPPER<root> / COPPER)"

NNP -> Genetics_NNP
[string] Genetics
[tree] NNP(Genetics)
[ud] "(Genetics<root> / Genetics)"
[fourlang] "(Genetics<root> / Genetics)"

NNP -> Hopwood_NNP
[string] Hopwood
[tree] NNP(Hopwood)
[ud] "(Hopwood<root> / Hopwood)"
[fourlang] "(Hopwood<root> / Hopwood)"

NNS -> nets_NNS
[string] nets
[tree] NNS(nets)
[ud] "(nets<root> / nets)"
[fourlang] "(nets<root> / nets)"

NN -> comparison_NN
[string] comparison
[tree] NN(comparison)
[ud] "(comparison<root> / comparison)"
[fourlang] "(comparison<root> / comparison)"

JJ -> new_JJ
[string] new
[tree] JJ(new)
[ud] "(new<root> / new)"
[fourlang] "(new<root> / new)"

NN -> coHYPHENowner_NN
[string] coHYPHENowner
[tree] NN(coHYPHENowner)
[ud] "(coHYPHENowner<root> / coHYPHENowner)"
[fourlang] "(coHYPHENowner<root> / coHYPHENowner)"

NN -> barometer_NN
[string] barometer
[tree] NN(barometer)
[ud] "(barometer<root> / barometer)"
[fourlang] "(barometer<root> / barometer)"

JJ -> imminent_JJ
[string] imminent
[tree] JJ(imminent)
[ud] "(imminent<root> / imminent)"
[fourlang] "(imminent<root> / imminent)"

NNP -> Yamaichi_NNP
[string] Yamaichi
[tree] NNP(Yamaichi)
[ud] "(Yamaichi<root> / Yamaichi)"
[fourlang] "(Yamaichi<root> / Yamaichi)"

NN -> bearing_NN
[string] bearing
[tree] NN(bearing)
[ud] "(bearing<root> / bearing)"
[fourlang] "(bearing<root> / bearing)"

VB -> modify_VB
[string] modify
[tree] VB(modify)
[ud] "(modify<root> / modify)"
[fourlang] "(modify<root> / modify)"

NNS -> vintages_NNS
[string] vintages
[tree] NNS(vintages)
[ud] "(vintages<root> / vintages)"
[fourlang] "(vintages<root> / vintages)"

JJ -> past_JJ
[string] past
[tree] JJ(past)
[ud] "(past<root> / past)"
[fourlang] "(past<root> / past)"

JJ -> nutty_JJ
[string] nutty
[tree] JJ(nutty)
[ud] "(nutty<root> / nutty)"
[fourlang] "(nutty<root> / nutty)"

NN -> summary_NN
[string] summary
[tree] NN(summary)
[ud] "(summary<root> / summary)"
[fourlang] "(summary<root> / summary)"

NN -> fight_NN
[string] fight
[tree] NN(fight)
[ud] "(fight<root> / fight)"
[fourlang] "(fight<root> / fight)"

NNP -> Heiwado_NNP
[string] Heiwado
[tree] NNP(Heiwado)
[ud] "(Heiwado<root> / Heiwado)"
[fourlang] "(Heiwado<root> / Heiwado)"

PRP -> he_PRP
[string] he
[tree] PRP(he)
[ud] "(he<root> / he)"
[fourlang] "(he<root> / he)"

NNP -> Edward_NNP
[string] Edward
[tree] NNP(Edward)
[ud] "(Edward<root> / Edward)"
[fourlang] "(Edward<root> / Edward)"

NNP -> Giants_NNP
[string] Giants
[tree] NNP(Giants)
[ud] "(Giants<root> / Giants)"
[fourlang] "(Giants<root> / Giants)"

NN -> start_NN
[string] start
[tree] NN(start)
[ud] "(start<root> / start)"
[fourlang] "(start<root> / start)"

JJ -> Republican_JJ
[string] Republican
[tree] JJ(Republican)
[ud] "(Republican<root> / Republican)"
[fourlang] "(Republican<root> / Republican)"

VBG -> injuring_VBG
[string] injuring
[tree] VBG(injuring)
[ud] "(injuring<root> / injuring)"
[fourlang] "(injuring<root> / injuring)"

VBN -> superimposed_VBN
[string] superimposed
[tree] VBN(superimposed)
[ud] "(superimposed<root> / superimposed)"
[fourlang] "(superimposed<root> / superimposed)"

VBN -> restructured_VBN
[string] restructured
[tree] VBN(restructured)
[ud] "(restructured<root> / restructured)"
[fourlang] "(restructured<root> / restructured)"

NNS -> worries_NNS
[string] worries
[tree] NNS(worries)
[ud] "(worries<root> / worries)"
[fourlang] "(worries<root> / worries)"

JJ -> promising_JJ
[string] promising
[tree] JJ(promising)
[ud] "(promising<root> / promising)"
[fourlang] "(promising<root> / promising)"

NNP -> Circulation_NNP
[string] Circulation
[tree] NNP(Circulation)
[ud] "(Circulation<root> / Circulation)"
[fourlang] "(Circulation<root> / Circulation)"

JJR -> broader_JJR
[string] broader
[tree] JJR(broader)
[ud] "(broader<root> / broader)"
[fourlang] "(broader<root> / broader)"

NN -> section_NN
[string] section
[tree] NN(section)
[ud] "(section<root> / section)"
[fourlang] "(section<root> / section)"

CD -> billion_CD
[string] billion
[tree] CD(billion)
[ud] "(billion<root> / billion)"
[fourlang] "(billion<root> / billion)"

NN -> circuit_NN
[string] circuit
[tree] NN(circuit)
[ud] "(circuit<root> / circuit)"
[fourlang] "(circuit<root> / circuit)"

CD -> DIGITDIGITDIGIT_CD
[string] DIGITDIGITDIGIT
[tree] CD(DIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGIT<root> / DIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGIT<root> / DIGITDIGITDIGIT)"

JJ -> implicit_JJ
[string] implicit
[tree] JJ(implicit)
[ud] "(implicit<root> / implicit)"
[fourlang] "(implicit<root> / implicit)"

VBP -> set_VBP
[string] set
[tree] VBP(set)
[ud] "(set<root> / set)"
[fourlang] "(set<root> / set)"

JJ -> federal_JJ
[string] federal
[tree] JJ(federal)
[ud] "(federal<root> / federal)"
[fourlang] "(federal<root> / federal)"

FW -> besuboru_FW
[string] besuboru
[tree] FW(besuboru)
[ud] "(besuboru<root> / besuboru)"
[fourlang] "(besuboru<root> / besuboru)"

IN -> after_IN
[string] after
[tree] IN(after)
[ud] "(after<root> / after)"
[fourlang] "(after<root> / after)"

NNS -> liners_NNS
[string] liners
[tree] NNS(liners)
[ud] "(liners<root> / liners)"
[fourlang] "(liners<root> / liners)"

NNS -> lipsticks_NNS
[string] lipsticks
[tree] NNS(lipsticks)
[ud] "(lipsticks<root> / lipsticks)"
[fourlang] "(lipsticks<root> / lipsticks)"

JJ -> nonHYPHENcore_JJ
[string] nonHYPHENcore
[tree] JJ(nonHYPHENcore)
[ud] "(nonHYPHENcore<root> / nonHYPHENcore)"
[fourlang] "(nonHYPHENcore<root> / nonHYPHENcore)"

JJ -> critical_JJ
[string] critical
[tree] JJ(critical)
[ud] "(critical<root> / critical)"
[fourlang] "(critical<root> / critical)"

VBN -> proposed_VBN
[string] proposed
[tree] VBN(proposed)
[ud] "(proposed<root> / proposed)"
[fourlang] "(proposed<root> / proposed)"

NN -> renovation_NN
[string] renovation
[tree] NN(renovation)
[ud] "(renovation<root> / renovation)"
[fourlang] "(renovation<root> / renovation)"

NN -> loyalty_NN
[string] loyalty
[tree] NN(loyalty)
[ud] "(loyalty<root> / loyalty)"
[fourlang] "(loyalty<root> / loyalty)"

JJ -> roofHYPHENcrush_JJ
[string] roofHYPHENcrush
[tree] JJ(roofHYPHENcrush)
[ud] "(roofHYPHENcrush<root> / roofHYPHENcrush)"
[fourlang] "(roofHYPHENcrush<root> / roofHYPHENcrush)"

NNP -> Frances_NNP
[string] Frances
[tree] NNP(Frances)
[ud] "(Frances<root> / Frances)"
[fourlang] "(Frances<root> / Frances)"

DT -> any_DT
[string] any
[tree] DT(any)
[ud] "(any<root> / any)"
[fourlang] "(any<root> / any)"

NN -> stake_NN
[string] stake
[tree] NN(stake)
[ud] "(stake<root> / stake)"
[fourlang] "(stake<root> / stake)"

CD -> DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT_CD
[string] DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT
[tree] CD(DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITDIGITCOMMADIGITDIGITDIGITCOMMADIGITDIGITDIGIT)"

NNP -> Hutton_NNP
[string] Hutton
[tree] NNP(Hutton)
[ud] "(Hutton<root> / Hutton)"
[fourlang] "(Hutton<root> / Hutton)"

JJ -> modern_JJ
[string] modern
[tree] JJ(modern)
[ud] "(modern<root> / modern)"
[fourlang] "(modern<root> / modern)"

RB -> unusually_RB
[string] unusually
[tree] RB(unusually)
[ud] "(unusually<root> / unusually)"
[fourlang] "(unusually<root> / unusually)"

VB -> continue_VB
[string] continue
[tree] VB(continue)
[ud] "(continue<root> / continue)"
[fourlang] "(continue<root> / continue)"

NNP -> Douglas_NNP
[string] Douglas
[tree] NNP(Douglas)
[ud] "(Douglas<root> / Douglas)"
[fourlang] "(Douglas<root> / Douglas)"

VBZ -> plays_VBZ
[string] plays
[tree] VBZ(plays)
[ud] "(plays<root> / plays)"
[fourlang] "(plays<root> / plays)"

NN -> tow_NN
[string] tow
[tree] NN(tow)
[ud] "(tow<root> / tow)"
[fourlang] "(tow<root> / tow)"

VBN -> called_VBN
[string] called
[tree] VBN(called)
[ud] "(called<root> / called)"
[fourlang] "(called<root> / called)"

NNP -> Phipps_NNP
[string] Phipps
[tree] NNP(Phipps)
[ud] "(Phipps<root> / Phipps)"
[fourlang] "(Phipps<root> / Phipps)"

NNP -> Foster_NNP
[string] Foster
[tree] NNP(Foster)
[ud] "(Foster<root> / Foster)"
[fourlang] "(Foster<root> / Foster)"

NN -> aid_NN
[string] aid
[tree] NN(aid)
[ud] "(aid<root> / aid)"
[fourlang] "(aid<root> / aid)"

VBP -> advocate_VBP
[string] advocate
[tree] VBP(advocate)
[ud] "(advocate<root> / advocate)"
[fourlang] "(advocate<root> / advocate)"

JJ -> late_JJ
[string] late
[tree] JJ(late)
[ud] "(late<root> / late)"
[fourlang] "(late<root> / late)"

NNS -> Interviews_NNS
[string] Interviews
[tree] NNS(Interviews)
[ud] "(Interviews<root> / Interviews)"
[fourlang] "(Interviews<root> / Interviews)"

NNPS -> Nations_NNPS
[string] Nations
[tree] NNPS(Nations)
[ud] "(Nations<root> / Nations)"
[fourlang] "(Nations<root> / Nations)"

NN -> diaper_NN
[string] diaper
[tree] NN(diaper)
[ud] "(diaper<root> / diaper)"
[fourlang] "(diaper<root> / diaper)"

NNP -> Wilbur_NNP
[string] Wilbur
[tree] NNP(Wilbur)
[ud] "(Wilbur<root> / Wilbur)"
[fourlang] "(Wilbur<root> / Wilbur)"

VBZ -> retires_VBZ
[string] retires
[tree] VBZ(retires)
[ud] "(retires<root> / retires)"
[fourlang] "(retires<root> / retires)"

NN -> employer_NN
[string] employer
[tree] NN(employer)
[ud] "(employer<root> / employer)"
[fourlang] "(employer<root> / employer)"

NNS -> arguments_NNS
[string] arguments
[tree] NNS(arguments)
[ud] "(arguments<root> / arguments)"
[fourlang] "(arguments<root> / arguments)"

VBP -> believe_VBP
[string] believe
[tree] VBP(believe)
[ud] "(believe<root> / believe)"
[fourlang] "(believe<root> / believe)"

NN -> preface_NN
[string] preface
[tree] NN(preface)
[ud] "(preface<root> / preface)"
[fourlang] "(preface<root> / preface)"

NNP -> Ravenswood_NNP
[string] Ravenswood
[tree] NNP(Ravenswood)
[ud] "(Ravenswood<root> / Ravenswood)"
[fourlang] "(Ravenswood<root> / Ravenswood)"

NN -> lifting_NN
[string] lifting
[tree] NN(lifting)
[ud] "(lifting<root> / lifting)"
[fourlang] "(lifting<root> / lifting)"

NN -> winner_NN
[string] winner
[tree] NN(winner)
[ud] "(winner<root> / winner)"
[fourlang] "(winner<root> / winner)"

NNP -> Andrew_NNP
[string] Andrew
[tree] NNP(Andrew)
[ud] "(Andrew<root> / Andrew)"
[fourlang] "(Andrew<root> / Andrew)"

VBG -> taking_VBG
[string] taking
[tree] VBG(taking)
[ud] "(taking<root> / taking)"
[fourlang] "(taking<root> / taking)"

PRP$ -> Your_PRP$
[string] Your
[tree] PRP$(Your)
[ud] "(Your<root> / Your)"
[fourlang] "(Your<root> / Your)"

NN -> embassy_NN
[string] embassy
[tree] NN(embassy)
[ud] "(embassy<root> / embassy)"
[fourlang] "(embassy<root> / embassy)"

NN -> investment_NN
[string] investment
[tree] NN(investment)
[ud] "(investment<root> / investment)"
[fourlang] "(investment<root> / investment)"

JJ -> soHYPHENcalled_JJ
[string] soHYPHENcalled
[tree] JJ(soHYPHENcalled)
[ud] "(soHYPHENcalled<root> / soHYPHENcalled)"
[fourlang] "(soHYPHENcalled<root> / soHYPHENcalled)"

JJ -> nationalist_JJ
[string] nationalist
[tree] JJ(nationalist)
[ud] "(nationalist<root> / nationalist)"
[fourlang] "(nationalist<root> / nationalist)"

RB -> poorly_RB
[string] poorly
[tree] RB(poorly)
[ud] "(poorly<root> / poorly)"
[fourlang] "(poorly<root> / poorly)"

NN -> error_NN
[string] error
[tree] NN(error)
[ud] "(error<root> / error)"
[fourlang] "(error<root> / error)"

NN -> document_NN
[string] document
[tree] NN(document)
[ud] "(document<root> / document)"
[fourlang] "(document<root> / document)"

NN -> cue_NN
[string] cue
[tree] NN(cue)
[ud] "(cue<root> / cue)"
[fourlang] "(cue<root> / cue)"

NN -> state_NN
[string] state
[tree] NN(state)
[ud] "(state<root> / state)"
[fourlang] "(state<root> / state)"

EX -> there_EX
[string] there
[tree] EX(there)
[ud] "(there<root> / there)"
[fourlang] "(there<root> / there)"

NN -> reinstatement_NN
[string] reinstatement
[tree] NN(reinstatement)
[ud] "(reinstatement<root> / reinstatement)"
[fourlang] "(reinstatement<root> / reinstatement)"

NNS -> clients_NNS
[string] clients
[tree] NNS(clients)
[ud] "(clients<root> / clients)"
[fourlang] "(clients<root> / clients)"

NN -> call_NN
[string] call
[tree] NN(call)
[ud] "(call<root> / call)"
[fourlang] "(call<root> / call)"

NN -> minimumHYPHENwage_NN
[string] minimumHYPHENwage
[tree] NN(minimumHYPHENwage)
[ud] "(minimumHYPHENwage<root> / minimumHYPHENwage)"
[fourlang] "(minimumHYPHENwage<root> / minimumHYPHENwage)"

NNS -> things_NNS
[string] things
[tree] NNS(things)
[ud] "(things<root> / things)"
[fourlang] "(things<root> / things)"

NNP -> SrPERIOD_NNP
[string] SrPERIOD
[tree] NNP(SrPERIOD)
[ud] "(SrPERIOD<root> / SrPERIOD)"
[fourlang] "(SrPERIOD<root> / SrPERIOD)"

NN -> cadet_NN
[string] cadet
[tree] NN(cadet)
[ud] "(cadet<root> / cadet)"
[fourlang] "(cadet<root> / cadet)"

NNP -> Section_NNP
[string] Section
[tree] NNP(Section)
[ud] "(Section<root> / Section)"
[fourlang] "(Section<root> / Section)"

NNP -> Marine_NNP
[string] Marine
[tree] NNP(Marine)
[ud] "(Marine<root> / Marine)"
[fourlang] "(Marine<root> / Marine)"

NN -> area_NN
[string] area
[tree] NN(area)
[ud] "(area<root> / area)"
[fourlang] "(area<root> / area)"

NNP -> FPERIOD_NNP
[string] FPERIOD
[tree] NNP(FPERIOD)
[ud] "(FPERIOD<root> / FPERIOD)"
[fourlang] "(FPERIOD<root> / FPERIOD)"

NN -> achievement_NN
[string] achievement
[tree] NN(achievement)
[ud] "(achievement<root> / achievement)"
[fourlang] "(achievement<root> / achievement)"

VBG -> existing_VBG
[string] existing
[tree] VBG(existing)
[ud] "(existing<root> / existing)"
[fourlang] "(existing<root> / existing)"

NNP -> Koizumi_NNP
[string] Koizumi
[tree] NNP(Koizumi)
[ud] "(Koizumi<root> / Koizumi)"
[fourlang] "(Koizumi<root> / Koizumi)"

NN -> inkling_NN
[string] inkling
[tree] NN(inkling)
[ud] "(inkling<root> / inkling)"
[fourlang] "(inkling<root> / inkling)"

VB -> focus_VB
[string] focus
[tree] VB(focus)
[ud] "(focus<root> / focus)"
[fourlang] "(focus<root> / focus)"

NNS -> futures_NNS
[string] futures
[tree] NNS(futures)
[ud] "(futures<root> / futures)"
[fourlang] "(futures<root> / futures)"

NN -> uptick_NN
[string] uptick
[tree] NN(uptick)
[ud] "(uptick<root> / uptick)"
[fourlang] "(uptick<root> / uptick)"

NN -> cartilage_NN
[string] cartilage
[tree] NN(cartilage)
[ud] "(cartilage<root> / cartilage)"
[fourlang] "(cartilage<root> / cartilage)"

JJ -> minimal_JJ
[string] minimal
[tree] JJ(minimal)
[ud] "(minimal<root> / minimal)"
[fourlang] "(minimal<root> / minimal)"

JJ -> midHYPHENsize_JJ
[string] midHYPHENsize
[tree] JJ(midHYPHENsize)
[ud] "(midHYPHENsize<root> / midHYPHENsize)"
[fourlang] "(midHYPHENsize<root> / midHYPHENsize)"

NN -> oil_NN
[string] oil
[tree] NN(oil)
[ud] "(oil<root> / oil)"
[fourlang] "(oil<root> / oil)"

JJ -> moneyHYPHENlosing_JJ
[string] moneyHYPHENlosing
[tree] JJ(moneyHYPHENlosing)
[ud] "(moneyHYPHENlosing<root> / moneyHYPHENlosing)"
[fourlang] "(moneyHYPHENlosing<root> / moneyHYPHENlosing)"

JJ -> frantic_JJ
[string] frantic
[tree] JJ(frantic)
[ud] "(frantic<root> / frantic)"
[fourlang] "(frantic<root> / frantic)"

NNS -> parts_NNS
[string] parts
[tree] NNS(parts)
[ud] "(parts<root> / parts)"
[fourlang] "(parts<root> / parts)"

JJ -> economic_JJ
[string] economic
[tree] JJ(economic)
[ud] "(economic<root> / economic)"
[fourlang] "(economic<root> / economic)"

NNP -> Yquem_NNP
[string] Yquem
[tree] NNP(Yquem)
[ud] "(Yquem<root> / Yquem)"
[fourlang] "(Yquem<root> / Yquem)"

NN -> deal_NN
[string] deal
[tree] NN(deal)
[ud] "(deal<root> / deal)"
[fourlang] "(deal<root> / deal)"

NNP -> Truck_NNP
[string] Truck
[tree] NNP(Truck)
[ud] "(Truck<root> / Truck)"
[fourlang] "(Truck<root> / Truck)"

VBZ -> reflects_VBZ
[string] reflects
[tree] VBZ(reflects)
[ud] "(reflects<root> / reflects)"
[fourlang] "(reflects<root> / reflects)"

JJ -> permissible_JJ
[string] permissible
[tree] JJ(permissible)
[ud] "(permissible<root> / permissible)"
[fourlang] "(permissible<root> / permissible)"

NN -> article_NN
[string] article
[tree] NN(article)
[ud] "(article<root> / article)"
[fourlang] "(article<root> / article)"

NNP -> Nelson_NNP
[string] Nelson
[tree] NNP(Nelson)
[ud] "(Nelson<root> / Nelson)"
[fourlang] "(Nelson<root> / Nelson)"

RB -> nearly_RB
[string] nearly
[tree] RB(nearly)
[ud] "(nearly<root> / nearly)"
[fourlang] "(nearly<root> / nearly)"

NNP -> Development_NNP
[string] Development
[tree] NNP(Development)
[ud] "(Development<root> / Development)"
[fourlang] "(Development<root> / Development)"

NNS -> troubles_NNS
[string] troubles
[tree] NNS(troubles)
[ud] "(troubles<root> / troubles)"
[fourlang] "(troubles<root> / troubles)"

JJ -> blind_JJ
[string] blind
[tree] JJ(blind)
[ud] "(blind<root> / blind)"
[fourlang] "(blind<root> / blind)"

NN -> bit_NN
[string] bit
[tree] NN(bit)
[ud] "(bit<root> / bit)"
[fourlang] "(bit<root> / bit)"

NNP -> CS_NNP
[string] CS
[tree] NNP(CS)
[ud] "(CS<root> / CS)"
[fourlang] "(CS<root> / CS)"

NN -> restructure_NN
[string] restructure
[tree] NN(restructure)
[ud] "(restructure<root> / restructure)"
[fourlang] "(restructure<root> / restructure)"

NNP -> Atsushi_NNP
[string] Atsushi
[tree] NNP(Atsushi)
[ud] "(Atsushi<root> / Atsushi)"
[fourlang] "(Atsushi<root> / Atsushi)"

JJ -> Finnish_JJ
[string] Finnish
[tree] JJ(Finnish)
[ud] "(Finnish<root> / Finnish)"
[fourlang] "(Finnish<root> / Finnish)"

NNS -> automobiles_NNS
[string] automobiles
[tree] NNS(automobiles)
[ud] "(automobiles<root> / automobiles)"
[fourlang] "(automobiles<root> / automobiles)"

JJ -> breadHYPHENandHYPHENbutter_JJ
[string] breadHYPHENandHYPHENbutter
[tree] JJ(breadHYPHENandHYPHENbutter)
[ud] "(breadHYPHENandHYPHENbutter<root> / breadHYPHENandHYPHENbutter)"
[fourlang] "(breadHYPHENandHYPHENbutter<root> / breadHYPHENandHYPHENbutter)"

NN -> credibility_NN
[string] credibility
[tree] NN(credibility)
[ud] "(credibility<root> / credibility)"
[fourlang] "(credibility<root> / credibility)"

NNS -> passages_NNS
[string] passages
[tree] NNS(passages)
[ud] "(passages<root> / passages)"
[fourlang] "(passages<root> / passages)"

NNP -> Level_NNP
[string] Level
[tree] NNP(Level)
[ud] "(Level<root> / Level)"
[fourlang] "(Level<root> / Level)"

NNP -> Dale_NNP
[string] Dale
[tree] NNP(Dale)
[ud] "(Dale<root> / Dale)"
[fourlang] "(Dale<root> / Dale)"

NNP -> Newsweek_NNP
[string] Newsweek
[tree] NNP(Newsweek)
[ud] "(Newsweek<root> / Newsweek)"
[fourlang] "(Newsweek<root> / Newsweek)"

NN -> support_NN
[string] support
[tree] NN(support)
[ud] "(support<root> / support)"
[fourlang] "(support<root> / support)"

NNS -> rights_NNS
[string] rights
[tree] NNS(rights)
[ud] "(rights<root> / rights)"
[fourlang] "(rights<root> / rights)"

NNP -> Wohlstetter_NNP
[string] Wohlstetter
[tree] NNP(Wohlstetter)
[ud] "(Wohlstetter<root> / Wohlstetter)"
[fourlang] "(Wohlstetter<root> / Wohlstetter)"

NNP -> Nature_NNP
[string] Nature
[tree] NNP(Nature)
[ud] "(Nature<root> / Nature)"
[fourlang] "(Nature<root> / Nature)"

JJ -> nineHYPHENyear_JJ
[string] nineHYPHENyear
[tree] JJ(nineHYPHENyear)
[ud] "(nineHYPHENyear<root> / nineHYPHENyear)"
[fourlang] "(nineHYPHENyear<root> / nineHYPHENyear)"

NNP -> Equitable_NNP
[string] Equitable
[tree] NNP(Equitable)
[ud] "(Equitable<root> / Equitable)"
[fourlang] "(Equitable<root> / Equitable)"

NN -> something_NN
[string] something
[tree] NN(something)
[ud] "(something<root> / something)"
[fourlang] "(something<root> / something)"

NNP -> Majority_NNP
[string] Majority
[tree] NNP(Majority)
[ud] "(Majority<root> / Majority)"
[fourlang] "(Majority<root> / Majority)"

NNS -> divisions_NNS
[string] divisions
[tree] NNS(divisions)
[ud] "(divisions<root> / divisions)"
[fourlang] "(divisions<root> / divisions)"

NNP -> Sony_NNP
[string] Sony
[tree] NNP(Sony)
[ud] "(Sony<root> / Sony)"
[fourlang] "(Sony<root> / Sony)"

NNP -> Marcus_NNP
[string] Marcus
[tree] NNP(Marcus)
[ud] "(Marcus<root> / Marcus)"
[fourlang] "(Marcus<root> / Marcus)"

NNP -> Radio_NNP
[string] Radio
[tree] NNP(Radio)
[ud] "(Radio<root> / Radio)"
[fourlang] "(Radio<root> / Radio)"

NN -> substance_NN
[string] substance
[tree] NN(substance)
[ud] "(substance<root> / substance)"
[fourlang] "(substance<root> / substance)"

NN -> fiber_NN
[string] fiber
[tree] NN(fiber)
[ud] "(fiber<root> / fiber)"
[fourlang] "(fiber<root> / fiber)"

NNP -> Corp_NNP
[string] Corp
[tree] NNP(Corp)
[ud] "(Corp<root> / Corp)"
[fourlang] "(Corp<root> / Corp)"

NN -> basis_NN
[string] basis
[tree] NN(basis)
[ud] "(basis<root> / basis)"
[fourlang] "(basis<root> / basis)"

NNP -> Purchasing_NNP
[string] Purchasing
[tree] NNP(Purchasing)
[ud] "(Purchasing<root> / Purchasing)"
[fourlang] "(Purchasing<root> / Purchasing)"

NNS -> Stocks_NNS
[string] Stocks
[tree] NNS(Stocks)
[ud] "(Stocks<root> / Stocks)"
[fourlang] "(Stocks<root> / Stocks)"

NNP -> Gates_NNP
[string] Gates
[tree] NNP(Gates)
[ud] "(Gates<root> / Gates)"
[fourlang] "(Gates<root> / Gates)"

JJ -> complicated_JJ
[string] complicated
[tree] JJ(complicated)
[ud] "(complicated<root> / complicated)"
[fourlang] "(complicated<root> / complicated)"

VBD -> led_VBD
[string] led
[tree] VBD(led)
[ud] "(led<root> / led)"
[fourlang] "(led<root> / led)"

NNP -> Telerate_NNP
[string] Telerate
[tree] NNP(Telerate)
[ud] "(Telerate<root> / Telerate)"
[fourlang] "(Telerate<root> / Telerate)"

NNS -> economics_NNS
[string] economics
[tree] NNS(economics)
[ud] "(economics<root> / economics)"
[fourlang] "(economics<root> / economics)"

NN -> stand_NN
[string] stand
[tree] NN(stand)
[ud] "(stand<root> / stand)"
[fourlang] "(stand<root> / stand)"

VBG -> serving_VBG
[string] serving
[tree] VBG(serving)
[ud] "(serving<root> / serving)"
[fourlang] "(serving<root> / serving)"

NN -> bloodHYPHENcell_NN
[string] bloodHYPHENcell
[tree] NN(bloodHYPHENcell)
[ud] "(bloodHYPHENcell<root> / bloodHYPHENcell)"
[fourlang] "(bloodHYPHENcell<root> / bloodHYPHENcell)"

RB -> back_RB
[string] back
[tree] RB(back)
[ud] "(back<root> / back)"
[fourlang] "(back<root> / back)"

NN -> flow_NN
[string] flow
[tree] NN(flow)
[ud] "(flow<root> / flow)"
[fourlang] "(flow<root> / flow)"

NNP -> Attwood_NNP
[string] Attwood
[tree] NNP(Attwood)
[ud] "(Attwood<root> / Attwood)"
[fourlang] "(Attwood<root> / Attwood)"

NN -> strategy_NN
[string] strategy
[tree] NN(strategy)
[ud] "(strategy<root> / strategy)"
[fourlang] "(strategy<root> / strategy)"

JJ -> acting_JJ
[string] acting
[tree] JJ(acting)
[ud] "(acting<root> / acting)"
[fourlang] "(acting<root> / acting)"

NNPS -> FUNDS_NNPS
[string] FUNDS
[tree] NNPS(FUNDS)
[ud] "(FUNDS<root> / FUNDS)"
[fourlang] "(FUNDS<root> / FUNDS)"

NN -> sentence_NN
[string] sentence
[tree] NN(sentence)
[ud] "(sentence<root> / sentence)"
[fourlang] "(sentence<root> / sentence)"

NN -> equipment_NN
[string] equipment
[tree] NN(equipment)
[ud] "(equipment<root> / equipment)"
[fourlang] "(equipment<root> / equipment)"

JJ -> defensive_JJ
[string] defensive
[tree] JJ(defensive)
[ud] "(defensive<root> / defensive)"
[fourlang] "(defensive<root> / defensive)"

NN -> death_NN
[string] death
[tree] NN(death)
[ud] "(death<root> / death)"
[fourlang] "(death<root> / death)"

NNP -> Harry_NNP
[string] Harry
[tree] NNP(Harry)
[ud] "(Harry<root> / Harry)"
[fourlang] "(Harry<root> / Harry)"

NNP -> Ketchum_NNP
[string] Ketchum
[tree] NNP(Ketchum)
[ud] "(Ketchum<root> / Ketchum)"
[fourlang] "(Ketchum<root> / Ketchum)"

NN -> status_NN
[string] status
[tree] NN(status)
[ud] "(status<root> / status)"
[fourlang] "(status<root> / status)"

NNP -> Lambert_NNP
[string] Lambert
[tree] NNP(Lambert)
[ud] "(Lambert<root> / Lambert)"
[fourlang] "(Lambert<root> / Lambert)"

NNP -> Seoul_NNP
[string] Seoul
[tree] NNP(Seoul)
[ud] "(Seoul<root> / Seoul)"
[fourlang] "(Seoul<root> / Seoul)"

NN -> dividend_NN
[string] dividend
[tree] NN(dividend)
[ud] "(dividend<root> / dividend)"
[fourlang] "(dividend<root> / dividend)"

VBG -> sitting_VBG
[string] sitting
[tree] VBG(sitting)
[ud] "(sitting<root> / sitting)"
[fourlang] "(sitting<root> / sitting)"

JJ -> Such_JJ
[string] Such
[tree] JJ(Such)
[ud] "(Such<root> / Such)"
[fourlang] "(Such<root> / Such)"

NNS -> pockets_NNS
[string] pockets
[tree] NNS(pockets)
[ud] "(pockets<root> / pockets)"
[fourlang] "(pockets<root> / pockets)"

NNP -> ReyBSLPERFawcett_NNP
[string] ReyBSLPERFawcett
[tree] NNP(ReyBSLPERFawcett)
[ud] "(ReyBSLPERFawcett<root> / ReyBSLPERFawcett)"
[fourlang] "(ReyBSLPERFawcett<root> / ReyBSLPERFawcett)"

NNS -> clippings_NNS
[string] clippings
[tree] NNS(clippings)
[ud] "(clippings<root> / clippings)"
[fourlang] "(clippings<root> / clippings)"

NNP -> McAuley_NNP
[string] McAuley
[tree] NNP(McAuley)
[ud] "(McAuley<root> / McAuley)"
[fourlang] "(McAuley<root> / McAuley)"

NN -> commercial_NN
[string] commercial
[tree] NN(commercial)
[ud] "(commercial<root> / commercial)"
[fourlang] "(commercial<root> / commercial)"

CD -> zero_CD
[string] zero
[tree] CD(zero)
[ud] "(zero<root> / zero)"
[fourlang] "(zero<root> / zero)"

NNP -> Pakistan_NNP
[string] Pakistan
[tree] NNP(Pakistan)
[ud] "(Pakistan<root> / Pakistan)"
[fourlang] "(Pakistan<root> / Pakistan)"

NNP -> Hatch_NNP
[string] Hatch
[tree] NNP(Hatch)
[ud] "(Hatch<root> / Hatch)"
[fourlang] "(Hatch<root> / Hatch)"

NNP -> Italy_NNP
[string] Italy
[tree] NNP(Italy)
[ud] "(Italy<root> / Italy)"
[fourlang] "(Italy<root> / Italy)"

NNP -> Weatherly_NNP
[string] Weatherly
[tree] NNP(Weatherly)
[ud] "(Weatherly<root> / Weatherly)"
[fourlang] "(Weatherly<root> / Weatherly)"

JJ -> doubleHYPHENA_JJ
[string] doubleHYPHENA
[tree] JJ(doubleHYPHENA)
[ud] "(doubleHYPHENA<root> / doubleHYPHENA)"
[fourlang] "(doubleHYPHENA<root> / doubleHYPHENA)"

NN -> circulation_NN
[string] circulation
[tree] NN(circulation)
[ud] "(circulation<root> / circulation)"
[fourlang] "(circulation<root> / circulation)"

NNP -> Pamela_NNP
[string] Pamela
[tree] NNP(Pamela)
[ud] "(Pamela<root> / Pamela)"
[fourlang] "(Pamela<root> / Pamela)"

NNP -> Li_NNP
[string] Li
[tree] NNP(Li)
[ud] "(Li<root> / Li)"
[fourlang] "(Li<root> / Li)"

NNP -> Jonathan_NNP
[string] Jonathan
[tree] NNP(Jonathan)
[ud] "(Jonathan<root> / Jonathan)"
[fourlang] "(Jonathan<root> / Jonathan)"

NNP -> Freddie_NNP
[string] Freddie
[tree] NNP(Freddie)
[ud] "(Freddie<root> / Freddie)"
[fourlang] "(Freddie<root> / Freddie)"

NN -> era_NN
[string] era
[tree] NN(era)
[ud] "(era<root> / era)"
[fourlang] "(era<root> / era)"

NNP -> Boesel_NNP
[string] Boesel
[tree] NNP(Boesel)
[ud] "(Boesel<root> / Boesel)"
[fourlang] "(Boesel<root> / Boesel)"

NNS -> statistics_NNS
[string] statistics
[tree] NNS(statistics)
[ud] "(statistics<root> / statistics)"
[fourlang] "(statistics<root> / statistics)"

NN -> Everybody_NN
[string] Everybody
[tree] NN(Everybody)
[ud] "(Everybody<root> / Everybody)"
[fourlang] "(Everybody<root> / Everybody)"

NN -> winter_NN
[string] winter
[tree] NN(winter)
[ud] "(winter<root> / winter)"
[fourlang] "(winter<root> / winter)"

NNP -> Sterling_NNP
[string] Sterling
[tree] NNP(Sterling)
[ud] "(Sterling<root> / Sterling)"
[fourlang] "(Sterling<root> / Sterling)"

NNP -> Brooklyn_NNP
[string] Brooklyn
[tree] NNP(Brooklyn)
[ud] "(Brooklyn<root> / Brooklyn)"
[fourlang] "(Brooklyn<root> / Brooklyn)"

JJ -> easyHYPHENtoHYPHENread_JJ
[string] easyHYPHENtoHYPHENread
[tree] JJ(easyHYPHENtoHYPHENread)
[ud] "(easyHYPHENtoHYPHENread<root> / easyHYPHENtoHYPHENread)"
[fourlang] "(easyHYPHENtoHYPHENread<root> / easyHYPHENtoHYPHENread)"

NNP -> Poland_NNP
[string] Poland
[tree] NNP(Poland)
[ud] "(Poland<root> / Poland)"
[fourlang] "(Poland<root> / Poland)"

RB -> certainly_RB
[string] certainly
[tree] RB(certainly)
[ud] "(certainly<root> / certainly)"
[fourlang] "(certainly<root> / certainly)"

NNS -> places_NNS
[string] places
[tree] NNS(places)
[ud] "(places<root> / places)"
[fourlang] "(places<root> / places)"

VBN -> spread_VBN
[string] spread
[tree] VBN(spread)
[ud] "(spread<root> / spread)"
[fourlang] "(spread<root> / spread)"

NNP -> Confederation_NNP
[string] Confederation
[tree] NNP(Confederation)
[ud] "(Confederation<root> / Confederation)"
[fourlang] "(Confederation<root> / Confederation)"

NNP -> ABA_NNP
[string] ABA
[tree] NNP(ABA)
[ud] "(ABA<root> / ABA)"
[fourlang] "(ABA<root> / ABA)"

PRP$ -> their_PRP$
[string] their
[tree] PRP$(their)
[ud] "(their<root> / their)"
[fourlang] "(their<root> / their)"

NNS -> winners_NNS
[string] winners
[tree] NNS(winners)
[ud] "(winners<root> / winners)"
[fourlang] "(winners<root> / winners)"

VB -> violate_VB
[string] violate
[tree] VB(violate)
[ud] "(violate<root> / violate)"
[fourlang] "(violate<root> / violate)"

RB -> perhaps_RB
[string] perhaps
[tree] RB(perhaps)
[ud] "(perhaps<root> / perhaps)"
[fourlang] "(perhaps<root> / perhaps)"

VBN -> agreed_VBN
[string] agreed
[tree] VBN(agreed)
[ud] "(agreed<root> / agreed)"
[fourlang] "(agreed<root> / agreed)"

VBN -> terminated_VBN
[string] terminated
[tree] VBN(terminated)
[ud] "(terminated<root> / terminated)"
[fourlang] "(terminated<root> / terminated)"

NN -> reaction_NN
[string] reaction
[tree] NN(reaction)
[ud] "(reaction<root> / reaction)"
[fourlang] "(reaction<root> / reaction)"

NN -> passbook_NN
[string] passbook
[tree] NN(passbook)
[ud] "(passbook<root> / passbook)"
[fourlang] "(passbook<root> / passbook)"

JJ -> simple_JJ
[string] simple
[tree] JJ(simple)
[ud] "(simple<root> / simple)"
[fourlang] "(simple<root> / simple)"

JJ -> longHYPHENterm_JJ
[string] longHYPHENterm
[tree] JJ(longHYPHENterm)
[ud] "(longHYPHENterm<root> / longHYPHENterm)"
[fourlang] "(longHYPHENterm<root> / longHYPHENterm)"

JJ -> avid_JJ
[string] avid
[tree] JJ(avid)
[ud] "(avid<root> / avid)"
[fourlang] "(avid<root> / avid)"

NNP -> Mitsui_NNP
[string] Mitsui
[tree] NNP(Mitsui)
[ud] "(Mitsui<root> / Mitsui)"
[fourlang] "(Mitsui<root> / Mitsui)"

NNP -> Whip_NNP
[string] Whip
[tree] NNP(Whip)
[ud] "(Whip<root> / Whip)"
[fourlang] "(Whip<root> / Whip)"

NNS -> beds_NNS
[string] beds
[tree] NNS(beds)
[ud] "(beds<root> / beds)"
[fourlang] "(beds<root> / beds)"

PRP -> she_PRP
[string] she
[tree] PRP(she)
[ud] "(she<root> / she)"
[fourlang] "(she<root> / she)"

JJ -> sizable_JJ
[string] sizable
[tree] JJ(sizable)
[ud] "(sizable<root> / sizable)"
[fourlang] "(sizable<root> / sizable)"

JJ -> fair_JJ
[string] fair
[tree] JJ(fair)
[ud] "(fair<root> / fair)"
[fourlang] "(fair<root> / fair)"

NNP -> Pinocchio_NNP
[string] Pinocchio
[tree] NNP(Pinocchio)
[ud] "(Pinocchio<root> / Pinocchio)"
[fourlang] "(Pinocchio<root> / Pinocchio)"

NN -> defense_NN
[string] defense
[tree] NN(defense)
[ud] "(defense<root> / defense)"
[fourlang] "(defense<root> / defense)"

NN -> minute_NN
[string] minute
[tree] NN(minute)
[ud] "(minute<root> / minute)"
[fourlang] "(minute<root> / minute)"

NNP -> Publications_NNP
[string] Publications
[tree] NNP(Publications)
[ud] "(Publications<root> / Publications)"
[fourlang] "(Publications<root> / Publications)"

VBN -> attempted_VBN
[string] attempted
[tree] VBN(attempted)
[ud] "(attempted<root> / attempted)"
[fourlang] "(attempted<root> / attempted)"

JJ -> future_JJ
[string] future
[tree] JJ(future)
[ud] "(future<root> / future)"
[fourlang] "(future<root> / future)"

NNP -> Waertsilae_NNP
[string] Waertsilae
[tree] NNP(Waertsilae)
[ud] "(Waertsilae<root> / Waertsilae)"
[fourlang] "(Waertsilae<root> / Waertsilae)"

NN -> computer_NN
[string] computer
[tree] NN(computer)
[ud] "(computer<root> / computer)"
[fourlang] "(computer<root> / computer)"

VBG -> ignoring_VBG
[string] ignoring
[tree] VBG(ignoring)
[ud] "(ignoring<root> / ignoring)"
[fourlang] "(ignoring<root> / ignoring)"

NNP -> Candela_NNP
[string] Candela
[tree] NNP(Candela)
[ud] "(Candela<root> / Candela)"
[fourlang] "(Candela<root> / Candela)"

NNP -> Kuvin_NNP
[string] Kuvin
[tree] NNP(Kuvin)
[ud] "(Kuvin<root> / Kuvin)"
[fourlang] "(Kuvin<root> / Kuvin)"

NN -> mainframe_NN
[string] mainframe
[tree] NN(mainframe)
[ud] "(mainframe<root> / mainframe)"
[fourlang] "(mainframe<root> / mainframe)"

NNS -> copycats_NNS
[string] copycats
[tree] NNS(copycats)
[ud] "(copycats<root> / copycats)"
[fourlang] "(copycats<root> / copycats)"

VBN -> beaten_VBN
[string] beaten
[tree] VBN(beaten)
[ud] "(beaten<root> / beaten)"
[fourlang] "(beaten<root> / beaten)"

DT -> an_DT
[string] an
[tree] DT(an)
[ud] "(an<root> / an)"
[fourlang] "(an<root> / an)"

JJ -> personal_JJ
[string] personal
[tree] JJ(personal)
[ud] "(personal<root> / personal)"
[fourlang] "(personal<root> / personal)"

NN -> ground_NN
[string] ground
[tree] NN(ground)
[ud] "(ground<root> / ground)"
[fourlang] "(ground<root> / ground)"

NNS -> addresses_NNS
[string] addresses
[tree] NNS(addresses)
[ud] "(addresses<root> / addresses)"
[fourlang] "(addresses<root> / addresses)"

NNP -> Diamond_NNP
[string] Diamond
[tree] NNP(Diamond)
[ud] "(Diamond<root> / Diamond)"
[fourlang] "(Diamond<root> / Diamond)"

VBN -> traded_VBN
[string] traded
[tree] VBN(traded)
[ud] "(traded<root> / traded)"
[fourlang] "(traded<root> / traded)"

VBG -> advocating_VBG
[string] advocating
[tree] VBG(advocating)
[ud] "(advocating<root> / advocating)"
[fourlang] "(advocating<root> / advocating)"

NNP -> Hoffman_NNP
[string] Hoffman
[tree] NNP(Hoffman)
[ud] "(Hoffman<root> / Hoffman)"
[fourlang] "(Hoffman<root> / Hoffman)"

IN -> though_IN
[string] though
[tree] IN(though)
[ud] "(though<root> / though)"
[fourlang] "(though<root> / though)"

VB -> stand_VB
[string] stand
[tree] VB(stand)
[ud] "(stand<root> / stand)"
[fourlang] "(stand<root> / stand)"

PUNCT -> HYPHEN_PUNCT
[string] HYPHEN
[tree] PUNCT(HYPHEN)
[ud] "(HYPHEN<root> / HYPHEN)"
[fourlang] "(HYPHEN<root> / HYPHEN)"

NNS -> men_NNS
[string] men
[tree] NNS(men)
[ud] "(men<root> / men)"
[fourlang] "(men<root> / men)"

NN -> supplier_NN
[string] supplier
[tree] NN(supplier)
[ud] "(supplier<root> / supplier)"
[fourlang] "(supplier<root> / supplier)"

VBG -> requiring_VBG
[string] requiring
[tree] VBG(requiring)
[ud] "(requiring<root> / requiring)"
[fourlang] "(requiring<root> / requiring)"

RB -> nSQt_RB
[string] nSQt
[tree] RB(nSQt)
[ud] "(nSQt<root> / nSQt)"
[fourlang] "(nSQt<root> / nSQt)"

NNP -> Psychiatry_NNP
[string] Psychiatry
[tree] NNP(Psychiatry)
[ud] "(Psychiatry<root> / Psychiatry)"
[fourlang] "(Psychiatry<root> / Psychiatry)"

VB -> discharge_VB
[string] discharge
[tree] VB(discharge)
[ud] "(discharge<root> / discharge)"
[fourlang] "(discharge<root> / discharge)"

VBG -> engaging_VBG
[string] engaging
[tree] VBG(engaging)
[ud] "(engaging<root> / engaging)"
[fourlang] "(engaging<root> / engaging)"

NN -> nomination_NN
[string] nomination
[tree] NN(nomination)
[ud] "(nomination<root> / nomination)"
[fourlang] "(nomination<root> / nomination)"

NNP -> Upham_NNP
[string] Upham
[tree] NNP(Upham)
[ud] "(Upham<root> / Upham)"
[fourlang] "(Upham<root> / Upham)"

JJ -> Average_JJ
[string] Average
[tree] JJ(Average)
[ud] "(Average<root> / Average)"
[fourlang] "(Average<root> / Average)"

VBN -> based_VBN
[string] based
[tree] VBN(based)
[ud] "(based<root> / based)"
[fourlang] "(based<root> / based)"

NNP -> Bolduc_NNP
[string] Bolduc
[tree] NNP(Bolduc)
[ud] "(Bolduc<root> / Bolduc)"
[fourlang] "(Bolduc<root> / Bolduc)"

IN -> near_IN
[string] near
[tree] IN(near)
[ud] "(near<root> / near)"
[fourlang] "(near<root> / near)"

NN -> depository_NN
[string] depository
[tree] NN(depository)
[ud] "(depository<root> / depository)"
[fourlang] "(depository<root> / depository)"

NNP -> Article_NNP
[string] Article
[tree] NNP(Article)
[ud] "(Article<root> / Article)"
[fourlang] "(Article<root> / Article)"

NNS -> guilders_NNS
[string] guilders
[tree] NNS(guilders)
[ud] "(guilders<root> / guilders)"
[fourlang] "(guilders<root> / guilders)"

NNP -> Ray_NNP
[string] Ray
[tree] NNP(Ray)
[ud] "(Ray<root> / Ray)"
[fourlang] "(Ray<root> / Ray)"

NN -> Drug_NN
[string] Drug
[tree] NN(Drug)
[ud] "(Drug<root> / Drug)"
[fourlang] "(Drug<root> / Drug)"

JJ -> academic_JJ
[string] academic
[tree] JJ(academic)
[ud] "(academic<root> / academic)"
[fourlang] "(academic<root> / academic)"

NN -> refund_NN
[string] refund
[tree] NN(refund)
[ud] "(refund<root> / refund)"
[fourlang] "(refund<root> / refund)"

NNS -> pills_NNS
[string] pills
[tree] NNS(pills)
[ud] "(pills<root> / pills)"
[fourlang] "(pills<root> / pills)"

NNS -> media_NNS
[string] media
[tree] NNS(media)
[ud] "(media<root> / media)"
[fourlang] "(media<root> / media)"

NN -> image_NN
[string] image
[tree] NN(image)
[ud] "(image<root> / image)"
[fourlang] "(image<root> / image)"

NNP -> Ministry_NNP
[string] Ministry
[tree] NNP(Ministry)
[ud] "(Ministry<root> / Ministry)"
[fourlang] "(Ministry<root> / Ministry)"

JJ -> Several_JJ
[string] Several
[tree] JJ(Several)
[ud] "(Several<root> / Several)"
[fourlang] "(Several<root> / Several)"

NN -> pill_NN
[string] pill
[tree] NN(pill)
[ud] "(pill<root> / pill)"
[fourlang] "(pill<root> / pill)"

NNS -> names_NNS
[string] names
[tree] NNS(names)
[ud] "(names<root> / names)"
[fourlang] "(names<root> / names)"

NNPS -> Airways_NNPS
[string] Airways
[tree] NNPS(Airways)
[ud] "(Airways<root> / Airways)"
[fourlang] "(Airways<root> / Airways)"

PRP$ -> His_PRP$
[string] His
[tree] PRP$(His)
[ud] "(His<root> / His)"
[fourlang] "(His<root> / His)"

RB -> approximately_RB
[string] approximately
[tree] RB(approximately)
[ud] "(approximately<root> / approximately)"
[fourlang] "(approximately<root> / approximately)"

NN -> mayor_NN
[string] mayor
[tree] NN(mayor)
[ud] "(mayor<root> / mayor)"
[fourlang] "(mayor<root> / mayor)"

NNS -> Soviets_NNS
[string] Soviets
[tree] NNS(Soviets)
[ud] "(Soviets<root> / Soviets)"
[fourlang] "(Soviets<root> / Soviets)"

NN -> veto_NN
[string] veto
[tree] NN(veto)
[ud] "(veto<root> / veto)"
[fourlang] "(veto<root> / veto)"

NN -> CHYPHENDIGITDIGIT_NN
[string] CHYPHENDIGITDIGIT
[tree] NN(CHYPHENDIGITDIGIT)
[ud] "(CHYPHENDIGITDIGIT<root> / CHYPHENDIGITDIGIT)"
[fourlang] "(CHYPHENDIGITDIGIT<root> / CHYPHENDIGITDIGIT)"

NNS -> victims_NNS
[string] victims
[tree] NNS(victims)
[ud] "(victims<root> / victims)"
[fourlang] "(victims<root> / victims)"

NNP -> Sol_NNP
[string] Sol
[tree] NNP(Sol)
[ud] "(Sol<root> / Sol)"
[fourlang] "(Sol<root> / Sol)"

CC -> vsPERIOD_CC
[string] vsPERIOD
[tree] CC(vsPERIOD)
[ud] "(vsPERIOD<root> / vsPERIOD)"
[fourlang] "(vsPERIOD<root> / vsPERIOD)"

NNS -> stones_NNS
[string] stones
[tree] NNS(stones)
[ud] "(stones<root> / stones)"
[fourlang] "(stones<root> / stones)"

NN -> paperback_NN
[string] paperback
[tree] NN(paperback)
[ud] "(paperback<root> / paperback)"
[fourlang] "(paperback<root> / paperback)"

JJ -> Asian_JJ
[string] Asian
[tree] JJ(Asian)
[ud] "(Asian<root> / Asian)"
[fourlang] "(Asian<root> / Asian)"

NNP -> Rockefeller_NNP
[string] Rockefeller
[tree] NNP(Rockefeller)
[ud] "(Rockefeller<root> / Rockefeller)"
[fourlang] "(Rockefeller<root> / Rockefeller)"

NNS -> notes_NNS
[string] notes
[tree] NNS(notes)
[ud] "(notes<root> / notes)"
[fourlang] "(notes<root> / notes)"

JJ -> lasting_JJ
[string] lasting
[tree] JJ(lasting)
[ud] "(lasting<root> / lasting)"
[fourlang] "(lasting<root> / lasting)"

NNS -> officials_NNS
[string] officials
[tree] NNS(officials)
[ud] "(officials<root> / officials)"
[fourlang] "(officials<root> / officials)"

NN -> strength_NN
[string] strength
[tree] NN(strength)
[ud] "(strength<root> / strength)"
[fourlang] "(strength<root> / strength)"

NNP -> Trustco_NNP
[string] Trustco
[tree] NNP(Trustco)
[ud] "(Trustco<root> / Trustco)"
[fourlang] "(Trustco<root> / Trustco)"

NN -> row_NN
[string] row
[tree] NN(row)
[ud] "(row<root> / row)"
[fourlang] "(row<root> / row)"

JJ -> record_JJ
[string] record
[tree] JJ(record)
[ud] "(record<root> / record)"
[fourlang] "(record<root> / record)"

NNS -> data_NNS
[string] data
[tree] NNS(data)
[ud] "(data<root> / data)"
[fourlang] "(data<root> / data)"

NN -> improvement_NN
[string] improvement
[tree] NN(improvement)
[ud] "(improvement<root> / improvement)"
[fourlang] "(improvement<root> / improvement)"

VBN -> signed_VBN
[string] signed
[tree] VBN(signed)
[ud] "(signed<root> / signed)"
[fourlang] "(signed<root> / signed)"

NNP -> Hampshire_NNP
[string] Hampshire
[tree] NNP(Hampshire)
[ud] "(Hampshire<root> / Hampshire)"
[fourlang] "(Hampshire<root> / Hampshire)"

VBG -> deteriorating_VBG
[string] deteriorating
[tree] VBG(deteriorating)
[ud] "(deteriorating<root> / deteriorating)"
[fourlang] "(deteriorating<root> / deteriorating)"

NNS -> Earnings_NNS
[string] Earnings
[tree] NNS(Earnings)
[ud] "(Earnings<root> / Earnings)"
[fourlang] "(Earnings<root> / Earnings)"

NNS -> emissions_NNS
[string] emissions
[tree] NNS(emissions)
[ud] "(emissions<root> / emissions)"
[fourlang] "(emissions<root> / emissions)"

NN -> earthquake_NN
[string] earthquake
[tree] NN(earthquake)
[ud] "(earthquake<root> / earthquake)"
[fourlang] "(earthquake<root> / earthquake)"

NNP -> University_NNP
[string] University
[tree] NNP(University)
[ud] "(University<root> / University)"
[fourlang] "(University<root> / University)"

JJ -> easy_JJ
[string] easy
[tree] JJ(easy)
[ud] "(easy<root> / easy)"
[fourlang] "(easy<root> / easy)"

RB -> federally_RB
[string] federally
[tree] RB(federally)
[ud] "(federally<root> / federally)"
[fourlang] "(federally<root> / federally)"

NNS -> drugs_NNS
[string] drugs
[tree] NNS(drugs)
[ud] "(drugs<root> / drugs)"
[fourlang] "(drugs<root> / drugs)"

NN -> effect_NN
[string] effect
[tree] NN(effect)
[ud] "(effect<root> / effect)"
[fourlang] "(effect<root> / effect)"

NNP -> Negus_NNP
[string] Negus
[tree] NNP(Negus)
[ud] "(Negus<root> / Negus)"
[fourlang] "(Negus<root> / Negus)"

NNP -> NATIONAL_NNP
[string] NATIONAL
[tree] NNP(NATIONAL)
[ud] "(NATIONAL<root> / NATIONAL)"
[fourlang] "(NATIONAL<root> / NATIONAL)"

NN -> dinner_NN
[string] dinner
[tree] NN(dinner)
[ud] "(dinner<root> / dinner)"
[fourlang] "(dinner<root> / dinner)"

NNP -> Burgundy_NNP
[string] Burgundy
[tree] NNP(Burgundy)
[ud] "(Burgundy<root> / Burgundy)"
[fourlang] "(Burgundy<root> / Burgundy)"

NNP -> Walbrecher_NNP
[string] Walbrecher
[tree] NNP(Walbrecher)
[ud] "(Walbrecher<root> / Walbrecher)"
[fourlang] "(Walbrecher<root> / Walbrecher)"

NNS -> offerings_NNS
[string] offerings
[tree] NNS(offerings)
[ud] "(offerings<root> / offerings)"
[fourlang] "(offerings<root> / offerings)"

JJ -> own_JJ
[string] own
[tree] JJ(own)
[ud] "(own<root> / own)"
[fourlang] "(own<root> / own)"

NN -> victory_NN
[string] victory
[tree] NN(victory)
[ud] "(victory<root> / victory)"
[fourlang] "(victory<root> / victory)"

NN -> vinyl_NN
[string] vinyl
[tree] NN(vinyl)
[ud] "(vinyl<root> / vinyl)"
[fourlang] "(vinyl<root> / vinyl)"

VB -> stop_VB
[string] stop
[tree] VB(stop)
[ud] "(stop<root> / stop)"
[fourlang] "(stop<root> / stop)"

NN -> superconductor_NN
[string] superconductor
[tree] NN(superconductor)
[ud] "(superconductor<root> / superconductor)"
[fourlang] "(superconductor<root> / superconductor)"

NN -> solicitation_NN
[string] solicitation
[tree] NN(solicitation)
[ud] "(solicitation<root> / solicitation)"
[fourlang] "(solicitation<root> / solicitation)"

IN -> with_IN
[string] with
[tree] IN(with)
[ud] "(with<root> / with)"
[fourlang] "(with<root> / with)"

JJ -> yenHYPHENsupport_JJ
[string] yenHYPHENsupport
[tree] JJ(yenHYPHENsupport)
[ud] "(yenHYPHENsupport<root> / yenHYPHENsupport)"
[fourlang] "(yenHYPHENsupport<root> / yenHYPHENsupport)"

NNS -> Companies_NNS
[string] Companies
[tree] NNS(Companies)
[ud] "(Companies<root> / Companies)"
[fourlang] "(Companies<root> / Companies)"

NNS -> missiles_NNS
[string] missiles
[tree] NNS(missiles)
[ud] "(missiles<root> / missiles)"
[fourlang] "(missiles<root> / missiles)"

MD -> may_MD
[string] may
[tree] MD(may)
[ud] "(may<root> / may)"
[fourlang] "(may<root> / may)"

VBG -> neighboring_VBG
[string] neighboring
[tree] VBG(neighboring)
[ud] "(neighboring<root> / neighboring)"
[fourlang] "(neighboring<root> / neighboring)"

JJ -> previous_JJ
[string] previous
[tree] JJ(previous)
[ud] "(previous<root> / previous)"
[fourlang] "(previous<root> / previous)"

NNP -> Court_NNP
[string] Court
[tree] NNP(Court)
[ud] "(Court<root> / Court)"
[fourlang] "(Court<root> / Court)"

NNP -> Glauber_NNP
[string] Glauber
[tree] NNP(Glauber)
[ud] "(Glauber<root> / Glauber)"
[fourlang] "(Glauber<root> / Glauber)"

NNP -> Scherer_NNP
[string] Scherer
[tree] NNP(Scherer)
[ud] "(Scherer<root> / Scherer)"
[fourlang] "(Scherer<root> / Scherer)"

NN -> craneHYPHENsafety_NN
[string] craneHYPHENsafety
[tree] NN(craneHYPHENsafety)
[ud] "(craneHYPHENsafety<root> / craneHYPHENsafety)"
[fourlang] "(craneHYPHENsafety<root> / craneHYPHENsafety)"

CD -> DIGITDIGITCOMMADIGITDIGITDIGIT_CD
[string] DIGITDIGITCOMMADIGITDIGITDIGIT
[tree] CD(DIGITDIGITCOMMADIGITDIGITDIGIT)
[ud] "(DIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITCOMMADIGITDIGITDIGIT)"
[fourlang] "(DIGITDIGITCOMMADIGITDIGITDIGIT<root> / DIGITDIGITCOMMADIGITDIGITDIGIT)"

NNP -> Chairman_NNP
[string] Chairman
[tree] NNP(Chairman)
[ud] "(Chairman<root> / Chairman)"
[fourlang] "(Chairman<root> / Chairman)"

JJ -> Much_JJ
[string] Much
[tree] JJ(Much)
[ud] "(Much<root> / Much)"
[fourlang] "(Much<root> / Much)"

