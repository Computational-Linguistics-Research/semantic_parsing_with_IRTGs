interpretation tree: de.up.ling.irtg.algebra.TagTreeAlgebra
interpretation ud: de.up.ling.irtg.algebra.graph.GraphAlgebra
interpretation fourlang: de.up.ling.irtg.algebra.graph.GraphAlgebra



//UPPER NODES
//UPPER NODES

//entry point
S!-> sentence(NP)
[tree] ?1
[ud] ?1
[fourlang] ?1



//LOWER NODES
//LOWER NODES

//Noun_Phrases
//Noun_Phrases

//binary
//binary

//NounPhrase out of a Word1 (whitch is a Modifier1) and a Word2.
//(NP (WD1 stuff) (WD2 stuff))
NP -> mod1_WD1_WD2(WD1,WD2)
[tree] NP2(?1,?2)
[ud] merge(f_dep(merge("(r<root> :mod1 (d<dep>))",r_dep(?1))),?2)
[fourlang] merge(f_dep(merge("(r<root> :_ (d<dep>))",r_dep(?1))),?2)
//(NP (CD DIGITSBSLPERDIGITS) (NN point))
//NounPhrase Out of a Cardinal number and a Noun 
NP -> nummodNoun(CD,NN)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :nummod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of two Cardinal numbers
//(NP (CD DIGITS) (CD DIGITSBSLPERDIGITS))
NP -> nummodCardinalNumber(CD,CD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :nummod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of a Cardinal number and an Adverb
//(NP (CD DIGITSCOLONDIGITS) (RB pPERIODm))
NP -> nummodAdverb(CD,RB)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :nummod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of a Cardinal number and an PossessiveEnding 
//(NP (CD DIGITS) (POS SQs))
NP -> nummodPossessiveEnding(CD,POS)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :nummod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of a Cardinal number and an Adjective 
//(NP (CD one) (JJ right))
NP -> nummodAdjective(CD,JJ)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :nummod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of a determiner and a CardinalNumber
//(NP (DT a) (CD DIGITSHYPHENyearHYPHENold))
NP -> detCardinalNumber(DT,CD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :det (d<dependent>))",r_dependent(?1))),?2)
[fourlang] ?2

//NounPhrase Out of a determiner and an Adjective
//(NP (DT a) (JJ DIGITSHYPHENyearHYPHENold))
NP -> detAdjective(DT,JJ)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :det (d<dependent>))",r_dependent(?1))),?2)
[fourlang] ?2

//NounPhrase Out of a determiner and a Noun
//(NP (DT all) (NN propaganda))
NP -> detCardinalNoun(DT,NN)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :det (d<dependent>))",r_dependent(?1))),?2)
[fourlang] ?2

//NounPhrase Out of a determiner and a Adverb
//(NP (DT a) (RB little))
NP -> detAdverb(DT,RB)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :det (d<dependent>))",r_dependent(?1))),?2)
[fourlang] ?2

//NounPhrase Out of a determiner and a Past Verb
//(NP (DT each) (VBD preferred))
NP -> detPastVerb(DT,VBD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :det (d<dependent>))",r_dependent(?1))),?2)
[fourlang] ?2

//NounPhrase Out of a determiner and a Personal Pronoun
//(NP (DT no) (PRP one))
NP -> detPersonalPronouns(DT,PRP)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :det (d<dependent>))",r_dependent(?1))),?2)
[fourlang] ?2


//NounPhrase Out of a IQIQ and a Noun
//(NP (IQIQ IQIQ) (NN exposure))
NP -> IQIQwithNoun(IQIQ,NN)
[tree] NP2(?1,?2)
[ud] ?2
[fourlang] ?2

//NounPhrase Out of an Adjective and a Noun 
//(NP (JJ abortionHYPHENrelated) (NNS services))
NP -> amodAdjective(JJ,NN)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :amod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of a Adjective and a CardinalNumber 
//(NP (JJ fiscal) (CD DIGITS))
NP -> AmodCardinalNumber(JJ,CD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :amod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)

//NounPhrase Out of an Adjective number and a Gerund Verb 
//(NP (JJ moderate) (VBG trading))
NP -> amodGerund(JJ,VBG)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :amod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//NounPhrase Out of two Nouns
//(NP (NN acid) (NN rain))
NP -> compound(NN,NN)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :compound (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :comp (d<dependent>))",r_dependent(?1))),?2)


//NounPhrase Out of a Cardinal number and a Noun 
NP -> nounWithCardinalNumber(NN,CD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :nummod (d<dependent>))",r_dependent(?2))),?1)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?2))),?1)


//case(anybody-7, 's-8)
//(NP (NN anybody) (POS SQs))
//NounPhrase Out of an Noun and a Possessive Ending
NP -> caseNounRev(NN,POS)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :case (d<dependent>))",r_dependent(?2))),?1)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?2))),?1)

//NounPhrase Out of an Noun and a Adverb
//(NP (NN anyone) (RB else))
NP -> advmodNounRev(NN,RB)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :advmod (d<dependent>))",r_dependent(?2))),?1)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?2))),?1)


//NounPhrase Out of a Noun and a Gerund Verb
//(NP (NN dollar) (VBG buying))
NP -> compoundGerund(NN,VBG)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :compound (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :comp (d<dependent>))",r_dependent(?1))),?2)


//(NP (NNP Ark) (PERIOD PERIOD))
//NounPhrase Out of a Noun and a PERIOD
NP -> compoundPeriod(NN,PERIOD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :compound (d<dependent>))",r_dependent(?2))),?1)
[fourlang] merge(f_dependent(merge("(r<root> :comp (d<dependent>))",r_dependent(?2))),?1)


//NounPhrase Out of an Noun and an Adjective 
//(NP (NNP Heritage) (JJ common))
NP -> amodAdjectiveRev(NN,JJ)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :amod (d<dependent>))",r_dependent(?2))),?1)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?2))),?1)


//NounPhrase Out of an PreDeterminer and a Determiner 
//(NP (PDT all) (DT this))
NP -> predetDet(PDT,DT)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :predet (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//NounPhrase Out of an PrologePossessive Pronoun and a Noun 
//(NP (PRP$ her) (NN behalf))
NP -> possNoun(PRP$,NN)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :poss (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//NounPhrase Out of an PrologePossessive Pronoun and a Adjective 
//(NP (PRP$ his) (JJ own))
NP -> possAdjective(PRP$,JJ)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :poss (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//NounPhrase Out of an Adverb and a Adjective 
//(NP (RB as) (JJ much))
NP -> advmodAdjective(RB,JJ)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :advmod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//(NP (RB currently) (NN chairman))
//NounPhrase Out of an Adverb and a Noun 
NP -> advmodNoun(RB,NN)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :advmod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//(NP (RB just) (CD DIGITSPERIODDIGITS))
//NounPhrase Out of an Adverb and a CardinalNumber 
NP -> advmodCardinalNumber(RB,CD)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :advmod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


//(NP (RB very) (RB little))
//NounPhrase Out of two Adverbs 
NP -> advmodAdverb(RB,RB)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :advmod (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)


/*


//(NP (RB almost) (DT all))
//NounPhrase Out of an PrologePossessive Pronoun and a Adjective 
NP -> advmodDeterminer(RB,DT)
[tree] NP2(?1,?2)
[ud] merge(f_dependent(merge("(r<root> :poss (d<dependent>))",r_dependent(?1))),?2)
[fourlang] merge(f_dependent(merge("(r<root> :_ (d<dependent>))",r_dependent(?1))),?2)
//Adverb with Determiner
(NP (RB almost) (DT all))


//Past Verb with Noun
(NP (VBD proposed) (NN offering))
//Gerund|PresentParticiple Verb with Plural Noun
(NP (VBG advancing) (NNS issues))
//Verb with Noun
(NP (VB Put) (NN option))
//Noun with Noun
(NP (WP what) (RB else))
*/




//TERMINALS
//TERMINALS

//Converters
//Converters

//Nouns
//Nouns

//basic
NN -> NNbasic_2_NN(NNbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//proper
NN -> NNP_2_NN(NNP)
[tree] ?1
[ud] ?1
[fourlang] ?1

//plural
NN -> NNS_2_NN(NNS)
[tree] ?1
[ud] ?1
[fourlang] ?1

//proper plural
NN -> NNPS_2_NN(NNPS)
[tree] ?1
[ud] ?1
[fourlang] ?1


//Adjectives
//Adjectives

//basic
JJ -> JJbasic_2_JJ(JJbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//comparative
JJ -> JJR_2_JJ(JJR)
[tree] ?1
[ud] ?1
[fourlang] ?1

//superlative
JJ -> JJS_2_JJ(JJS)
[tree] ?1
[ud] ?1
[fourlang] ?1


//Adverbs
//Adverbs

//basic
RB -> RBbasic_2_RB(RBbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//comparative
RB -> RBR_2_RB(RBR)
[tree] ?1
[ud] ?1
[fourlang] ?1

//superlative
RB -> RBS_2_RB(RBS)
[tree] ?1
[ud] ?1
[fourlang] ?1


//Verbs
//Verbs

//basic
VB -> VBbasic_2_VB(VBbasic)
[tree] ?1
[ud] ?1
[fourlang] ?1

//past tense
VB -> VBD_2_VB(VBD)
[tree] ?1
[ud] ?1
[fourlang] ?1

//gerund or present participle
VB -> VBG_2_VB(VBG)
[tree] ?1
[ud] ?1
[fourlang] ?1

//past participle
VB -> VBN_2_VB(VBN)
[tree] ?1
[ud] ?1
[fourlang] ?1

//non-3rd person singular present
VB -> VBP_2_VB(VBP)
[tree] ?1
[ud] ?1
[fourlang] ?1

//3rd person singular present
VB -> VBZ_2_VB(VBZ)
[tree] ?1
[ud] ?1
[fourlang] ?1



//Dictionary
//Dictionary

//Cardinal Numbers
//DIGITS
CD -> DIGITS_CD
[tree] CD(DIGITS)
[ud] "(DIGITS<root>/DIGITS)"
[fourlang] "(DIGITS<root>/DIGITS)"

//Cardinal Numbers
//DIGITSBSLPERDIGITS
CD -> DIGITSBSLPERDIGITS_CD
[tree] CD(DIGITSBSLPERDIGITS)
[ud] "(DIGITSBSLPERDIGITS<root>/DIGITSBSLPERDIGITS)"
[fourlang] "(DIGITSBSLPERDIGITS<root>/DIGITSBSLPERDIGITS)"

//Cardinal Numbers
//DIGITSCOLONDIGITS
CD -> DIGITSCOLONDIGITS_CD
[tree] CD(DIGITSCOLONDIGITS)
[ud] "(DIGITSCOLONDIGITS<root>/DIGITSCOLONDIGITS)"
[fourlang] "(DIGITSCOLONDIGITS<root>/DIGITSCOLONDIGITS)"

//Cardinal Numbers
//DIGITSHYPHENyearHYPHENold
CD -> DIGITSHYPHENyearHYPHENold_CD
[tree] CD(DIGITSHYPHENyearHYPHENold)
[ud] "(DIGITSHYPHENyearHYPHENold<root>/DIGITSHYPHENyearHYPHENold)"
[fourlang] "(DIGITSHYPHENyearHYPHENold<root>/DIGITSHYPHENyearHYPHENold)"

//Cardinal Numbers
//DIGITSPERIODDIGITS
CD -> DIGITSPERIODDIGITS_CD
[tree] CD(DIGITSPERIODDIGITS)
[ud] "(DIGITSPERIODDIGITS<root>/DIGITSPERIODDIGITS)"
[fourlang] "(DIGITSPERIODDIGITS<root>/DIGITSPERIODDIGITS)"


//Determinants
//a
DT -> a_DT
[tree] DT(a)
[ud] "(a<root>/a)"
[fourlang] "(a<root>/a)"

//Determinants
//all
DT -> all_DT
[tree] DT(all)
[ud] "(all<root>/all)"
[fourlang] "(all<root>/all)"

//Determinants
//each
DT -> each_DT
[tree] DT(each)
[ud] "(each<root>/each)"
[fourlang] "(each<root>/each)"

//Determinants
//no
DT -> no_DT
[tree] DT(no)
[ud] "(no<root>/no)"
[fourlang] "(no<root>/no)"

//Determinants
//this
DT -> this_DT
[tree] DT(this)
[ud] "(this<root>/this)"
[fourlang] "(this<root>/this)"

//PUNCT
//IQIQ
PUNCT -> IQIQ
[tree] PUNCT(IQIQ)
[ud] "(''<root>/'')"
[fourlang] "(''<root>/'')"

//Adjective
//abortionHYPHENrelated
JJbasic -> abortionHYPHENrelated_JJ
[tree] JJ(abortionHYPHENrelated)
[ud] "(abortionHYPHENrelated<root>/abortionHYPHENrelated)"
[fourlang] "(abortionHYPHENrelated<root>/abortionHYPHENrelated)"

//Adjective
//common
JJbasic -> common_JJ
[tree] JJ(common)
[ud] "(common<root>/common)"
[fourlang] "(common<root>/common)"

//Adjective
//DIGITSHYPHENyearHYPHENold
JJbasic -> DIGITSHYPHENyearHYPHENold_JJ
[tree] JJ(DIGITSHYPHENyearHYPHENold)
[ud] "(DIGITSHYPHENyearHYPHENold<root>/DIGITSHYPHENyearHYPHENold)"
[fourlang] "(DIGITSHYPHENyearHYPHENold<root>/DIGITSHYPHENyearHYPHENold)"

//Adjective
//fiscal
JJbasic -> fiscal_JJ
[tree] JJ(fiscal)
[ud] "(fiscal<root>/fiscal)"
[fourlang] "(fiscal<root>/fiscal)"

//Adjective
//moderate
JJbasic -> moderate_JJ
[tree] JJ(moderate)
[ud] "(moderate<root>/moderate)"
[fourlang] "(moderate<root>/moderate)"

//Adjective
//much
JJbasic -> much_JJ
[tree] JJ(much)
[ud] "(much<root>/much)"
[fourlang] "(much<root>/much)"

//Adjective
//own
JJbasic -> own_JJ
[tree] JJ(own)
[ud] "(own<root>/own)"
[fourlang] "(own<root>/own)"

//Adjective
//right
JJbasic -> right_JJ
[tree] JJ(right)
[ud] "(right<root>/right)"
[fourlang] "(right<root>/right)"

//Noun
//acid
NNbasic -> acid_NN
[tree] NN(acid)
[ud] "(acid<root>/acid)"
[fourlang] "(acid<root>/acid)"

//Noun
//age
NNbasic -> age_NN
[tree] NN(age)
[ud] "(age<root>/age)"
[fourlang] "(age<root>/age)"

//Noun
//anybody
NNbasic -> anybody_NN
[tree] NN(anybody)
[ud] "(anybody<root>/anybody)"
[fourlang] "(anybody<root>/anybody)"

//Noun
//anyone
NNbasic -> anyone_NN
[tree] NN(anyone)
[ud] "(anyone<root>/anyone)"
[fourlang] "(anyone<root>/anyone)"

//Noun
//behalf
NNbasic -> behalf_NN
[tree] NN(behalf)
[ud] "(behalf<root>/behalf)"
[fourlang] "(behalf<root>/behalf)"

//Noun
//chairman
NNbasic -> chairman_NN
[tree] NN(chairman)
[ud] "(chairman<root>/chairman)"
[fourlang] "(chairman<root>/chairman)"

//Noun
//dollar
NNbasic -> dollar_NN
[tree] NN(dollar)
[ud] "(dollar<root>/dollar)"
[fourlang] "(dollar<root>/dollar)"

//Noun
//exposure
NNbasic -> exposure_NN
[tree] NN(exposure)
[ud] "(exposure<root>/exposure)"
[fourlang] "(exposure<root>/exposure)"

//Noun
//job
NNbasic -> job_NN
[tree] NN(job)
[ud] "(job<root>/job)"
[fourlang] "(job<root>/job)"

//Noun
//offering
NNbasic -> offering_NN
[tree] NN(offering)
[ud] "(offering<root>/offering)"
[fourlang] "(offering<root>/offering)"

//Noun
//option
NNbasic -> option_NN
[tree] NN(option)
[ud] "(option<root>/option)"
[fourlang] "(option<root>/option)"

//Noun
//point
NNbasic -> point_NN
[tree] NN(point)
[ud] "(point<root>/point)"
[fourlang] "(point<root>/point)"

//Noun
//propaganda
NN -> propaganda_NN
[tree] NN(propaganda)
[ud] "(propaganda<root>/propaganda)"
[fourlang] "(propaganda<root>/propaganda)"

//Plural Noun
//services
NNS -> services_NNS
[tree] NNS(services)
[ud] "(services<root>/services)"
[fourlang] "(services<root>/services)"

//Plural Noun
//issues
NNS -> issues_NNS
[tree] NNS(issues)
[ud] "(issues<root>/issues)"
[fourlang] "(issues<root>/issues)"

//Proper Noun
//Ark
NNP -> Ark_NNP
[tree] NNP(Ark)
[ud] "(Ark<root>/Ark)"
[fourlang] "(Ark<root>/Ark)"

//Proper Noun
//Heritage
NNP -> Heritage_NounProper
[tree] NNP(Heritage)
[ud] "(Heritage<root>/Heritage)"
[fourlang] "(Heritage<root>/Heritage)"

//PUNCT
//PERIOD
PUNCT -> PERIOD
[tree] PUNCT(PERIOD)
[ud] "(PERIOD<root>/PERIOD)"
[fourlang] "(PERIOD<root>/PERIOD)"

//Predeterminer
//all
PDT -> all_PDT
[tree] PDT(all)
[ud] "(all<root>/all)"
[fourlang] "(all<root>/all)"

//Possessive Ending
//SQs
POS -> SQs_PRP
[tree] POS(SQs)
[ud] "(SQs<root>/SQs)"
[fourlang] "(SQs<root>/SQs)"

//Personal Pronouns
//one
PRP -> one_PRP
[tree] PRP(one)
[ud] "(one<root>/one)"
[fourlang] "(one<root>/one)"

//Personal Pronouns
//her
PRP -> her_PronounPersonal
[tree] PRP(her)
[ud] "(her<root>/her)"
[fourlang] "(her<root>/her)"


//PrologePossessive Pronoun
//her
PRP$ -> her_PRP$
[tree] PRP$(her)
[ud] "(her<root>/her)"
[fourlang] "(her<root>/her)"

//PrologePossessive Pronoun
//his
PRP$ -> his_PRP$
[tree] PRP$(his)
[ud] "(his<root>/his)"
[fourlang] "(his<root>/his)"

//Adverb
//almost
RBbasic -> almost_RB
[tree] RB(almost)
[ud] "(almost<root>/almost)"
[fourlang] "(almost<root>/almost)"

//Adverb
//as
RBbasic -> as_RB
[tree] RB(as)
[ud] "(as<root>/as)"
[fourlang] "(as<root>/as)"

//Adverb
//currently
RBbasic -> currently_RB
[tree] RB(currently)
[ud] "(currently<root>/currently)"
[fourlang] "(currently<root>/currently)"

//Adverb
//else
RBbasic -> else_RB
[tree] RB(else)
[ud] "(else<root>/else)"
[fourlang] "(else<root>/else)"

//Adverb
//just
RBbasic -> just_RB
[tree] RB(just)
[ud] "(just<root>/just)"
[fourlang] "(just<root>/just)"

//Adverb
//little
RBbasic -> little_RB
[tree] RB(little)
[ud] "(little<root>/little)"
[fourlang] "(little<root>/little)"

//Adverb
//pPERIODm
RBbasic -> pPERIODm_RB
[tree] RB(pPERIODm)
[ud] "(pPERIODm<root>/pPERIODm)"
[fourlang] "(pPERIODm<root>/pPERIODm)"

//Adverb
//very
RBbasic -> very_RB
[tree] RB(very)
[ud] "(very<root>/very)"
[fourlang] "(very<root>/very)"


//Verb
//Put
VBbasic -> Put_VB
[tree] VB(Put)
[ud] "(Put<root>/Put)"
[fourlang] "(Put<root>/Put)"

//Gerund|PresentParticiple Verb
//advancing
VBG -> advancing_VBG
[tree] VBG(advancing)
[ud] "(advancing<root>/advancing)"
[fourlang] "(advancing<root>/advancing)"

//Gerund|PresentParticiple Verb
//buying
VBG -> buying_VBG
[tree] VBG(buying)
[ud] "(buying<root>/buying)"
[fourlang] "(buying<root>/buying)"

//Gerund|PresentParticiple Verb
//trading
VBG -> trading_VBG
[tree] VBG(trading)
[ud] "(trading<root>/trading)"
[fourlang] "(trading<root>/trading)"

//WhDeterminer
//What
WDT -> What_WDT
[tree] WDT(What)
[ud] "(What<root>/What)"
[fourlang] "(What<root>/What)"

